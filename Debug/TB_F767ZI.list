
TB_F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000875c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08008960  08008960  00009960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d24  08008d24  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008d24  08008d24  00009d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d2c  08008d2c  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d2c  08008d2c  00009d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d30  08008d30  00009d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008d34  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  200001d8  08008f0c  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08008f0c  0000a67c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000212cb  00000000  00000000  0000a206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041f0  00000000  00000000  0002b4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b88  00000000  00000000  0002f6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001583  00000000  00000000  00031250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008975  00000000  00000000  000327d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021f73  00000000  00000000  0003b148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119b25  00000000  00000000  0005d0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00176be0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008350  00000000  00000000  00176c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0017ef74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	08008944 	.word	0x08008944

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	08008944 	.word	0x08008944

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__io_putchar>:
static void MX_I2C1_Init(void);
static void MX_SPI4_Init(void);
void StartDefaultTask(void const * argument);

/* USER CODE BEGIN PFP */
void __io_putchar(uint8_t ch){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart5, &ch, 1, 1);
 80005ea:	1df9      	adds	r1, r7, #7
 80005ec:	2301      	movs	r3, #1
 80005ee:	2201      	movs	r2, #1
 80005f0:	4803      	ldr	r0, [pc, #12]	@ (8000600 <__io_putchar+0x20>)
 80005f2:	f003 fef5 	bl	80043e0 <HAL_UART_Transmit>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200002ac 	.word	0x200002ac

08000604 <LP5036_Init>:

void LP5036_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af02      	add	r7, sp, #8
	uint8_t data[2];
	data[0] = DEVICE_CONFIG0;
 800060a:	2300      	movs	r3, #0
 800060c:	713b      	strb	r3, [r7, #4]
	data[1] = 0x40;
 800060e:	2340      	movs	r3, #64	@ 0x40
 8000610:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c1, LP5036_I2C_ADDR, data, 2, HAL_MAX_DELAY);
 8000612:	1d3a      	adds	r2, r7, #4
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2302      	movs	r3, #2
 800061c:	2160      	movs	r1, #96	@ 0x60
 800061e:	4819      	ldr	r0, [pc, #100]	@ (8000684 <LP5036_Init+0x80>)
 8000620:	f001 facc 	bl	8001bbc <HAL_I2C_Master_Transmit>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <LP5036_Init+0x84>)
 800062a:	701a      	strb	r2, [r3, #0]
	if(ret!=HAL_OK){
 800062c:	4b16      	ldr	r3, [pc, #88]	@ (8000688 <LP5036_Init+0x84>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d003      	beq.n	800063c <LP5036_Init+0x38>
		printf("I2C Communication Failed\n");
 8000634:	4815      	ldr	r0, [pc, #84]	@ (800068c <LP5036_Init+0x88>)
 8000636:	f006 f9cf 	bl	80069d8 <puts>
 800063a:	e002      	b.n	8000642 <LP5036_Init+0x3e>
	}else{
		printf("I2C Communication Succeeded\n");
 800063c:	4814      	ldr	r0, [pc, #80]	@ (8000690 <LP5036_Init+0x8c>)
 800063e:	f006 f9cb 	bl	80069d8 <puts>
	}

	data[0] = DEVICE_CONFIG1;
 8000642:	2301      	movs	r3, #1
 8000644:	713b      	strb	r3, [r7, #4]
	data[1] = 0x3C;
 8000646:	233c      	movs	r3, #60	@ 0x3c
 8000648:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c1, LP5036_I2C_ADDR, data, 2, HAL_MAX_DELAY);
 800064a:	1d3a      	adds	r2, r7, #4
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2302      	movs	r3, #2
 8000654:	2160      	movs	r1, #96	@ 0x60
 8000656:	480b      	ldr	r0, [pc, #44]	@ (8000684 <LP5036_Init+0x80>)
 8000658:	f001 fab0 	bl	8001bbc <HAL_I2C_Master_Transmit>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <LP5036_Init+0x84>)
 8000662:	701a      	strb	r2, [r3, #0]
	if(ret!=HAL_OK){
 8000664:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <LP5036_Init+0x84>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d003      	beq.n	8000674 <LP5036_Init+0x70>
		printf("I2C Communication Failed\n");
 800066c:	4807      	ldr	r0, [pc, #28]	@ (800068c <LP5036_Init+0x88>)
 800066e:	f006 f9b3 	bl	80069d8 <puts>
	}else{
		printf("I2C Communication Succeeded\n");
	}
}
 8000672:	e002      	b.n	800067a <LP5036_Init+0x76>
		printf("I2C Communication Succeeded\n");
 8000674:	4806      	ldr	r0, [pc, #24]	@ (8000690 <LP5036_Init+0x8c>)
 8000676:	f006 f9af 	bl	80069d8 <puts>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200001f4 	.word	0x200001f4
 8000688:	20000334 	.word	0x20000334
 800068c:	08008960 	.word	0x08008960
 8000690:	0800897c 	.word	0x0800897c

08000694 <LP5036_SetBrightness>:

void LP5036_SetBrightness(uint8_t channel, uint8_t brightness){
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af02      	add	r7, sp, #8
 800069a:	4603      	mov	r3, r0
 800069c:	460a      	mov	r2, r1
 800069e:	71fb      	strb	r3, [r7, #7]
 80006a0:	4613      	mov	r3, r2
 80006a2:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];

	data[0] = LED0_BRIGHTNESS + 12 + channel;
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	3314      	adds	r3, #20
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	733b      	strb	r3, [r7, #12]
	data[1] = brightness; // 0x00~0xFFの??��?��?囲で設??��?��?
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, LP5036_I2C_ADDR, data, 2, HAL_MAX_DELAY);
 80006b0:	f107 020c 	add.w	r2, r7, #12
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2302      	movs	r3, #2
 80006bc:	2160      	movs	r1, #96	@ 0x60
 80006be:	4803      	ldr	r0, [pc, #12]	@ (80006cc <LP5036_SetBrightness+0x38>)
 80006c0:	f001 fa7c 	bl	8001bbc <HAL_I2C_Master_Transmit>
}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200001f4 	.word	0x200001f4

080006d0 <LCD_Reset>:

void LCD_Reset(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2102      	movs	r1, #2
 80006d8:	4807      	ldr	r0, [pc, #28]	@ (80006f8 <LCD_Reset+0x28>)
 80006da:	f001 f9b9 	bl	8001a50 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006de:	2064      	movs	r0, #100	@ 0x64
 80006e0:	f000 fdb8 	bl	8001254 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2102      	movs	r1, #2
 80006e8:	4803      	ldr	r0, [pc, #12]	@ (80006f8 <LCD_Reset+0x28>)
 80006ea:	f001 f9b1 	bl	8001a50 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006ee:	2064      	movs	r0, #100	@ 0x64
 80006f0:	f000 fdb0 	bl	8001254 <HAL_Delay>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000

080006fc <LCD_Write_Command>:

void LCD_Write_Command(uint8_t cmd)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2108      	movs	r1, #8
 800070a:	480c      	ldr	r0, [pc, #48]	@ (800073c <LCD_Write_Command+0x40>)
 800070c:	f001 f9a0 	bl	8001a50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2110      	movs	r1, #16
 8000714:	4809      	ldr	r0, [pc, #36]	@ (800073c <LCD_Write_Command+0x40>)
 8000716:	f001 f99b 	bl	8001a50 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi4, &cmd, 1, HAL_MAX_DELAY);
 800071a:	1df9      	adds	r1, r7, #7
 800071c:	f04f 33ff 	mov.w	r3, #4294967295
 8000720:	2201      	movs	r2, #1
 8000722:	4807      	ldr	r0, [pc, #28]	@ (8000740 <LCD_Write_Command+0x44>)
 8000724:	f003 f83d 	bl	80037a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	2110      	movs	r1, #16
 800072c:	4803      	ldr	r0, [pc, #12]	@ (800073c <LCD_Write_Command+0x40>)
 800072e:	f001 f98f 	bl	8001a50 <HAL_GPIO_WritePin>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000
 8000740:	20000248 	.word	0x20000248

08000744 <LCD_Write_Data>:

void LCD_Write_Data(uint8_t data)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2108      	movs	r1, #8
 8000752:	480c      	ldr	r0, [pc, #48]	@ (8000784 <LCD_Write_Data+0x40>)
 8000754:	f001 f97c 	bl	8001a50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2110      	movs	r1, #16
 800075c:	4809      	ldr	r0, [pc, #36]	@ (8000784 <LCD_Write_Data+0x40>)
 800075e:	f001 f977 	bl	8001a50 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi4, &data, 1, HAL_MAX_DELAY);
 8000762:	1df9      	adds	r1, r7, #7
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	2201      	movs	r2, #1
 800076a:	4807      	ldr	r0, [pc, #28]	@ (8000788 <LCD_Write_Data+0x44>)
 800076c:	f003 f819 	bl	80037a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2110      	movs	r1, #16
 8000774:	4803      	ldr	r0, [pc, #12]	@ (8000784 <LCD_Write_Data+0x40>)
 8000776:	f001 f96b 	bl	8001a50 <HAL_GPIO_WritePin>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000
 8000788:	20000248 	.word	0x20000248

0800078c <LCD_Init>:

void LCD_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	LCD_Reset();
 8000790:	f7ff ff9e 	bl	80006d0 <LCD_Reset>

	LCD_Write_Command(0x01);
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff ffb1 	bl	80006fc <LCD_Write_Command>
	HAL_Delay(50);
 800079a:	2032      	movs	r0, #50	@ 0x32
 800079c:	f000 fd5a 	bl	8001254 <HAL_Delay>

	LCD_Write_Command(0x11);
 80007a0:	2011      	movs	r0, #17
 80007a2:	f7ff ffab 	bl	80006fc <LCD_Write_Command>
	HAL_Delay(120);
 80007a6:	2078      	movs	r0, #120	@ 0x78
 80007a8:	f000 fd54 	bl	8001254 <HAL_Delay>

	LCD_Write_Command(0x3A);
 80007ac:	203a      	movs	r0, #58	@ 0x3a
 80007ae:	f7ff ffa5 	bl	80006fc <LCD_Write_Command>
	LCD_Write_Data(0x05);
 80007b2:	2005      	movs	r0, #5
 80007b4:	f7ff ffc6 	bl	8000744 <LCD_Write_Data>

	LCD_Write_Command(0x29);
 80007b8:	2029      	movs	r0, #41	@ 0x29
 80007ba:	f7ff ff9f 	bl	80006fc <LCD_Write_Command>
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <LCD_Fill_Screen>:

void LCD_Fill_Screen(uint16_t color) {
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b084      	sub	sp, #16
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	80fb      	strh	r3, [r7, #6]
    uint8_t color_high = color >> 8;
 80007cc:	88fb      	ldrh	r3, [r7, #6]
 80007ce:	0a1b      	lsrs	r3, r3, #8
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	737b      	strb	r3, [r7, #13]
    uint8_t color_low = color & 0xFF;
 80007d4:	88fb      	ldrh	r3, [r7, #6]
 80007d6:	733b      	strb	r3, [r7, #12]

    LCD_Write_Command(0x2A); // カラムアドレス設定
 80007d8:	202a      	movs	r0, #42	@ 0x2a
 80007da:	f7ff ff8f 	bl	80006fc <LCD_Write_Command>
    LCD_Write_Data(0x00);
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff ffb0 	bl	8000744 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff ffad 	bl	8000744 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff ffaa 	bl	8000744 <LCD_Write_Data>
    LCD_Write_Data(0x7F);
 80007f0:	207f      	movs	r0, #127	@ 0x7f
 80007f2:	f7ff ffa7 	bl	8000744 <LCD_Write_Data>

    LCD_Write_Command(0x2B); // ページアドレス設定
 80007f6:	202b      	movs	r0, #43	@ 0x2b
 80007f8:	f7ff ff80 	bl	80006fc <LCD_Write_Command>
    LCD_Write_Data(0x00);
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff ffa1 	bl	8000744 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8000802:	2000      	movs	r0, #0
 8000804:	f7ff ff9e 	bl	8000744 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff ff9b 	bl	8000744 <LCD_Write_Data>
    LCD_Write_Data(0x9F);
 800080e:	209f      	movs	r0, #159	@ 0x9f
 8000810:	f7ff ff98 	bl	8000744 <LCD_Write_Data>

    LCD_Write_Command(0x2C); // メモリ書き込み
 8000814:	202c      	movs	r0, #44	@ 0x2c
 8000816:	f7ff ff71 	bl	80006fc <LCD_Write_Command>

    for (uint16_t i = 0; i < 128 * 160; i++) {
 800081a:	2300      	movs	r3, #0
 800081c:	81fb      	strh	r3, [r7, #14]
 800081e:	e00a      	b.n	8000836 <LCD_Fill_Screen+0x74>
        LCD_Write_Data(color_high);
 8000820:	7b7b      	ldrb	r3, [r7, #13]
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff8e 	bl	8000744 <LCD_Write_Data>
        LCD_Write_Data(color_low);
 8000828:	7b3b      	ldrb	r3, [r7, #12]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff8a 	bl	8000744 <LCD_Write_Data>
    for (uint16_t i = 0; i < 128 * 160; i++) {
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	3301      	adds	r3, #1
 8000834:	81fb      	strh	r3, [r7, #14]
 8000836:	89fb      	ldrh	r3, [r7, #14]
 8000838:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800083c:	d3f0      	bcc.n	8000820 <LCD_Fill_Screen+0x5e>
    }
}
 800083e:	bf00      	nop
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800084e:	f000 f9bf 	bl	8000bd0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000852:	f000 fcd2 	bl	80011fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000856:	f000 f83d 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085a:	f000 f957 	bl	8000b0c <MX_GPIO_Init>
  MX_UART5_Init();
 800085e:	f000 f925 	bl	8000aac <MX_UART5_Init>
  MX_I2C1_Init();
 8000862:	f000 f8a5 	bl	80009b0 <MX_I2C1_Init>
  MX_SPI4_Init();
 8000866:	f000 f8e3 	bl	8000a30 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  LP5036_Init();
 800086a:	f7ff fecb 	bl	8000604 <LP5036_Init>
  LCD_Init();
 800086e:	f7ff ff8d 	bl	800078c <LCD_Init>

  LCD_Fill_Screen(0xF800);
 8000872:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000876:	f7ff ffa4 	bl	80007c2 <LCD_Fill_Screen>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setbuf(stdout, NULL);
 800087a:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <main+0x88>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f006 f8b0 	bl	80069e8 <setbuf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //printf("Hello World! %f\n\r", i);
	  for(int j=0;j<33;j++){
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	e01b      	b.n	80008c6 <main+0x7e>
		  LP5036_SetBrightness(j,100);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2164      	movs	r1, #100	@ 0x64
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fefd 	bl	8000694 <LP5036_SetBrightness>
		  if(j==0){
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d104      	bne.n	80008aa <main+0x62>
			  LP5036_SetBrightness(32,0);
 80008a0:	2100      	movs	r1, #0
 80008a2:	2020      	movs	r0, #32
 80008a4:	f7ff fef6 	bl	8000694 <LP5036_SetBrightness>
 80008a8:	e007      	b.n	80008ba <main+0x72>
		  }else{
			  LP5036_SetBrightness(j-1,0);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	3b01      	subs	r3, #1
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff feed 	bl	8000694 <LP5036_SetBrightness>
		  }
		  HAL_Delay(100);
 80008ba:	2064      	movs	r0, #100	@ 0x64
 80008bc:	f000 fcca 	bl	8001254 <HAL_Delay>
	  for(int j=0;j<33;j++){
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3301      	adds	r3, #1
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b20      	cmp	r3, #32
 80008ca:	dde0      	ble.n	800088e <main+0x46>
 80008cc:	e7dc      	b.n	8000888 <main+0x40>
 80008ce:	bf00      	nop
 80008d0:	2000001c 	.word	0x2000001c

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	@ 0x50
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	2234      	movs	r2, #52	@ 0x34
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f006 fa14 	bl	8006d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f8:	4b2b      	ldr	r3, [pc, #172]	@ (80009a8 <SystemClock_Config+0xd4>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	4a2a      	ldr	r2, [pc, #168]	@ (80009a8 <SystemClock_Config+0xd4>)
 80008fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000902:	6413      	str	r3, [r2, #64]	@ 0x40
 8000904:	4b28      	ldr	r3, [pc, #160]	@ (80009a8 <SystemClock_Config+0xd4>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000910:	4b26      	ldr	r3, [pc, #152]	@ (80009ac <SystemClock_Config+0xd8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a25      	ldr	r2, [pc, #148]	@ (80009ac <SystemClock_Config+0xd8>)
 8000916:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	4b23      	ldr	r3, [pc, #140]	@ (80009ac <SystemClock_Config+0xd8>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000928:	2301      	movs	r3, #1
 800092a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800092c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000930:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000932:	2302      	movs	r3, #2
 8000934:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000936:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800093a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800093c:	2304      	movs	r3, #4
 800093e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000940:	23d8      	movs	r3, #216	@ 0xd8
 8000942:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000944:	2302      	movs	r3, #2
 8000946:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800094c:	2302      	movs	r3, #2
 800094e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fd4b 	bl	80023f0 <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000960:	f000 f974 	bl	8000c4c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000964:	f001 fcf4 	bl	8002350 <HAL_PWREx_EnableOverDrive>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800096e:	f000 f96d 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000972:	230f      	movs	r3, #15
 8000974:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000976:	2302      	movs	r3, #2
 8000978:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800097e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000982:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000984:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000988:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	2107      	movs	r1, #7
 8000990:	4618      	mov	r0, r3
 8000992:	f001 ffdb 	bl	800294c <HAL_RCC_ClockConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800099c:	f000 f956 	bl	8000c4c <Error_Handler>
  }
}
 80009a0:	bf00      	nop
 80009a2:	3750      	adds	r7, #80	@ 0x50
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40007000 	.word	0x40007000

080009b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a28 <MX_I2C1_Init+0x78>)
 80009b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009bc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a2c <MX_I2C1_Init+0x7c>)
 80009be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009c0:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c6:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009cc:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009d2:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d8:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009de:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ea:	480e      	ldr	r0, [pc, #56]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009ec:	f001 f84a 	bl	8001a84 <HAL_I2C_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009f6:	f000 f929 	bl	8000c4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	4809      	ldr	r0, [pc, #36]	@ (8000a24 <MX_I2C1_Init+0x74>)
 80009fe:	f001 fc0f 	bl	8002220 <HAL_I2CEx_ConfigAnalogFilter>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f000 f920 	bl	8000c4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_I2C1_Init+0x74>)
 8000a10:	f001 fc51 	bl	80022b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a1a:	f000 f917 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200001f4 	.word	0x200001f4
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	20404768 	.word	0x20404768

08000a30 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa4 <MX_SPI4_Init+0x74>)
 8000a36:	4a1c      	ldr	r2, [pc, #112]	@ (8000aa8 <MX_SPI4_Init+0x78>)
 8000a38:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <MX_SPI4_Init+0x74>)
 8000a3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a40:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000a42:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <MX_SPI4_Init+0x74>)
 8000a44:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a48:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	@ (8000aa4 <MX_SPI4_Init+0x74>)
 8000a4c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a50:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a52:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <MX_SPI4_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <MX_SPI4_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <MX_SPI4_Init+0x74>)
 8000a60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a64:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a66:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <MX_SPI4_Init+0x74>)
 8000a68:	2218      	movs	r2, #24
 8000a6a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <MX_SPI4_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a72:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <MX_SPI4_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <MX_SPI4_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MX_SPI4_Init+0x74>)
 8000a80:	2207      	movs	r2, #7
 8000a82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a84:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <MX_SPI4_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <MX_SPI4_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <MX_SPI4_Init+0x74>)
 8000a92:	f002 fddb 	bl	800364c <HAL_SPI_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_SPI4_Init+0x70>
  {
    Error_Handler();
 8000a9c:	f000 f8d6 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000248 	.word	0x20000248
 8000aa8:	40013400 	.word	0x40013400

08000aac <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <MX_UART5_Init+0x58>)
 8000ab2:	4a15      	ldr	r2, [pc, #84]	@ (8000b08 <MX_UART5_Init+0x5c>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <MX_UART5_Init+0x58>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <MX_UART5_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <MX_UART5_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <MX_UART5_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <MX_UART5_Init+0x58>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <MX_UART5_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_UART5_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <MX_UART5_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <MX_UART5_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <MX_UART5_Init+0x58>)
 8000af0:	f003 fc28 	bl	8004344 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000afa:	f000 f8a7 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200002ac 	.word	0x200002ac
 8000b08:	40005000 	.word	0x40005000

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	@ 0x28
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b22:	4b29      	ldr	r3, [pc, #164]	@ (8000bc8 <MX_GPIO_Init+0xbc>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a28      	ldr	r2, [pc, #160]	@ (8000bc8 <MX_GPIO_Init+0xbc>)
 8000b28:	f043 0310 	orr.w	r3, r3, #16
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b26      	ldr	r3, [pc, #152]	@ (8000bc8 <MX_GPIO_Init+0xbc>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0310 	and.w	r3, r3, #16
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3a:	4b23      	ldr	r3, [pc, #140]	@ (8000bc8 <MX_GPIO_Init+0xbc>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a22      	ldr	r2, [pc, #136]	@ (8000bc8 <MX_GPIO_Init+0xbc>)
 8000b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b20      	ldr	r3, [pc, #128]	@ (8000bc8 <MX_GPIO_Init+0xbc>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc8 <MX_GPIO_Init+0xbc>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc8 <MX_GPIO_Init+0xbc>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc8 <MX_GPIO_Init+0xbc>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b17      	ldr	r3, [pc, #92]	@ (8000bc8 <MX_GPIO_Init+0xbc>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a16      	ldr	r2, [pc, #88]	@ (8000bc8 <MX_GPIO_Init+0xbc>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <MX_GPIO_Init+0xbc>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <MX_GPIO_Init+0xbc>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a10      	ldr	r2, [pc, #64]	@ (8000bc8 <MX_GPIO_Init+0xbc>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <MX_GPIO_Init+0xbc>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_1, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	211a      	movs	r1, #26
 8000b9e:	480b      	ldr	r0, [pc, #44]	@ (8000bcc <MX_GPIO_Init+0xc0>)
 8000ba0:	f000 ff56 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_1;
 8000ba4:	231a      	movs	r3, #26
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <MX_GPIO_Init+0xc0>)
 8000bbc:	f000 fd9c 	bl	80016f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc0:	bf00      	nop
 8000bc2:	3728      	adds	r7, #40	@ 0x28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000be2:	f000 fc3d 	bl	8001460 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000be6:	2301      	movs	r3, #1
 8000be8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000bf2:	231f      	movs	r3, #31
 8000bf4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000bf6:	2387      	movs	r3, #135	@ 0x87
 8000bf8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c02:	2301      	movs	r3, #1
 8000c04:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c06:	2301      	movs	r3, #1
 8000c08:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c12:	463b      	mov	r3, r7
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 fc5b 	bl	80014d0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c1a:	2004      	movs	r0, #4
 8000c1c:	f000 fc38 	bl	8001490 <HAL_MPU_Enable>

}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a04      	ldr	r2, [pc, #16]	@ (8000c48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d101      	bne.n	8000c3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c3a:	f000 faeb 	bl	8001214 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40014400 	.word	0x40014400

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <Error_Handler+0x8>

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	4a10      	ldr	r2, [pc, #64]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c82:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	210f      	movs	r1, #15
 8000c92:	f06f 0001 	mvn.w	r0, #1
 8000c96:	f000 fbb9 	bl	800140c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b0ae      	sub	sp, #184	@ 0xb8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2290      	movs	r2, #144	@ 0x90
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f006 f821 	bl	8006d10 <memset>
  if(hi2c->Instance==I2C1)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a21      	ldr	r2, [pc, #132]	@ (8000d58 <HAL_I2C_MspInit+0xb0>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d13b      	bne.n	8000d50 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cd8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cdc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f002 f888 	bl	8002dfc <HAL_RCCEx_PeriphCLKConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cf2:	f7ff ffab 	bl	8000c4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <HAL_I2C_MspInit+0xb4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a18      	ldr	r2, [pc, #96]	@ (8000d5c <HAL_I2C_MspInit+0xb4>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <HAL_I2C_MspInit+0xb4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d0e:	23c0      	movs	r3, #192	@ 0xc0
 8000d10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d14:	2312      	movs	r3, #18
 8000d16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d26:	2304      	movs	r3, #4
 8000d28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d30:	4619      	mov	r1, r3
 8000d32:	480b      	ldr	r0, [pc, #44]	@ (8000d60 <HAL_I2C_MspInit+0xb8>)
 8000d34:	f000 fce0 	bl	80016f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <HAL_I2C_MspInit+0xb4>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3c:	4a07      	ldr	r2, [pc, #28]	@ (8000d5c <HAL_I2C_MspInit+0xb4>)
 8000d3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <HAL_I2C_MspInit+0xb4>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d50:	bf00      	nop
 8000d52:	37b8      	adds	r7, #184	@ 0xb8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020400 	.word	0x40020400

08000d64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	@ 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a17      	ldr	r2, [pc, #92]	@ (8000de0 <HAL_SPI_MspInit+0x7c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d127      	bne.n	8000dd6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000d86:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <HAL_SPI_MspInit+0x80>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	4a16      	ldr	r2, [pc, #88]	@ (8000de4 <HAL_SPI_MspInit+0x80>)
 8000d8c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <HAL_SPI_MspInit+0x80>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <HAL_SPI_MspInit+0x80>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a10      	ldr	r2, [pc, #64]	@ (8000de4 <HAL_SPI_MspInit+0x80>)
 8000da4:	f043 0310 	orr.w	r3, r3, #16
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <HAL_SPI_MspInit+0x80>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	f003 0310 	and.w	r3, r3, #16
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000db6:	2344      	movs	r3, #68	@ 0x44
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	@ (8000de8 <HAL_SPI_MspInit+0x84>)
 8000dd2:	f000 fc91 	bl	80016f8 <HAL_GPIO_Init>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	@ 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40013400 	.word	0x40013400
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0ae      	sub	sp, #184	@ 0xb8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2290      	movs	r2, #144	@ 0x90
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f005 ff7f 	bl	8006d10 <memset>
  if(huart->Instance==UART5)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a22      	ldr	r2, [pc, #136]	@ (8000ea0 <HAL_UART_MspInit+0xb4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d13c      	bne.n	8000e96 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000e1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 ffe6 	bl	8002dfc <HAL_RCCEx_PeriphCLKConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e36:	f7ff ff09 	bl	8000c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <HAL_UART_MspInit+0xb8>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	4a19      	ldr	r2, [pc, #100]	@ (8000ea4 <HAL_UART_MspInit+0xb8>)
 8000e40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e46:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <HAL_UART_MspInit+0xb8>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <HAL_UART_MspInit+0xb8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a13      	ldr	r2, [pc, #76]	@ (8000ea4 <HAL_UART_MspInit+0xb8>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <HAL_UART_MspInit+0xb8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PB8     ------> UART5_RX
    PB9     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8000e84:	2307      	movs	r3, #7
 8000e86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	@ (8000ea8 <HAL_UART_MspInit+0xbc>)
 8000e92:	f000 fc31 	bl	80016f8 <HAL_GPIO_Init>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 8000e96:	bf00      	nop
 8000e98:	37b8      	adds	r7, #184	@ 0xb8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40005000 	.word	0x40005000
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400

08000eac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	@ 0x30
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f7c <HAL_InitTick+0xd0>)
 8000ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec0:	4a2e      	ldr	r2, [pc, #184]	@ (8000f7c <HAL_InitTick+0xd0>)
 8000ec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f7c <HAL_InitTick+0xd0>)
 8000eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ed4:	f107 020c 	add.w	r2, r7, #12
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 ff5a 	bl	8002d98 <HAL_RCC_GetClockConfig>
  /* Compute TIM10 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ee4:	f001 ff44 	bl	8002d70 <HAL_RCC_GetPCLK2Freq>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ef0:	4a23      	ldr	r2, [pc, #140]	@ (8000f80 <HAL_InitTick+0xd4>)
 8000ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef6:	0c9b      	lsrs	r3, r3, #18
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000efc:	4b21      	ldr	r3, [pc, #132]	@ (8000f84 <HAL_InitTick+0xd8>)
 8000efe:	4a22      	ldr	r2, [pc, #136]	@ (8000f88 <HAL_InitTick+0xdc>)
 8000f00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000f02:	4b20      	ldr	r3, [pc, #128]	@ (8000f84 <HAL_InitTick+0xd8>)
 8000f04:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f08:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000f84 <HAL_InitTick+0xd8>)
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000f10:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <HAL_InitTick+0xd8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <HAL_InitTick+0xd8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <HAL_InitTick+0xd8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000f22:	4818      	ldr	r0, [pc, #96]	@ (8000f84 <HAL_InitTick+0xd8>)
 8000f24:	f002 ff3a 	bl	8003d9c <HAL_TIM_Base_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d11b      	bne.n	8000f6e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000f36:	4813      	ldr	r0, [pc, #76]	@ (8000f84 <HAL_InitTick+0xd8>)
 8000f38:	f002 ff92 	bl	8003e60 <HAL_TIM_Base_Start_IT>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d111      	bne.n	8000f6e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f4a:	2019      	movs	r0, #25
 8000f4c:	f000 fa7a 	bl	8001444 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b0f      	cmp	r3, #15
 8000f54:	d808      	bhi.n	8000f68 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000f56:	2200      	movs	r2, #0
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	2019      	movs	r0, #25
 8000f5c:	f000 fa56 	bl	800140c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f60:	4a0a      	ldr	r2, [pc, #40]	@ (8000f8c <HAL_InitTick+0xe0>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e002      	b.n	8000f6e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3730      	adds	r7, #48	@ 0x30
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	431bde83 	.word	0x431bde83
 8000f84:	20000338 	.word	0x20000338
 8000f88:	40014400 	.word	0x40014400
 8000f8c:	20000004 	.word	0x20000004

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <NMI_Handler+0x4>

08000f98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000fcc:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fce:	f002 ffbf 	bl	8003f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000338 	.word	0x20000338

08000fdc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000fe0:	4802      	ldr	r0, [pc, #8]	@ (8000fec <ETH_IRQHandler+0x10>)
 8000fe2:	f000 fab5 	bl	8001550 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000394 	.word	0x20000394

08000ff0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return 1;
 8000ff4:	2301      	movs	r3, #1
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <_kill>:

int _kill(int pid, int sig)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800100a:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <_kill+0x20>)
 800100c:	2216      	movs	r2, #22
 800100e:	601a      	str	r2, [r3, #0]
  return -1;
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	20000530 	.word	0x20000530

08001024 <_exit>:

void _exit (int status)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ffe5 	bl	8001000 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001036:	bf00      	nop
 8001038:	e7fd      	b.n	8001036 <_exit+0x12>

0800103a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	e00a      	b.n	8001062 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800104c:	f3af 8000 	nop.w
 8001050:	4601      	mov	r1, r0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	60ba      	str	r2, [r7, #8]
 8001058:	b2ca      	uxtb	r2, r1
 800105a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3301      	adds	r3, #1
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	429a      	cmp	r2, r3
 8001068:	dbf0      	blt.n	800104c <_read+0x12>
  }

  return len;
 800106a:	687b      	ldr	r3, [r7, #4]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e009      	b.n	800109a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	60ba      	str	r2, [r7, #8]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff faa6 	bl	80005e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3301      	adds	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	429a      	cmp	r2, r3
 80010a0:	dbf1      	blt.n	8001086 <_write+0x12>
  }
  return len;
 80010a2:	687b      	ldr	r3, [r7, #4]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <_close>:

int _close(int file)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010d4:	605a      	str	r2, [r3, #4]
  return 0;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <_isatty>:

int _isatty(int file)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ec:	2301      	movs	r3, #1
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b085      	sub	sp, #20
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800111c:	4a14      	ldr	r2, [pc, #80]	@ (8001170 <_sbrk+0x5c>)
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <_sbrk+0x60>)
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001128:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001130:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <_sbrk+0x64>)
 8001132:	4a12      	ldr	r2, [pc, #72]	@ (800117c <_sbrk+0x68>)
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001136:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d205      	bcs.n	8001150 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001144:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <_sbrk+0x6c>)
 8001146:	220c      	movs	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	e009      	b.n	8001164 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001156:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	4a06      	ldr	r2, [pc, #24]	@ (8001178 <_sbrk+0x64>)
 8001160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	4618      	mov	r0, r3
 8001166:	371c      	adds	r7, #28
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	20080000 	.word	0x20080000
 8001174:	00000400 	.word	0x00000400
 8001178:	20000384 	.word	0x20000384
 800117c:	20000680 	.word	0x20000680
 8001180:	20000530 	.word	0x20000530

08001184 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <SystemInit+0x20>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800118e:	4a05      	ldr	r2, [pc, #20]	@ (80011a4 <SystemInit+0x20>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ac:	f7ff ffea 	bl	8001184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b0:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011b2:	490d      	ldr	r1, [pc, #52]	@ (80011e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b4:	4a0d      	ldr	r2, [pc, #52]	@ (80011ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c8:	4c0a      	ldr	r4, [pc, #40]	@ (80011f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011d6:	f005 fded 	bl	8006db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011da:	f7ff fb35 	bl	8000848 <main>
  bx  lr    
 80011de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011e0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80011ec:	08008d34 	.word	0x08008d34
  ldr r2, =_sbss
 80011f0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80011f4:	2000067c 	.word	0x2000067c

080011f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC_IRQHandler>

080011fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fe:	2003      	movs	r0, #3
 8001200:	f000 f8f9 	bl	80013f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001204:	200f      	movs	r0, #15
 8001206:	f7ff fe51 	bl	8000eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800120a:	f7ff fd25 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_IncTick+0x20>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <HAL_IncTick+0x24>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a04      	ldr	r2, [pc, #16]	@ (8001238 <HAL_IncTick+0x24>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000008 	.word	0x20000008
 8001238:	20000388 	.word	0x20000388

0800123c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return uwTick;
 8001240:	4b03      	ldr	r3, [pc, #12]	@ (8001250 <HAL_GetTick+0x14>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000388 	.word	0x20000388

08001254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800125c:	f7ff ffee 	bl	800123c <HAL_GetTick>
 8001260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126c:	d005      	beq.n	800127a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126e:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <HAL_Delay+0x44>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800127a:	bf00      	nop
 800127c:	f7ff ffde 	bl	800123c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	429a      	cmp	r2, r3
 800128a:	d8f7      	bhi.n	800127c <HAL_Delay+0x28>
  {
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000008 	.word	0x20000008

0800129c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ac:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <__NVIC_SetPriorityGrouping+0x40>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ca:	4a04      	ldr	r2, [pc, #16]	@ (80012dc <__NVIC_SetPriorityGrouping+0x40>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	60d3      	str	r3, [r2, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00
 80012e0:	05fa0000 	.word	0x05fa0000

080012e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db0b      	blt.n	800132a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	4907      	ldr	r1, [pc, #28]	@ (8001338 <__NVIC_EnableIRQ+0x38>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000e100 	.word	0xe000e100

0800133c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	@ (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	@ (800138c <__NVIC_SetPriority+0x50>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	@ 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
         );
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	@ 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ff4c 	bl	800129c <__NVIC_SetPriorityGrouping>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800141e:	f7ff ff61 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 8001422:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	68b9      	ldr	r1, [r7, #8]
 8001428:	6978      	ldr	r0, [r7, #20]
 800142a:	f7ff ffb1 	bl	8001390 <NVIC_EncodePriority>
 800142e:	4602      	mov	r2, r0
 8001430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff80 	bl	800133c <__NVIC_SetPriority>
}
 800143c:	bf00      	nop
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff54 	bl	8001300 <__NVIC_EnableIRQ>
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001464:	f3bf 8f5f 	dmb	sy
}
 8001468:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800146a:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <HAL_MPU_Disable+0x28>)
 800146c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146e:	4a06      	ldr	r2, [pc, #24]	@ (8001488 <HAL_MPU_Disable+0x28>)
 8001470:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001474:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001476:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_MPU_Disable+0x2c>)
 8001478:	2200      	movs	r2, #0
 800147a:	605a      	str	r2, [r3, #4]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000ed00 	.word	0xe000ed00
 800148c:	e000ed90 	.word	0xe000ed90

08001490 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001498:	4a0b      	ldr	r2, [pc, #44]	@ (80014c8 <HAL_MPU_Enable+0x38>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80014a2:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <HAL_MPU_Enable+0x3c>)
 80014a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a6:	4a09      	ldr	r2, [pc, #36]	@ (80014cc <HAL_MPU_Enable+0x3c>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80014ae:	f3bf 8f4f 	dsb	sy
}
 80014b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014b4:	f3bf 8f6f 	isb	sy
}
 80014b8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed90 	.word	0xe000ed90
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	785a      	ldrb	r2, [r3, #1]
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <HAL_MPU_ConfigRegion+0x7c>)
 80014de:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80014e0:	4b1a      	ldr	r3, [pc, #104]	@ (800154c <HAL_MPU_ConfigRegion+0x7c>)
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	4a19      	ldr	r2, [pc, #100]	@ (800154c <HAL_MPU_ConfigRegion+0x7c>)
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80014ec:	4a17      	ldr	r2, [pc, #92]	@ (800154c <HAL_MPU_ConfigRegion+0x7c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	7b1b      	ldrb	r3, [r3, #12]
 80014f8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7adb      	ldrb	r3, [r3, #11]
 80014fe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001500:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7a9b      	ldrb	r3, [r3, #10]
 8001506:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001508:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7b5b      	ldrb	r3, [r3, #13]
 800150e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001510:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7b9b      	ldrb	r3, [r3, #14]
 8001516:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001518:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7bdb      	ldrb	r3, [r3, #15]
 800151e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001520:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7a5b      	ldrb	r3, [r3, #9]
 8001526:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001528:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7a1b      	ldrb	r3, [r3, #8]
 800152e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001530:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	7812      	ldrb	r2, [r2, #0]
 8001536:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001538:	4a04      	ldr	r2, [pc, #16]	@ (800154c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800153a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800153c:	6113      	str	r3, [r2, #16]
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed90 	.word	0xe000ed90

08001550 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800155e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001578:	4b4b      	ldr	r3, [pc, #300]	@ (80016a8 <HAL_ETH_IRQHandler+0x158>)
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00e      	beq.n	80015a6 <HAL_ETH_IRQHandler+0x56>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800158e:	2b00      	cmp	r3, #0
 8001590:	d009      	beq.n	80015a6 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800159a:	461a      	mov	r2, r3
 800159c:	4b43      	ldr	r3, [pc, #268]	@ (80016ac <HAL_ETH_IRQHandler+0x15c>)
 800159e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f003 fc27 	bl	8004df4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00f      	beq.n	80015d0 <HAL_ETH_IRQHandler+0x80>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00a      	beq.n	80015d0 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015c2:	461a      	mov	r2, r3
 80015c4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80015c8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f003 fc22 	bl	8004e14 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d042      	beq.n	8001660 <HAL_ETH_IRQHandler+0x110>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d03d      	beq.n	8001660 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ea:	f043 0208 	orr.w	r2, r3, #8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d01a      	beq.n	8001634 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	4b29      	ldr	r3, [pc, #164]	@ (80016b0 <HAL_ETH_IRQHandler+0x160>)
 800160a:	4013      	ands	r3, r2
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001624:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001628:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	22e0      	movs	r2, #224	@ 0xe0
 800162e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001632:	e012      	b.n	800165a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001642:	4013      	ands	r3, r2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001652:	461a      	mov	r2, r3
 8001654:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001658:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f003 fbea 	bl	8004e34 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00e      	beq.n	8001688 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001670:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f81a 	bl	80016b4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d006      	beq.n	80016a0 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001692:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <HAL_ETH_IRQHandler+0x158>)
 8001694:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001698:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f814 	bl	80016c8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80016a0:	bf00      	nop
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40013c00 	.word	0x40013c00
 80016ac:	00010040 	.word	0x00010040
 80016b0:	007e2000 	.word	0x007e2000

080016b4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	@ 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	e175      	b.n	8001a04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001718:	2201      	movs	r2, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	429a      	cmp	r2, r3
 8001732:	f040 8164 	bne.w	80019fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	2b01      	cmp	r3, #1
 8001740:	d005      	beq.n	800174e <HAL_GPIO_Init+0x56>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d130      	bne.n	80017b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001784:	2201      	movs	r2, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 0201 	and.w	r2, r3, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d017      	beq.n	80017ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d123      	bne.n	8001840 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	08da      	lsrs	r2, r3, #3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3208      	adds	r2, #8
 8001800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	220f      	movs	r2, #15
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	08da      	lsrs	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3208      	adds	r2, #8
 800183a:	69b9      	ldr	r1, [r7, #24]
 800183c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0203 	and.w	r2, r3, #3
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 80be 	beq.w	80019fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	4b66      	ldr	r3, [pc, #408]	@ (8001a1c <HAL_GPIO_Init+0x324>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001886:	4a65      	ldr	r2, [pc, #404]	@ (8001a1c <HAL_GPIO_Init+0x324>)
 8001888:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800188c:	6453      	str	r3, [r2, #68]	@ 0x44
 800188e:	4b63      	ldr	r3, [pc, #396]	@ (8001a1c <HAL_GPIO_Init+0x324>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800189a:	4a61      	ldr	r2, [pc, #388]	@ (8001a20 <HAL_GPIO_Init+0x328>)
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	3302      	adds	r3, #2
 80018a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	220f      	movs	r2, #15
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a58      	ldr	r2, [pc, #352]	@ (8001a24 <HAL_GPIO_Init+0x32c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d037      	beq.n	8001936 <HAL_GPIO_Init+0x23e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a57      	ldr	r2, [pc, #348]	@ (8001a28 <HAL_GPIO_Init+0x330>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d031      	beq.n	8001932 <HAL_GPIO_Init+0x23a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a56      	ldr	r2, [pc, #344]	@ (8001a2c <HAL_GPIO_Init+0x334>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d02b      	beq.n	800192e <HAL_GPIO_Init+0x236>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a55      	ldr	r2, [pc, #340]	@ (8001a30 <HAL_GPIO_Init+0x338>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d025      	beq.n	800192a <HAL_GPIO_Init+0x232>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a54      	ldr	r2, [pc, #336]	@ (8001a34 <HAL_GPIO_Init+0x33c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d01f      	beq.n	8001926 <HAL_GPIO_Init+0x22e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a53      	ldr	r2, [pc, #332]	@ (8001a38 <HAL_GPIO_Init+0x340>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d019      	beq.n	8001922 <HAL_GPIO_Init+0x22a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a52      	ldr	r2, [pc, #328]	@ (8001a3c <HAL_GPIO_Init+0x344>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_GPIO_Init+0x226>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a51      	ldr	r2, [pc, #324]	@ (8001a40 <HAL_GPIO_Init+0x348>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00d      	beq.n	800191a <HAL_GPIO_Init+0x222>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a50      	ldr	r2, [pc, #320]	@ (8001a44 <HAL_GPIO_Init+0x34c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d007      	beq.n	8001916 <HAL_GPIO_Init+0x21e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4f      	ldr	r2, [pc, #316]	@ (8001a48 <HAL_GPIO_Init+0x350>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_GPIO_Init+0x21a>
 800190e:	2309      	movs	r3, #9
 8001910:	e012      	b.n	8001938 <HAL_GPIO_Init+0x240>
 8001912:	230a      	movs	r3, #10
 8001914:	e010      	b.n	8001938 <HAL_GPIO_Init+0x240>
 8001916:	2308      	movs	r3, #8
 8001918:	e00e      	b.n	8001938 <HAL_GPIO_Init+0x240>
 800191a:	2307      	movs	r3, #7
 800191c:	e00c      	b.n	8001938 <HAL_GPIO_Init+0x240>
 800191e:	2306      	movs	r3, #6
 8001920:	e00a      	b.n	8001938 <HAL_GPIO_Init+0x240>
 8001922:	2305      	movs	r3, #5
 8001924:	e008      	b.n	8001938 <HAL_GPIO_Init+0x240>
 8001926:	2304      	movs	r3, #4
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x240>
 800192a:	2303      	movs	r3, #3
 800192c:	e004      	b.n	8001938 <HAL_GPIO_Init+0x240>
 800192e:	2302      	movs	r3, #2
 8001930:	e002      	b.n	8001938 <HAL_GPIO_Init+0x240>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_GPIO_Init+0x240>
 8001936:	2300      	movs	r3, #0
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	f002 0203 	and.w	r2, r2, #3
 800193e:	0092      	lsls	r2, r2, #2
 8001940:	4093      	lsls	r3, r2
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001948:	4935      	ldr	r1, [pc, #212]	@ (8001a20 <HAL_GPIO_Init+0x328>)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3302      	adds	r3, #2
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001956:	4b3d      	ldr	r3, [pc, #244]	@ (8001a4c <HAL_GPIO_Init+0x354>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800197a:	4a34      	ldr	r2, [pc, #208]	@ (8001a4c <HAL_GPIO_Init+0x354>)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001980:	4b32      	ldr	r3, [pc, #200]	@ (8001a4c <HAL_GPIO_Init+0x354>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a4:	4a29      	ldr	r2, [pc, #164]	@ (8001a4c <HAL_GPIO_Init+0x354>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019aa:	4b28      	ldr	r3, [pc, #160]	@ (8001a4c <HAL_GPIO_Init+0x354>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ce:	4a1f      	ldr	r2, [pc, #124]	@ (8001a4c <HAL_GPIO_Init+0x354>)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a4c <HAL_GPIO_Init+0x354>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019f8:	4a14      	ldr	r2, [pc, #80]	@ (8001a4c <HAL_GPIO_Init+0x354>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3301      	adds	r3, #1
 8001a02:	61fb      	str	r3, [r7, #28]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	2b0f      	cmp	r3, #15
 8001a08:	f67f ae86 	bls.w	8001718 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3724      	adds	r7, #36	@ 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40013800 	.word	0x40013800
 8001a24:	40020000 	.word	0x40020000
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	40020c00 	.word	0x40020c00
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40021400 	.word	0x40021400
 8001a3c:	40021800 	.word	0x40021800
 8001a40:	40021c00 	.word	0x40021c00
 8001a44:	40022000 	.word	0x40022000
 8001a48:	40022400 	.word	0x40022400
 8001a4c:	40013c00 	.word	0x40013c00

08001a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a60:	787b      	ldrb	r3, [r7, #1]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a6c:	e003      	b.n	8001a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a6e:	887b      	ldrh	r3, [r7, #2]
 8001a70:	041a      	lsls	r2, r3, #16
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	619a      	str	r2, [r3, #24]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e08b      	b.n	8001bae <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff f8fc 	bl	8000ca8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2224      	movs	r2, #36	@ 0x24
 8001ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d107      	bne.n	8001afe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	e006      	b.n	8001b0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001b0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d108      	bne.n	8001b26 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	e007      	b.n	8001b36 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6859      	ldr	r1, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <HAL_I2C_Init+0x134>)
 8001b42:	430b      	orrs	r3, r1
 8001b44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691a      	ldr	r2, [r3, #16]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69d9      	ldr	r1, [r3, #28]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1a      	ldr	r2, [r3, #32]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2220      	movs	r2, #32
 8001b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	02008000 	.word	0x02008000

08001bbc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	460b      	mov	r3, r1
 8001bca:	817b      	strh	r3, [r7, #10]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	f040 80fd 	bne.w	8001dd8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_I2C_Master_Transmit+0x30>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e0f6      	b.n	8001dda <HAL_I2C_Master_Transmit+0x21e>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bf4:	f7ff fb22 	bl	800123c <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	2319      	movs	r3, #25
 8001c00:	2201      	movs	r2, #1
 8001c02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f914 	bl	8001e34 <I2C_WaitOnFlagUntilTimeout>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0e1      	b.n	8001dda <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2221      	movs	r2, #33	@ 0x21
 8001c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2210      	movs	r2, #16
 8001c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	893a      	ldrh	r2, [r7, #8]
 8001c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	2bff      	cmp	r3, #255	@ 0xff
 8001c46:	d906      	bls.n	8001c56 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	22ff      	movs	r2, #255	@ 0xff
 8001c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001c4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	e007      	b.n	8001c66 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001c60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c64:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d024      	beq.n	8001cb8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	8979      	ldrh	r1, [r7, #10]
 8001caa:	4b4e      	ldr	r3, [pc, #312]	@ (8001de4 <HAL_I2C_Master_Transmit+0x228>)
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 fa83 	bl	80021bc <I2C_TransferConfig>
 8001cb6:	e066      	b.n	8001d86 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	8979      	ldrh	r1, [r7, #10]
 8001cc0:	4b48      	ldr	r3, [pc, #288]	@ (8001de4 <HAL_I2C_Master_Transmit+0x228>)
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 fa78 	bl	80021bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ccc:	e05b      	b.n	8001d86 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	6a39      	ldr	r1, [r7, #32]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 f907 	bl	8001ee6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e07b      	b.n	8001dda <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce6:	781a      	ldrb	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d034      	beq.n	8001d86 <HAL_I2C_Master_Transmit+0x1ca>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d130      	bne.n	8001d86 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2180      	movs	r1, #128	@ 0x80
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f880 	bl	8001e34 <I2C_WaitOnFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e04d      	b.n	8001dda <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2bff      	cmp	r3, #255	@ 0xff
 8001d46:	d90e      	bls.n	8001d66 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	22ff      	movs	r2, #255	@ 0xff
 8001d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	8979      	ldrh	r1, [r7, #10]
 8001d56:	2300      	movs	r3, #0
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 fa2c 	bl	80021bc <I2C_TransferConfig>
 8001d64:	e00f      	b.n	8001d86 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	8979      	ldrh	r1, [r7, #10]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 fa1b 	bl	80021bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d19e      	bne.n	8001cce <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	6a39      	ldr	r1, [r7, #32]
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 f8ed 	bl	8001f74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e01a      	b.n	8001dda <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2220      	movs	r2, #32
 8001daa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6859      	ldr	r1, [r3, #4]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <HAL_I2C_Master_Transmit+0x22c>)
 8001db8:	400b      	ands	r3, r1
 8001dba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e000      	b.n	8001dda <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001dd8:	2302      	movs	r3, #2
  }
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	80002000 	.word	0x80002000
 8001de8:	fe00e800 	.word	0xfe00e800

08001dec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d103      	bne.n	8001e0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2200      	movs	r2, #0
 8001e08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d007      	beq.n	8001e28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699a      	ldr	r2, [r3, #24]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	619a      	str	r2, [r3, #24]
  }
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	4613      	mov	r3, r2
 8001e42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e44:	e03b      	b.n	8001ebe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	6839      	ldr	r1, [r7, #0]
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 f8d6 	bl	8001ffc <I2C_IsErrorOccurred>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e041      	b.n	8001ede <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e60:	d02d      	beq.n	8001ebe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e62:	f7ff f9eb 	bl	800123c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d302      	bcc.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d122      	bne.n	8001ebe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699a      	ldr	r2, [r3, #24]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	4013      	ands	r3, r2
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d113      	bne.n	8001ebe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	f043 0220 	orr.w	r2, r3, #32
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	699a      	ldr	r2, [r3, #24]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	bf0c      	ite	eq
 8001ece:	2301      	moveq	r3, #1
 8001ed0:	2300      	movne	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d0b4      	beq.n	8001e46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ef2:	e033      	b.n	8001f5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	68b9      	ldr	r1, [r7, #8]
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 f87f 	bl	8001ffc <I2C_IsErrorOccurred>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e031      	b.n	8001f6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0e:	d025      	beq.n	8001f5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f10:	f7ff f994 	bl	800123c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d302      	bcc.n	8001f26 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d11a      	bne.n	8001f5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d013      	beq.n	8001f5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f38:	f043 0220 	orr.w	r2, r3, #32
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e007      	b.n	8001f6c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d1c4      	bne.n	8001ef4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f80:	e02f      	b.n	8001fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	68b9      	ldr	r1, [r7, #8]
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 f838 	bl	8001ffc <I2C_IsErrorOccurred>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e02d      	b.n	8001ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f96:	f7ff f951 	bl	800123c <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d302      	bcc.n	8001fac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d11a      	bne.n	8001fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	d013      	beq.n	8001fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbe:	f043 0220 	orr.w	r2, r3, #32
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e007      	b.n	8001ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	2b20      	cmp	r3, #32
 8001fee:	d1c8      	bne.n	8001f82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	@ 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	d068      	beq.n	80020fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2210      	movs	r2, #16
 800202e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002030:	e049      	b.n	80020c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d045      	beq.n	80020c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800203a:	f7ff f8ff 	bl	800123c <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	429a      	cmp	r2, r3
 8002048:	d302      	bcc.n	8002050 <I2C_IsErrorOccurred+0x54>
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d13a      	bne.n	80020c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800205a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002062:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800206e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002072:	d121      	bne.n	80020b8 <I2C_IsErrorOccurred+0xbc>
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800207a:	d01d      	beq.n	80020b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800207c:	7cfb      	ldrb	r3, [r7, #19]
 800207e:	2b20      	cmp	r3, #32
 8002080:	d01a      	beq.n	80020b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002090:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002092:	f7ff f8d3 	bl	800123c <HAL_GetTick>
 8002096:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002098:	e00e      	b.n	80020b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800209a:	f7ff f8cf 	bl	800123c <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b19      	cmp	r3, #25
 80020a6:	d907      	bls.n	80020b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	f043 0320 	orr.w	r3, r3, #32
 80020ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80020b6:	e006      	b.n	80020c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f003 0320 	and.w	r3, r3, #32
 80020c2:	2b20      	cmp	r3, #32
 80020c4:	d1e9      	bne.n	800209a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d003      	beq.n	80020dc <I2C_IsErrorOccurred+0xe0>
 80020d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0aa      	beq.n	8002032 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80020dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d103      	bne.n	80020ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2220      	movs	r2, #32
 80020ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	f043 0304 	orr.w	r3, r3, #4
 80020f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00b      	beq.n	8002124 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800211c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	f043 0308 	orr.w	r3, r3, #8
 8002134:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800213e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00b      	beq.n	8002168 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	f043 0302 	orr.w	r3, r3, #2
 8002156:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002160:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002168:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01c      	beq.n	80021aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f7ff fe3b 	bl	8001dec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6859      	ldr	r1, [r3, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b0d      	ldr	r3, [pc, #52]	@ (80021b8 <I2C_IsErrorOccurred+0x1bc>)
 8002182:	400b      	ands	r3, r1
 8002184:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	431a      	orrs	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80021aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3728      	adds	r7, #40	@ 0x28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	fe00e800 	.word	0xfe00e800

080021bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	817b      	strh	r3, [r7, #10]
 80021ca:	4613      	mov	r3, r2
 80021cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021ce:	897b      	ldrh	r3, [r7, #10]
 80021d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021d4:	7a7b      	ldrb	r3, [r7, #9]
 80021d6:	041b      	lsls	r3, r3, #16
 80021d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	0d5b      	lsrs	r3, r3, #21
 80021f6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80021fa:	4b08      	ldr	r3, [pc, #32]	@ (800221c <I2C_TransferConfig+0x60>)
 80021fc:	430b      	orrs	r3, r1
 80021fe:	43db      	mvns	r3, r3
 8002200:	ea02 0103 	and.w	r1, r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	430a      	orrs	r2, r1
 800220c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800220e:	bf00      	nop
 8002210:	371c      	adds	r7, #28
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	03ff63ff 	.word	0x03ff63ff

08002220 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b20      	cmp	r3, #32
 8002234:	d138      	bne.n	80022a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002240:	2302      	movs	r3, #2
 8002242:	e032      	b.n	80022aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2224      	movs	r2, #36	@ 0x24
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002272:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6819      	ldr	r1, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e000      	b.n	80022aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022a8:	2302      	movs	r3, #2
  }
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b085      	sub	sp, #20
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	d139      	bne.n	8002340 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e033      	b.n	8002342 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2224      	movs	r2, #36	@ 0x24
 80022e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002308:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	e000      	b.n	8002342 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002340:	2302      	movs	r3, #2
  }
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	4b23      	ldr	r3, [pc, #140]	@ (80023e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235e:	4a22      	ldr	r2, [pc, #136]	@ (80023e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002364:	6413      	str	r3, [r2, #64]	@ 0x40
 8002366:	4b20      	ldr	r3, [pc, #128]	@ (80023e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002372:	4b1e      	ldr	r3, [pc, #120]	@ (80023ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1d      	ldr	r2, [pc, #116]	@ (80023ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800237c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800237e:	f7fe ff5d 	bl	800123c <HAL_GetTick>
 8002382:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002384:	e009      	b.n	800239a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002386:	f7fe ff59 	bl	800123c <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002394:	d901      	bls.n	800239a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e022      	b.n	80023e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800239a:	4b14      	ldr	r3, [pc, #80]	@ (80023ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023a6:	d1ee      	bne.n	8002386 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023a8:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0f      	ldr	r2, [pc, #60]	@ (80023ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80023ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023b4:	f7fe ff42 	bl	800123c <HAL_GetTick>
 80023b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023ba:	e009      	b.n	80023d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023bc:	f7fe ff3e 	bl	800123c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023ca:	d901      	bls.n	80023d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e007      	b.n	80023e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023d0:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80023dc:	d1ee      	bne.n	80023bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40007000 	.word	0x40007000

080023f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80023f8:	2300      	movs	r3, #0
 80023fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e29b      	b.n	800293e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8087 	beq.w	8002522 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002414:	4b96      	ldr	r3, [pc, #600]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b04      	cmp	r3, #4
 800241e:	d00c      	beq.n	800243a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002420:	4b93      	ldr	r3, [pc, #588]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b08      	cmp	r3, #8
 800242a:	d112      	bne.n	8002452 <HAL_RCC_OscConfig+0x62>
 800242c:	4b90      	ldr	r3, [pc, #576]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002434:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002438:	d10b      	bne.n	8002452 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243a:	4b8d      	ldr	r3, [pc, #564]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d06c      	beq.n	8002520 <HAL_RCC_OscConfig+0x130>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d168      	bne.n	8002520 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e275      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x7a>
 800245c:	4b84      	ldr	r3, [pc, #528]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a83      	ldr	r2, [pc, #524]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 8002462:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	e02e      	b.n	80024c8 <HAL_RCC_OscConfig+0xd8>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x9c>
 8002472:	4b7f      	ldr	r3, [pc, #508]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a7e      	ldr	r2, [pc, #504]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b7c      	ldr	r3, [pc, #496]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a7b      	ldr	r2, [pc, #492]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 8002484:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e01d      	b.n	80024c8 <HAL_RCC_OscConfig+0xd8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0xc0>
 8002496:	4b76      	ldr	r3, [pc, #472]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a75      	ldr	r2, [pc, #468]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 800249c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b73      	ldr	r3, [pc, #460]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a72      	ldr	r2, [pc, #456]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0xd8>
 80024b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a6e      	ldr	r2, [pc, #440]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a6b      	ldr	r2, [pc, #428]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe feb4 	bl	800123c <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7fe feb0 	bl	800123c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	@ 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e229      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	4b61      	ldr	r3, [pc, #388]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0xe8>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe fea0 	bl	800123c <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7fe fe9c 	bl	800123c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	@ 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e215      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002512:	4b57      	ldr	r3, [pc, #348]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x110>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d069      	beq.n	8002602 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800252e:	4b50      	ldr	r3, [pc, #320]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00b      	beq.n	8002552 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253a:	4b4d      	ldr	r3, [pc, #308]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b08      	cmp	r3, #8
 8002544:	d11c      	bne.n	8002580 <HAL_RCC_OscConfig+0x190>
 8002546:	4b4a      	ldr	r3, [pc, #296]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d116      	bne.n	8002580 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	4b47      	ldr	r3, [pc, #284]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_RCC_OscConfig+0x17a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d001      	beq.n	800256a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e1e9      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256a:	4b41      	ldr	r3, [pc, #260]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	493d      	ldr	r1, [pc, #244]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257e:	e040      	b.n	8002602 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d023      	beq.n	80025d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002588:	4b39      	ldr	r3, [pc, #228]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a38      	ldr	r2, [pc, #224]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7fe fe52 	bl	800123c <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259c:	f7fe fe4e 	bl	800123c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e1c7      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ae:	4b30      	ldr	r3, [pc, #192]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4929      	ldr	r1, [pc, #164]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]
 80025ce:	e018      	b.n	8002602 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d0:	4b27      	ldr	r3, [pc, #156]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a26      	ldr	r2, [pc, #152]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 80025d6:	f023 0301 	bic.w	r3, r3, #1
 80025da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe fe2e 	bl	800123c <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e4:	f7fe fe2a 	bl	800123c <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1a3      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d038      	beq.n	8002680 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d019      	beq.n	800264a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002616:	4b16      	ldr	r3, [pc, #88]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 8002618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800261a:	4a15      	ldr	r2, [pc, #84]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002622:	f7fe fe0b 	bl	800123c <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262a:	f7fe fe07 	bl	800123c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e180      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263c:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 800263e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x23a>
 8002648:	e01a      	b.n	8002680 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264a:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 800264c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800264e:	4a08      	ldr	r2, [pc, #32]	@ (8002670 <HAL_RCC_OscConfig+0x280>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002656:	f7fe fdf1 	bl	800123c <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265e:	f7fe fded 	bl	800123c <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d903      	bls.n	8002674 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e166      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
 8002670:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	4b92      	ldr	r3, [pc, #584]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1ee      	bne.n	800265e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a4 	beq.w	80027d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268e:	4b8c      	ldr	r3, [pc, #560]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10d      	bne.n	80026b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	4b89      	ldr	r3, [pc, #548]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	4a88      	ldr	r2, [pc, #544]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80026a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026a6:	4b86      	ldr	r3, [pc, #536]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b2:	2301      	movs	r3, #1
 80026b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b6:	4b83      	ldr	r3, [pc, #524]	@ (80028c4 <HAL_RCC_OscConfig+0x4d4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d118      	bne.n	80026f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80026c2:	4b80      	ldr	r3, [pc, #512]	@ (80028c4 <HAL_RCC_OscConfig+0x4d4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a7f      	ldr	r2, [pc, #508]	@ (80028c4 <HAL_RCC_OscConfig+0x4d4>)
 80026c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ce:	f7fe fdb5 	bl	800123c <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d6:	f7fe fdb1 	bl	800123c <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b64      	cmp	r3, #100	@ 0x64
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e12a      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e8:	4b76      	ldr	r3, [pc, #472]	@ (80028c4 <HAL_RCC_OscConfig+0x4d4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d106      	bne.n	800270a <HAL_RCC_OscConfig+0x31a>
 80026fc:	4b70      	ldr	r3, [pc, #448]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002700:	4a6f      	ldr	r2, [pc, #444]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6713      	str	r3, [r2, #112]	@ 0x70
 8002708:	e02d      	b.n	8002766 <HAL_RCC_OscConfig+0x376>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10c      	bne.n	800272c <HAL_RCC_OscConfig+0x33c>
 8002712:	4b6b      	ldr	r3, [pc, #428]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002716:	4a6a      	ldr	r2, [pc, #424]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	6713      	str	r3, [r2, #112]	@ 0x70
 800271e:	4b68      	ldr	r3, [pc, #416]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002722:	4a67      	ldr	r2, [pc, #412]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002724:	f023 0304 	bic.w	r3, r3, #4
 8002728:	6713      	str	r3, [r2, #112]	@ 0x70
 800272a:	e01c      	b.n	8002766 <HAL_RCC_OscConfig+0x376>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b05      	cmp	r3, #5
 8002732:	d10c      	bne.n	800274e <HAL_RCC_OscConfig+0x35e>
 8002734:	4b62      	ldr	r3, [pc, #392]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002738:	4a61      	ldr	r2, [pc, #388]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 800273a:	f043 0304 	orr.w	r3, r3, #4
 800273e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002740:	4b5f      	ldr	r3, [pc, #380]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002744:	4a5e      	ldr	r2, [pc, #376]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6713      	str	r3, [r2, #112]	@ 0x70
 800274c:	e00b      	b.n	8002766 <HAL_RCC_OscConfig+0x376>
 800274e:	4b5c      	ldr	r3, [pc, #368]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002752:	4a5b      	ldr	r2, [pc, #364]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	6713      	str	r3, [r2, #112]	@ 0x70
 800275a:	4b59      	ldr	r3, [pc, #356]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275e:	4a58      	ldr	r2, [pc, #352]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002760:	f023 0304 	bic.w	r3, r3, #4
 8002764:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d015      	beq.n	800279a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276e:	f7fe fd65 	bl	800123c <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7fe fd61 	bl	800123c <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e0d8      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278c:	4b4c      	ldr	r3, [pc, #304]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0ee      	beq.n	8002776 <HAL_RCC_OscConfig+0x386>
 8002798:	e014      	b.n	80027c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279a:	f7fe fd4f 	bl	800123c <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a0:	e00a      	b.n	80027b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f7fe fd4b 	bl	800123c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e0c2      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b8:	4b41      	ldr	r3, [pc, #260]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1ee      	bne.n	80027a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d105      	bne.n	80027d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ca:	4b3d      	ldr	r3, [pc, #244]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	4a3c      	ldr	r2, [pc, #240]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80027d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027d4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80ae 	beq.w	800293c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e0:	4b37      	ldr	r3, [pc, #220]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d06d      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d14b      	bne.n	800288c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f4:	4b32      	ldr	r3, [pc, #200]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a31      	ldr	r2, [pc, #196]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80027fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe fd1c 	bl	800123c <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe fd18 	bl	800123c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e091      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	4b29      	ldr	r3, [pc, #164]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	019b      	lsls	r3, r3, #6
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283c:	085b      	lsrs	r3, r3, #1
 800283e:	3b01      	subs	r3, #1
 8002840:	041b      	lsls	r3, r3, #16
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002850:	071b      	lsls	r3, r3, #28
 8002852:	491b      	ldr	r1, [pc, #108]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002858:	4b19      	ldr	r3, [pc, #100]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a18      	ldr	r2, [pc, #96]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 800285e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fcea 	bl	800123c <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fce6 	bl	800123c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e05f      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287e:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x47c>
 800288a:	e057      	b.n	800293c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288c:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0b      	ldr	r2, [pc, #44]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 8002892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fcd0 	bl	800123c <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fe fccc 	bl	800123c <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e045      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_RCC_OscConfig+0x4d0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x4b0>
 80028be:	e03d      	b.n	800293c <HAL_RCC_OscConfig+0x54c>
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80028c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002948 <HAL_RCC_OscConfig+0x558>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d030      	beq.n	8002938 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d129      	bne.n	8002938 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d122      	bne.n	8002938 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028f8:	4013      	ands	r3, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002900:	4293      	cmp	r3, r2
 8002902:	d119      	bne.n	8002938 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290e:	085b      	lsrs	r3, r3, #1
 8002910:	3b01      	subs	r3, #1
 8002912:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d10f      	bne.n	8002938 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002922:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d107      	bne.n	8002938 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800

0800294c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0d0      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002964:	4b6a      	ldr	r3, [pc, #424]	@ (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d910      	bls.n	8002994 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b67      	ldr	r3, [pc, #412]	@ (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 020f 	bic.w	r2, r3, #15
 800297a:	4965      	ldr	r1, [pc, #404]	@ (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b63      	ldr	r3, [pc, #396]	@ (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0b8      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d020      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ac:	4b59      	ldr	r3, [pc, #356]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a58      	ldr	r2, [pc, #352]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 80029b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c4:	4b53      	ldr	r3, [pc, #332]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a52      	ldr	r2, [pc, #328]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 80029ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d0:	4b50      	ldr	r3, [pc, #320]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	494d      	ldr	r1, [pc, #308]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d040      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	4b47      	ldr	r3, [pc, #284]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d115      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e07f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0e:	4b41      	ldr	r3, [pc, #260]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e073      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e06b      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a2e:	4b39      	ldr	r3, [pc, #228]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f023 0203 	bic.w	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4936      	ldr	r1, [pc, #216]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a40:	f7fe fbfc 	bl	800123c <HAL_GetTick>
 8002a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a48:	f7fe fbf8 	bl	800123c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e053      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 020c 	and.w	r2, r3, #12
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d1eb      	bne.n	8002a48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a70:	4b27      	ldr	r3, [pc, #156]	@ (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d210      	bcs.n	8002aa0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7e:	4b24      	ldr	r3, [pc, #144]	@ (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 020f 	bic.w	r2, r3, #15
 8002a86:	4922      	ldr	r1, [pc, #136]	@ (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b20      	ldr	r3, [pc, #128]	@ (8002b10 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e032      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aac:	4b19      	ldr	r3, [pc, #100]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4916      	ldr	r1, [pc, #88]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aca:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	490e      	ldr	r1, [pc, #56]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ade:	f000 f821 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	490a      	ldr	r1, [pc, #40]	@ (8002b18 <HAL_RCC_ClockConfig+0x1cc>)
 8002af0:	5ccb      	ldrb	r3, [r1, r3]
 8002af2:	fa22 f303 	lsr.w	r3, r2, r3
 8002af6:	4a09      	ldr	r2, [pc, #36]	@ (8002b1c <HAL_RCC_ClockConfig+0x1d0>)
 8002af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002afa:	4b09      	ldr	r3, [pc, #36]	@ (8002b20 <HAL_RCC_ClockConfig+0x1d4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe f9d4 	bl	8000eac <HAL_InitTick>

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023c00 	.word	0x40023c00
 8002b14:	40023800 	.word	0x40023800
 8002b18:	08008998 	.word	0x08008998
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	20000004 	.word	0x20000004

08002b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b28:	b094      	sub	sp, #80	@ 0x50
 8002b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b30:	2300      	movs	r3, #0
 8002b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b34:	2300      	movs	r3, #0
 8002b36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b3c:	4b79      	ldr	r3, [pc, #484]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 030c 	and.w	r3, r3, #12
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d00d      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x40>
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	f200 80e1 	bhi.w	8002d10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0x34>
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d003      	beq.n	8002b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b56:	e0db      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b58:	4b73      	ldr	r3, [pc, #460]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b5c:	e0db      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5e:	4b73      	ldr	r3, [pc, #460]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x208>)
 8002b60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b62:	e0d8      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b64:	4b6f      	ldr	r3, [pc, #444]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d063      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	099b      	lsrs	r3, r3, #6
 8002b80:	2200      	movs	r2, #0
 8002b82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b8e:	2300      	movs	r3, #0
 8002b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b96:	4622      	mov	r2, r4
 8002b98:	462b      	mov	r3, r5
 8002b9a:	f04f 0000 	mov.w	r0, #0
 8002b9e:	f04f 0100 	mov.w	r1, #0
 8002ba2:	0159      	lsls	r1, r3, #5
 8002ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba8:	0150      	lsls	r0, r2, #5
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4621      	mov	r1, r4
 8002bb0:	1a51      	subs	r1, r2, r1
 8002bb2:	6139      	str	r1, [r7, #16]
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bc8:	4659      	mov	r1, fp
 8002bca:	018b      	lsls	r3, r1, #6
 8002bcc:	4651      	mov	r1, sl
 8002bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bd2:	4651      	mov	r1, sl
 8002bd4:	018a      	lsls	r2, r1, #6
 8002bd6:	4651      	mov	r1, sl
 8002bd8:	ebb2 0801 	subs.w	r8, r2, r1
 8002bdc:	4659      	mov	r1, fp
 8002bde:	eb63 0901 	sbc.w	r9, r3, r1
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bf6:	4690      	mov	r8, r2
 8002bf8:	4699      	mov	r9, r3
 8002bfa:	4623      	mov	r3, r4
 8002bfc:	eb18 0303 	adds.w	r3, r8, r3
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	462b      	mov	r3, r5
 8002c04:	eb49 0303 	adc.w	r3, r9, r3
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c16:	4629      	mov	r1, r5
 8002c18:	024b      	lsls	r3, r1, #9
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c20:	4621      	mov	r1, r4
 8002c22:	024a      	lsls	r2, r1, #9
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c34:	f7fd fb5c 	bl	80002f0 <__aeabi_uldivmod>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c40:	e058      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c42:	4b38      	ldr	r3, [pc, #224]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	099b      	lsrs	r3, r3, #6
 8002c48:	2200      	movs	r2, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c52:	623b      	str	r3, [r7, #32]
 8002c54:	2300      	movs	r3, #0
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	464b      	mov	r3, r9
 8002c60:	f04f 0000 	mov.w	r0, #0
 8002c64:	f04f 0100 	mov.w	r1, #0
 8002c68:	0159      	lsls	r1, r3, #5
 8002c6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c6e:	0150      	lsls	r0, r2, #5
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4641      	mov	r1, r8
 8002c76:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c7a:	4649      	mov	r1, r9
 8002c7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c94:	ebb2 040a 	subs.w	r4, r2, sl
 8002c98:	eb63 050b 	sbc.w	r5, r3, fp
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	00eb      	lsls	r3, r5, #3
 8002ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002caa:	00e2      	lsls	r2, r4, #3
 8002cac:	4614      	mov	r4, r2
 8002cae:	461d      	mov	r5, r3
 8002cb0:	4643      	mov	r3, r8
 8002cb2:	18e3      	adds	r3, r4, r3
 8002cb4:	603b      	str	r3, [r7, #0]
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	eb45 0303 	adc.w	r3, r5, r3
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cca:	4629      	mov	r1, r5
 8002ccc:	028b      	lsls	r3, r1, #10
 8002cce:	4621      	mov	r1, r4
 8002cd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	028a      	lsls	r2, r1, #10
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cde:	2200      	movs	r2, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	61fa      	str	r2, [r7, #28]
 8002ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce8:	f7fd fb02 	bl	80002f0 <__aeabi_uldivmod>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	0c1b      	lsrs	r3, r3, #16
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d0e:	e002      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d10:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3750      	adds	r7, #80	@ 0x50
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	00f42400 	.word	0x00f42400
 8002d2c:	007a1200 	.word	0x007a1200

08002d30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d34:	4b03      	ldr	r3, [pc, #12]	@ (8002d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000000 	.word	0x20000000

08002d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d4c:	f7ff fff0 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	0a9b      	lsrs	r3, r3, #10
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4903      	ldr	r1, [pc, #12]	@ (8002d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	080089a8 	.word	0x080089a8

08002d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d74:	f7ff ffdc 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	0b5b      	lsrs	r3, r3, #13
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	4903      	ldr	r1, [pc, #12]	@ (8002d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40023800 	.word	0x40023800
 8002d94:	080089a8 	.word	0x080089a8

08002d98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	220f      	movs	r2, #15
 8002da6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002da8:	4b12      	ldr	r3, [pc, #72]	@ (8002df4 <HAL_RCC_GetClockConfig+0x5c>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 0203 	and.w	r2, r3, #3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002db4:	4b0f      	ldr	r3, [pc, #60]	@ (8002df4 <HAL_RCC_GetClockConfig+0x5c>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <HAL_RCC_GetClockConfig+0x5c>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002dcc:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <HAL_RCC_GetClockConfig+0x5c>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	08db      	lsrs	r3, r3, #3
 8002dd2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dda:	4b07      	ldr	r3, [pc, #28]	@ (8002df8 <HAL_RCC_GetClockConfig+0x60>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 020f 	and.w	r2, r3, #15
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	601a      	str	r2, [r3, #0]
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40023c00 	.word	0x40023c00

08002dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d012      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e24:	4b69      	ldr	r3, [pc, #420]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4a68      	ldr	r2, [pc, #416]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002e2e:	6093      	str	r3, [r2, #8]
 8002e30:	4b66      	ldr	r3, [pc, #408]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e38:	4964      	ldr	r1, [pc, #400]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e46:	2301      	movs	r3, #1
 8002e48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d017      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e56:	4b5d      	ldr	r3, [pc, #372]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e5c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e64:	4959      	ldr	r1, [pc, #356]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e74:	d101      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e76:	2301      	movs	r3, #1
 8002e78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e82:	2301      	movs	r3, #1
 8002e84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d017      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e92:	4b4e      	ldr	r3, [pc, #312]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea0:	494a      	ldr	r1, [pc, #296]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 808b 	beq.w	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ee0:	4b3a      	ldr	r3, [pc, #232]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	4a39      	ldr	r2, [pc, #228]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eea:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eec:	4b37      	ldr	r3, [pc, #220]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ef8:	4b35      	ldr	r3, [pc, #212]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a34      	ldr	r2, [pc, #208]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002efe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f04:	f7fe f99a 	bl	800123c <HAL_GetTick>
 8002f08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0c:	f7fe f996 	bl	800123c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	@ 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e38f      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f2a:	4b28      	ldr	r3, [pc, #160]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d035      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d02e      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f48:	4b20      	ldr	r3, [pc, #128]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f52:	4b1e      	ldr	r3, [pc, #120]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f56:	4a1d      	ldr	r2, [pc, #116]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f5c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f62:	4a1a      	ldr	r2, [pc, #104]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f6a:	4a18      	ldr	r2, [pc, #96]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f70:	4b16      	ldr	r3, [pc, #88]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d114      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7fe f95e 	bl	800123c <HAL_GetTick>
 8002f80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f82:	e00a      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f84:	f7fe f95a 	bl	800123c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e351      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0ee      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fb2:	d111      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fb4:	4b05      	ldr	r3, [pc, #20]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fc0:	4b04      	ldr	r3, [pc, #16]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fc2:	400b      	ands	r3, r1
 8002fc4:	4901      	ldr	r1, [pc, #4]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
 8002fca:	e00b      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40007000 	.word	0x40007000
 8002fd4:	0ffffcff 	.word	0x0ffffcff
 8002fd8:	4bac      	ldr	r3, [pc, #688]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4aab      	ldr	r2, [pc, #684]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fde:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002fe2:	6093      	str	r3, [r2, #8]
 8002fe4:	4ba9      	ldr	r3, [pc, #676]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff0:	49a6      	ldr	r1, [pc, #664]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d010      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003002:	4ba2      	ldr	r3, [pc, #648]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003008:	4aa0      	ldr	r2, [pc, #640]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800300e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003012:	4b9e      	ldr	r3, [pc, #632]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003014:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301c:	499b      	ldr	r1, [pc, #620]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003030:	4b96      	ldr	r3, [pc, #600]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003036:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800303e:	4993      	ldr	r1, [pc, #588]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003052:	4b8e      	ldr	r3, [pc, #568]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003058:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003060:	498a      	ldr	r1, [pc, #552]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003074:	4b85      	ldr	r3, [pc, #532]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003082:	4982      	ldr	r1, [pc, #520]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003096:	4b7d      	ldr	r3, [pc, #500]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a4:	4979      	ldr	r1, [pc, #484]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030b8:	4b74      	ldr	r3, [pc, #464]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030be:	f023 0203 	bic.w	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c6:	4971      	ldr	r1, [pc, #452]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030da:	4b6c      	ldr	r3, [pc, #432]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e0:	f023 020c 	bic.w	r2, r3, #12
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030e8:	4968      	ldr	r1, [pc, #416]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030fc:	4b63      	ldr	r3, [pc, #396]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003102:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310a:	4960      	ldr	r1, [pc, #384]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800311e:	4b5b      	ldr	r3, [pc, #364]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003124:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800312c:	4957      	ldr	r1, [pc, #348]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003140:	4b52      	ldr	r3, [pc, #328]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003146:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314e:	494f      	ldr	r1, [pc, #316]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003162:	4b4a      	ldr	r3, [pc, #296]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003168:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003170:	4946      	ldr	r1, [pc, #280]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003184:	4b41      	ldr	r3, [pc, #260]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003192:	493e      	ldr	r1, [pc, #248]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031a6:	4b39      	ldr	r3, [pc, #228]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b4:	4935      	ldr	r1, [pc, #212]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031c8:	4b30      	ldr	r3, [pc, #192]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031d6:	492d      	ldr	r1, [pc, #180]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d011      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031ea:	4b28      	ldr	r3, [pc, #160]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031f8:	4924      	ldr	r1, [pc, #144]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003204:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003208:	d101      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800320a:	2301      	movs	r3, #1
 800320c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800321a:	2301      	movs	r3, #1
 800321c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800322a:	4b18      	ldr	r3, [pc, #96]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003230:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003238:	4914      	ldr	r1, [pc, #80]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00b      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800324c:	4b0f      	ldr	r3, [pc, #60]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003252:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800325c:	490b      	ldr	r1, [pc, #44]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00f      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003270:	4b06      	ldr	r3, [pc, #24]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003276:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003280:	4902      	ldr	r1, [pc, #8]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003288:	e002      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00b      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800329c:	4b8a      	ldr	r3, [pc, #552]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800329e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ac:	4986      	ldr	r1, [pc, #536]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00b      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032c0:	4b81      	ldr	r3, [pc, #516]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032c6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032d0:	497d      	ldr	r1, [pc, #500]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d006      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80d6 	beq.w	8003498 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032ec:	4b76      	ldr	r3, [pc, #472]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a75      	ldr	r2, [pc, #468]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80032f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f8:	f7fd ffa0 	bl	800123c <HAL_GetTick>
 80032fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003300:	f7fd ff9c 	bl	800123c <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b64      	cmp	r3, #100	@ 0x64
 800330c:	d901      	bls.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e195      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003312:	4b6d      	ldr	r3, [pc, #436]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d021      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800332e:	2b00      	cmp	r3, #0
 8003330:	d11d      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003332:	4b65      	ldr	r3, [pc, #404]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003334:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003340:	4b61      	ldr	r3, [pc, #388]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003342:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003346:	0e1b      	lsrs	r3, r3, #24
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	019a      	lsls	r2, r3, #6
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	431a      	orrs	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	071b      	lsls	r3, r3, #28
 8003366:	4958      	ldr	r1, [pc, #352]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d004      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800337e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800338c:	2b00      	cmp	r3, #0
 800338e:	d02e      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003398:	d129      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800339a:	4b4b      	ldr	r3, [pc, #300]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033a8:	4b47      	ldr	r3, [pc, #284]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033ae:	0f1b      	lsrs	r3, r3, #28
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	019a      	lsls	r2, r3, #6
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	041b      	lsls	r3, r3, #16
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	061b      	lsls	r3, r3, #24
 80033c8:	431a      	orrs	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	071b      	lsls	r3, r3, #28
 80033ce:	493e      	ldr	r1, [pc, #248]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033d6:	4b3c      	ldr	r3, [pc, #240]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033dc:	f023 021f 	bic.w	r2, r3, #31
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e4:	3b01      	subs	r3, #1
 80033e6:	4938      	ldr	r1, [pc, #224]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01d      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033fa:	4b33      	ldr	r3, [pc, #204]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003400:	0e1b      	lsrs	r3, r3, #24
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003408:	4b2f      	ldr	r3, [pc, #188]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800340a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800340e:	0f1b      	lsrs	r3, r3, #28
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	019a      	lsls	r2, r3, #6
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	041b      	lsls	r3, r3, #16
 8003422:	431a      	orrs	r2, r3
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	061b      	lsls	r3, r3, #24
 8003428:	431a      	orrs	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	071b      	lsls	r3, r3, #28
 800342e:	4926      	ldr	r1, [pc, #152]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d011      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	019a      	lsls	r2, r3, #6
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	041b      	lsls	r3, r3, #16
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	061b      	lsls	r3, r3, #24
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	071b      	lsls	r3, r3, #28
 800345e:	491a      	ldr	r1, [pc, #104]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003466:	4b18      	ldr	r3, [pc, #96]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a17      	ldr	r2, [pc, #92]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800346c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003472:	f7fd fee3 	bl	800123c <HAL_GetTick>
 8003476:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003478:	e008      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800347a:	f7fd fedf 	bl	800123c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b64      	cmp	r3, #100	@ 0x64
 8003486:	d901      	bls.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e0d8      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800348c:	4b0e      	ldr	r3, [pc, #56]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2b01      	cmp	r3, #1
 800349c:	f040 80ce 	bne.w	800363c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034a0:	4b09      	ldr	r3, [pc, #36]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a08      	ldr	r2, [pc, #32]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ac:	f7fd fec6 	bl	800123c <HAL_GetTick>
 80034b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034b2:	e00b      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034b4:	f7fd fec2 	bl	800123c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	@ 0x64
 80034c0:	d904      	bls.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e0bb      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80034c6:	bf00      	nop
 80034c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034d8:	d0ec      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d009      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d02e      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d12a      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003502:	4b51      	ldr	r3, [pc, #324]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003508:	0c1b      	lsrs	r3, r3, #16
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003510:	4b4d      	ldr	r3, [pc, #308]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003516:	0f1b      	lsrs	r3, r3, #28
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	019a      	lsls	r2, r3, #6
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	041b      	lsls	r3, r3, #16
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	061b      	lsls	r3, r3, #24
 8003530:	431a      	orrs	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	071b      	lsls	r3, r3, #28
 8003536:	4944      	ldr	r1, [pc, #272]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800353e:	4b42      	ldr	r3, [pc, #264]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003540:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003544:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354c:	3b01      	subs	r3, #1
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	493d      	ldr	r1, [pc, #244]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d022      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003568:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800356c:	d11d      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800356e:	4b36      	ldr	r3, [pc, #216]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003574:	0e1b      	lsrs	r3, r3, #24
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800357c:	4b32      	ldr	r3, [pc, #200]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003582:	0f1b      	lsrs	r3, r3, #28
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	019a      	lsls	r2, r3, #6
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	041b      	lsls	r3, r3, #16
 8003596:	431a      	orrs	r2, r3
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	061b      	lsls	r3, r3, #24
 800359c:	431a      	orrs	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	071b      	lsls	r3, r3, #28
 80035a2:	4929      	ldr	r1, [pc, #164]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d028      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035b6:	4b24      	ldr	r3, [pc, #144]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035bc:	0e1b      	lsrs	r3, r3, #24
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035c4:	4b20      	ldr	r3, [pc, #128]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ca:	0c1b      	lsrs	r3, r3, #16
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	019a      	lsls	r2, r3, #6
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	041b      	lsls	r3, r3, #16
 80035dc:	431a      	orrs	r2, r3
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	061b      	lsls	r3, r3, #24
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	071b      	lsls	r3, r3, #28
 80035ea:	4917      	ldr	r1, [pc, #92]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80035f2:	4b15      	ldr	r3, [pc, #84]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003600:	4911      	ldr	r1, [pc, #68]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003608:	4b0f      	ldr	r3, [pc, #60]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a0e      	ldr	r2, [pc, #56]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800360e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003614:	f7fd fe12 	bl	800123c <HAL_GetTick>
 8003618:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800361a:	e008      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800361c:	f7fd fe0e 	bl	800123c <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	@ 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e007      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800362e:	4b06      	ldr	r3, [pc, #24]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800363a:	d1ef      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800

0800364c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e09d      	b.n	800379a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	2b00      	cmp	r3, #0
 8003664:	d108      	bne.n	8003678 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800366e:	d009      	beq.n	8003684 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	61da      	str	r2, [r3, #28]
 8003676:	e005      	b.n	8003684 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7fd fb60 	bl	8000d64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036c4:	d902      	bls.n	80036cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	e002      	b.n	80036d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80036cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80036da:	d007      	beq.n	80036ec <HAL_SPI_Init+0xa0>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036e4:	d002      	beq.n	80036ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372e:	ea42 0103 	orr.w	r1, r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003736:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	0c1b      	lsrs	r3, r3, #16
 8003748:	f003 0204 	and.w	r2, r3, #4
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003768:	ea42 0103 	orr.w	r1, r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003788:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b088      	sub	sp, #32
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	603b      	str	r3, [r7, #0]
 80037ae:	4613      	mov	r3, r2
 80037b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_SPI_Transmit+0x22>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e15f      	b.n	8003a84 <HAL_SPI_Transmit+0x2e2>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037cc:	f7fd fd36 	bl	800123c <HAL_GetTick>
 80037d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d002      	beq.n	80037e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037e2:	2302      	movs	r3, #2
 80037e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037e6:	e148      	b.n	8003a7a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_SPI_Transmit+0x52>
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d102      	bne.n	80037fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037f8:	e13f      	b.n	8003a7a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2203      	movs	r2, #3
 80037fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	88fa      	ldrh	r2, [r7, #6]
 8003812:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	88fa      	ldrh	r2, [r7, #6]
 8003818:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003844:	d10f      	bne.n	8003866 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003854:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003864:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003870:	2b40      	cmp	r3, #64	@ 0x40
 8003872:	d007      	beq.n	8003884 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003882:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800388c:	d94f      	bls.n	800392e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_SPI_Transmit+0xfa>
 8003896:	8afb      	ldrh	r3, [r7, #22]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d142      	bne.n	8003922 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a0:	881a      	ldrh	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ac:	1c9a      	adds	r2, r3, #2
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038c0:	e02f      	b.n	8003922 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d112      	bne.n	80038f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d4:	881a      	ldrh	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e0:	1c9a      	adds	r2, r3, #2
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038f4:	e015      	b.n	8003922 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038f6:	f7fd fca1 	bl	800123c <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d803      	bhi.n	800390e <HAL_SPI_Transmit+0x16c>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d102      	bne.n	8003914 <HAL_SPI_Transmit+0x172>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d106      	bne.n	8003922 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003920:	e0ab      	b.n	8003a7a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ca      	bne.n	80038c2 <HAL_SPI_Transmit+0x120>
 800392c:	e080      	b.n	8003a30 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_SPI_Transmit+0x19a>
 8003936:	8afb      	ldrh	r3, [r7, #22]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d174      	bne.n	8003a26 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b01      	cmp	r3, #1
 8003944:	d912      	bls.n	800396c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394a:	881a      	ldrh	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003956:	1c9a      	adds	r2, r3, #2
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b02      	subs	r3, #2
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800396a:	e05c      	b.n	8003a26 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	330c      	adds	r3, #12
 8003976:	7812      	ldrb	r2, [r2, #0]
 8003978:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003992:	e048      	b.n	8003a26 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d12b      	bne.n	80039fa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d912      	bls.n	80039d2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b0:	881a      	ldrh	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039bc:	1c9a      	adds	r2, r3, #2
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b02      	subs	r3, #2
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039d0:	e029      	b.n	8003a26 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	330c      	adds	r3, #12
 80039dc:	7812      	ldrb	r2, [r2, #0]
 80039de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039f8:	e015      	b.n	8003a26 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039fa:	f7fd fc1f 	bl	800123c <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d803      	bhi.n	8003a12 <HAL_SPI_Transmit+0x270>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a10:	d102      	bne.n	8003a18 <HAL_SPI_Transmit+0x276>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003a24:	e029      	b.n	8003a7a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1b1      	bne.n	8003994 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	6839      	ldr	r1, [r7, #0]
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 f947 	bl	8003cc8 <SPI_EndRxTxTransaction>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10a      	bne.n	8003a64 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e003      	b.n	8003a7a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003a82:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a9c:	f7fd fbce 	bl	800123c <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa4:	1a9b      	subs	r3, r3, r2
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003aac:	f7fd fbc6 	bl	800123c <HAL_GetTick>
 8003ab0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ab2:	4b39      	ldr	r3, [pc, #228]	@ (8003b98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	015b      	lsls	r3, r3, #5
 8003ab8:	0d1b      	lsrs	r3, r3, #20
 8003aba:	69fa      	ldr	r2, [r7, #28]
 8003abc:	fb02 f303 	mul.w	r3, r2, r3
 8003ac0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ac2:	e054      	b.n	8003b6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aca:	d050      	beq.n	8003b6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003acc:	f7fd fbb6 	bl	800123c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d902      	bls.n	8003ae2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d13d      	bne.n	8003b5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003af0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003afa:	d111      	bne.n	8003b20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b04:	d004      	beq.n	8003b10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b0e:	d107      	bne.n	8003b20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b28:	d10f      	bne.n	8003b4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e017      	b.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4013      	ands	r3, r2
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	bf0c      	ite	eq
 8003b7e:	2301      	moveq	r3, #1
 8003b80:	2300      	movne	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d19b      	bne.n	8003ac4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000000 	.word	0x20000000

08003b9c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08a      	sub	sp, #40	@ 0x28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003bae:	f7fd fb45 	bl	800123c <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb6:	1a9b      	subs	r3, r3, r2
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	4413      	add	r3, r2
 8003bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003bbe:	f7fd fb3d 	bl	800123c <HAL_GetTick>
 8003bc2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	330c      	adds	r3, #12
 8003bca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003bcc:	4b3d      	ldr	r3, [pc, #244]	@ (8003cc4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	00da      	lsls	r2, r3, #3
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	0d1b      	lsrs	r3, r3, #20
 8003bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bde:	fb02 f303 	mul.w	r3, r2, r3
 8003be2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003be4:	e060      	b.n	8003ca8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003bec:	d107      	bne.n	8003bfe <SPI_WaitFifoStateUntilTimeout+0x62>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d104      	bne.n	8003bfe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d050      	beq.n	8003ca8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c06:	f7fd fb19 	bl	800123c <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d902      	bls.n	8003c1c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d13d      	bne.n	8003c98 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c34:	d111      	bne.n	8003c5a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c3e:	d004      	beq.n	8003c4a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c48:	d107      	bne.n	8003c5a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c62:	d10f      	bne.n	8003c84 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e010      	b.n	8003cba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d196      	bne.n	8003be6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3728      	adds	r7, #40	@ 0x28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000000 	.word	0x20000000

08003cc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f7ff ff5b 	bl	8003b9c <SPI_WaitFifoStateUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf0:	f043 0220 	orr.w	r2, r3, #32
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e046      	b.n	8003d8a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003cfc:	4b25      	ldr	r3, [pc, #148]	@ (8003d94 <SPI_EndRxTxTransaction+0xcc>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a25      	ldr	r2, [pc, #148]	@ (8003d98 <SPI_EndRxTxTransaction+0xd0>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	0d5b      	lsrs	r3, r3, #21
 8003d08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d0c:	fb02 f303 	mul.w	r3, r2, r3
 8003d10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d1a:	d112      	bne.n	8003d42 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	2180      	movs	r1, #128	@ 0x80
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff feb0 	bl	8003a8c <SPI_WaitFlagStateUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d016      	beq.n	8003d60 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e023      	b.n	8003d8a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d58:	2b80      	cmp	r3, #128	@ 0x80
 8003d5a:	d0f2      	beq.n	8003d42 <SPI_EndRxTxTransaction+0x7a>
 8003d5c:	e000      	b.n	8003d60 <SPI_EndRxTxTransaction+0x98>
        break;
 8003d5e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f7ff ff15 	bl	8003b9c <SPI_WaitFifoStateUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7c:	f043 0220 	orr.w	r2, r3, #32
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e000      	b.n	8003d8a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000000 	.word	0x20000000
 8003d98:	165e9f81 	.word	0x165e9f81

08003d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e049      	b.n	8003e42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f841 	bl	8003e4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4610      	mov	r0, r2
 8003ddc:	f000 f9e8 	bl	80041b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d001      	beq.n	8003e78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e054      	b.n	8003f22 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a26      	ldr	r2, [pc, #152]	@ (8003f30 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d022      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x80>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea2:	d01d      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x80>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a22      	ldr	r2, [pc, #136]	@ (8003f34 <HAL_TIM_Base_Start_IT+0xd4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d018      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x80>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a21      	ldr	r2, [pc, #132]	@ (8003f38 <HAL_TIM_Base_Start_IT+0xd8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d013      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x80>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8003f3c <HAL_TIM_Base_Start_IT+0xdc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00e      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x80>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f40 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d009      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x80>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f44 <HAL_TIM_Base_Start_IT+0xe4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d004      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x80>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1b      	ldr	r2, [pc, #108]	@ (8003f48 <HAL_TIM_Base_Start_IT+0xe8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d115      	bne.n	8003f0c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	4b19      	ldr	r3, [pc, #100]	@ (8003f4c <HAL_TIM_Base_Start_IT+0xec>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b06      	cmp	r3, #6
 8003ef0:	d015      	beq.n	8003f1e <HAL_TIM_Base_Start_IT+0xbe>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef8:	d011      	beq.n	8003f1e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0201 	orr.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0a:	e008      	b.n	8003f1e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	e000      	b.n	8003f20 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40010000 	.word	0x40010000
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40000800 	.word	0x40000800
 8003f3c:	40000c00 	.word	0x40000c00
 8003f40:	40010400 	.word	0x40010400
 8003f44:	40014000 	.word	0x40014000
 8003f48:	40001800 	.word	0x40001800
 8003f4c:	00010007 	.word	0x00010007

08003f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d020      	beq.n	8003fb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01b      	beq.n	8003fb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0202 	mvn.w	r2, #2
 8003f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f8e9 	bl	8004172 <HAL_TIM_IC_CaptureCallback>
 8003fa0:	e005      	b.n	8003fae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f8db 	bl	800415e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f8ec 	bl	8004186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d020      	beq.n	8004000 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01b      	beq.n	8004000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0204 	mvn.w	r2, #4
 8003fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f8c3 	bl	8004172 <HAL_TIM_IC_CaptureCallback>
 8003fec:	e005      	b.n	8003ffa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f8b5 	bl	800415e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f8c6 	bl	8004186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d020      	beq.n	800404c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f003 0308 	and.w	r3, r3, #8
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01b      	beq.n	800404c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0208 	mvn.w	r2, #8
 800401c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2204      	movs	r2, #4
 8004022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f89d 	bl	8004172 <HAL_TIM_IC_CaptureCallback>
 8004038:	e005      	b.n	8004046 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f88f 	bl	800415e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f8a0 	bl	8004186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b00      	cmp	r3, #0
 8004054:	d020      	beq.n	8004098 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01b      	beq.n	8004098 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0210 	mvn.w	r2, #16
 8004068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2208      	movs	r2, #8
 800406e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f877 	bl	8004172 <HAL_TIM_IC_CaptureCallback>
 8004084:	e005      	b.n	8004092 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f869 	bl	800415e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f87a 	bl	8004186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00c      	beq.n	80040bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d007      	beq.n	80040bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f06f 0201 	mvn.w	r2, #1
 80040b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fc fdb6 	bl	8000c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d104      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00c      	beq.n	80040ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d007      	beq.n	80040ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80040e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f919 	bl	800431c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00c      	beq.n	800410e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f911 	bl	8004330 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00c      	beq.n	8004132 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411e:	2b00      	cmp	r3, #0
 8004120:	d007      	beq.n	8004132 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800412a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f834 	bl	800419a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f003 0320 	and.w	r3, r3, #32
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00c      	beq.n	8004156 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b00      	cmp	r3, #0
 8004144:	d007      	beq.n	8004156 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f06f 0220 	mvn.w	r2, #32
 800414e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f8d9 	bl	8004308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
	...

080041b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a46      	ldr	r2, [pc, #280]	@ (80042dc <TIM_Base_SetConfig+0x12c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d013      	beq.n	80041f0 <TIM_Base_SetConfig+0x40>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ce:	d00f      	beq.n	80041f0 <TIM_Base_SetConfig+0x40>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a43      	ldr	r2, [pc, #268]	@ (80042e0 <TIM_Base_SetConfig+0x130>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d00b      	beq.n	80041f0 <TIM_Base_SetConfig+0x40>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a42      	ldr	r2, [pc, #264]	@ (80042e4 <TIM_Base_SetConfig+0x134>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d007      	beq.n	80041f0 <TIM_Base_SetConfig+0x40>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a41      	ldr	r2, [pc, #260]	@ (80042e8 <TIM_Base_SetConfig+0x138>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d003      	beq.n	80041f0 <TIM_Base_SetConfig+0x40>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a40      	ldr	r2, [pc, #256]	@ (80042ec <TIM_Base_SetConfig+0x13c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d108      	bne.n	8004202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a35      	ldr	r2, [pc, #212]	@ (80042dc <TIM_Base_SetConfig+0x12c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d02b      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004210:	d027      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a32      	ldr	r2, [pc, #200]	@ (80042e0 <TIM_Base_SetConfig+0x130>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d023      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a31      	ldr	r2, [pc, #196]	@ (80042e4 <TIM_Base_SetConfig+0x134>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d01f      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a30      	ldr	r2, [pc, #192]	@ (80042e8 <TIM_Base_SetConfig+0x138>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d01b      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a2f      	ldr	r2, [pc, #188]	@ (80042ec <TIM_Base_SetConfig+0x13c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d017      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a2e      	ldr	r2, [pc, #184]	@ (80042f0 <TIM_Base_SetConfig+0x140>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d013      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a2d      	ldr	r2, [pc, #180]	@ (80042f4 <TIM_Base_SetConfig+0x144>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d00f      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a2c      	ldr	r2, [pc, #176]	@ (80042f8 <TIM_Base_SetConfig+0x148>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00b      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a2b      	ldr	r2, [pc, #172]	@ (80042fc <TIM_Base_SetConfig+0x14c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d007      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a2a      	ldr	r2, [pc, #168]	@ (8004300 <TIM_Base_SetConfig+0x150>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d003      	beq.n	8004262 <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a29      	ldr	r2, [pc, #164]	@ (8004304 <TIM_Base_SetConfig+0x154>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d108      	bne.n	8004274 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a10      	ldr	r2, [pc, #64]	@ (80042dc <TIM_Base_SetConfig+0x12c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d003      	beq.n	80042a8 <TIM_Base_SetConfig+0xf8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a12      	ldr	r2, [pc, #72]	@ (80042ec <TIM_Base_SetConfig+0x13c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d103      	bne.n	80042b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d105      	bne.n	80042ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f023 0201 	bic.w	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	611a      	str	r2, [r3, #16]
  }
}
 80042ce:	bf00      	nop
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40010000 	.word	0x40010000
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40000800 	.word	0x40000800
 80042e8:	40000c00 	.word	0x40000c00
 80042ec:	40010400 	.word	0x40010400
 80042f0:	40014000 	.word	0x40014000
 80042f4:	40014400 	.word	0x40014400
 80042f8:	40014800 	.word	0x40014800
 80042fc:	40001800 	.word	0x40001800
 8004300:	40001c00 	.word	0x40001c00
 8004304:	40002000 	.word	0x40002000

08004308 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e040      	b.n	80043d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fc fd40 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2224      	movs	r2, #36	@ 0x24
 8004370:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0201 	bic.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fb16 	bl	80049bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f8af 	bl	80044f4 <UART_SetConfig>
 8004396:	4603      	mov	r3, r0
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e01b      	b.n	80043d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fb95 	bl	8004b00 <UART_CheckIdleState>
 80043d6:	4603      	mov	r3, r0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08a      	sub	sp, #40	@ 0x28
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	4613      	mov	r3, r2
 80043ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	d177      	bne.n	80044e8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_UART_Transmit+0x24>
 80043fe:	88fb      	ldrh	r3, [r7, #6]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e070      	b.n	80044ea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2221      	movs	r2, #33	@ 0x21
 8004414:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004416:	f7fc ff11 	bl	800123c <HAL_GetTick>
 800441a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	88fa      	ldrh	r2, [r7, #6]
 8004420:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	88fa      	ldrh	r2, [r7, #6]
 8004428:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004434:	d108      	bne.n	8004448 <HAL_UART_Transmit+0x68>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d104      	bne.n	8004448 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800443e:	2300      	movs	r3, #0
 8004440:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	e003      	b.n	8004450 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800444c:	2300      	movs	r3, #0
 800444e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004450:	e02f      	b.n	80044b2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2200      	movs	r2, #0
 800445a:	2180      	movs	r1, #128	@ 0x80
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fbf7 	bl	8004c50 <UART_WaitOnFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d004      	beq.n	8004472 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e03b      	b.n	80044ea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10b      	bne.n	8004490 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004486:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	3302      	adds	r3, #2
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	e007      	b.n	80044a0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	781a      	ldrb	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	3301      	adds	r3, #1
 800449e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1c9      	bne.n	8004452 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2200      	movs	r2, #0
 80044c6:	2140      	movs	r1, #64	@ 0x40
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fbc1 	bl	8004c50 <UART_WaitOnFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e005      	b.n	80044ea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2220      	movs	r2, #32
 80044e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	e000      	b.n	80044ea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
  }
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3720      	adds	r7, #32
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4ba6      	ldr	r3, [pc, #664]	@ (80047b8 <UART_SetConfig+0x2c4>)
 8004520:	4013      	ands	r3, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6812      	ldr	r2, [r2, #0]
 8004526:	6979      	ldr	r1, [r7, #20]
 8004528:	430b      	orrs	r3, r1
 800452a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	430a      	orrs	r2, r1
 8004564:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a94      	ldr	r2, [pc, #592]	@ (80047bc <UART_SetConfig+0x2c8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d120      	bne.n	80045b2 <UART_SetConfig+0xbe>
 8004570:	4b93      	ldr	r3, [pc, #588]	@ (80047c0 <UART_SetConfig+0x2cc>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	2b03      	cmp	r3, #3
 800457c:	d816      	bhi.n	80045ac <UART_SetConfig+0xb8>
 800457e:	a201      	add	r2, pc, #4	@ (adr r2, 8004584 <UART_SetConfig+0x90>)
 8004580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004584:	08004595 	.word	0x08004595
 8004588:	080045a1 	.word	0x080045a1
 800458c:	0800459b 	.word	0x0800459b
 8004590:	080045a7 	.word	0x080045a7
 8004594:	2301      	movs	r3, #1
 8004596:	77fb      	strb	r3, [r7, #31]
 8004598:	e150      	b.n	800483c <UART_SetConfig+0x348>
 800459a:	2302      	movs	r3, #2
 800459c:	77fb      	strb	r3, [r7, #31]
 800459e:	e14d      	b.n	800483c <UART_SetConfig+0x348>
 80045a0:	2304      	movs	r3, #4
 80045a2:	77fb      	strb	r3, [r7, #31]
 80045a4:	e14a      	b.n	800483c <UART_SetConfig+0x348>
 80045a6:	2308      	movs	r3, #8
 80045a8:	77fb      	strb	r3, [r7, #31]
 80045aa:	e147      	b.n	800483c <UART_SetConfig+0x348>
 80045ac:	2310      	movs	r3, #16
 80045ae:	77fb      	strb	r3, [r7, #31]
 80045b0:	e144      	b.n	800483c <UART_SetConfig+0x348>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a83      	ldr	r2, [pc, #524]	@ (80047c4 <UART_SetConfig+0x2d0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d132      	bne.n	8004622 <UART_SetConfig+0x12e>
 80045bc:	4b80      	ldr	r3, [pc, #512]	@ (80047c0 <UART_SetConfig+0x2cc>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	2b0c      	cmp	r3, #12
 80045c8:	d828      	bhi.n	800461c <UART_SetConfig+0x128>
 80045ca:	a201      	add	r2, pc, #4	@ (adr r2, 80045d0 <UART_SetConfig+0xdc>)
 80045cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d0:	08004605 	.word	0x08004605
 80045d4:	0800461d 	.word	0x0800461d
 80045d8:	0800461d 	.word	0x0800461d
 80045dc:	0800461d 	.word	0x0800461d
 80045e0:	08004611 	.word	0x08004611
 80045e4:	0800461d 	.word	0x0800461d
 80045e8:	0800461d 	.word	0x0800461d
 80045ec:	0800461d 	.word	0x0800461d
 80045f0:	0800460b 	.word	0x0800460b
 80045f4:	0800461d 	.word	0x0800461d
 80045f8:	0800461d 	.word	0x0800461d
 80045fc:	0800461d 	.word	0x0800461d
 8004600:	08004617 	.word	0x08004617
 8004604:	2300      	movs	r3, #0
 8004606:	77fb      	strb	r3, [r7, #31]
 8004608:	e118      	b.n	800483c <UART_SetConfig+0x348>
 800460a:	2302      	movs	r3, #2
 800460c:	77fb      	strb	r3, [r7, #31]
 800460e:	e115      	b.n	800483c <UART_SetConfig+0x348>
 8004610:	2304      	movs	r3, #4
 8004612:	77fb      	strb	r3, [r7, #31]
 8004614:	e112      	b.n	800483c <UART_SetConfig+0x348>
 8004616:	2308      	movs	r3, #8
 8004618:	77fb      	strb	r3, [r7, #31]
 800461a:	e10f      	b.n	800483c <UART_SetConfig+0x348>
 800461c:	2310      	movs	r3, #16
 800461e:	77fb      	strb	r3, [r7, #31]
 8004620:	e10c      	b.n	800483c <UART_SetConfig+0x348>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a68      	ldr	r2, [pc, #416]	@ (80047c8 <UART_SetConfig+0x2d4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d120      	bne.n	800466e <UART_SetConfig+0x17a>
 800462c:	4b64      	ldr	r3, [pc, #400]	@ (80047c0 <UART_SetConfig+0x2cc>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004632:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004636:	2b30      	cmp	r3, #48	@ 0x30
 8004638:	d013      	beq.n	8004662 <UART_SetConfig+0x16e>
 800463a:	2b30      	cmp	r3, #48	@ 0x30
 800463c:	d814      	bhi.n	8004668 <UART_SetConfig+0x174>
 800463e:	2b20      	cmp	r3, #32
 8004640:	d009      	beq.n	8004656 <UART_SetConfig+0x162>
 8004642:	2b20      	cmp	r3, #32
 8004644:	d810      	bhi.n	8004668 <UART_SetConfig+0x174>
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <UART_SetConfig+0x15c>
 800464a:	2b10      	cmp	r3, #16
 800464c:	d006      	beq.n	800465c <UART_SetConfig+0x168>
 800464e:	e00b      	b.n	8004668 <UART_SetConfig+0x174>
 8004650:	2300      	movs	r3, #0
 8004652:	77fb      	strb	r3, [r7, #31]
 8004654:	e0f2      	b.n	800483c <UART_SetConfig+0x348>
 8004656:	2302      	movs	r3, #2
 8004658:	77fb      	strb	r3, [r7, #31]
 800465a:	e0ef      	b.n	800483c <UART_SetConfig+0x348>
 800465c:	2304      	movs	r3, #4
 800465e:	77fb      	strb	r3, [r7, #31]
 8004660:	e0ec      	b.n	800483c <UART_SetConfig+0x348>
 8004662:	2308      	movs	r3, #8
 8004664:	77fb      	strb	r3, [r7, #31]
 8004666:	e0e9      	b.n	800483c <UART_SetConfig+0x348>
 8004668:	2310      	movs	r3, #16
 800466a:	77fb      	strb	r3, [r7, #31]
 800466c:	e0e6      	b.n	800483c <UART_SetConfig+0x348>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a56      	ldr	r2, [pc, #344]	@ (80047cc <UART_SetConfig+0x2d8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d120      	bne.n	80046ba <UART_SetConfig+0x1c6>
 8004678:	4b51      	ldr	r3, [pc, #324]	@ (80047c0 <UART_SetConfig+0x2cc>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004682:	2bc0      	cmp	r3, #192	@ 0xc0
 8004684:	d013      	beq.n	80046ae <UART_SetConfig+0x1ba>
 8004686:	2bc0      	cmp	r3, #192	@ 0xc0
 8004688:	d814      	bhi.n	80046b4 <UART_SetConfig+0x1c0>
 800468a:	2b80      	cmp	r3, #128	@ 0x80
 800468c:	d009      	beq.n	80046a2 <UART_SetConfig+0x1ae>
 800468e:	2b80      	cmp	r3, #128	@ 0x80
 8004690:	d810      	bhi.n	80046b4 <UART_SetConfig+0x1c0>
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <UART_SetConfig+0x1a8>
 8004696:	2b40      	cmp	r3, #64	@ 0x40
 8004698:	d006      	beq.n	80046a8 <UART_SetConfig+0x1b4>
 800469a:	e00b      	b.n	80046b4 <UART_SetConfig+0x1c0>
 800469c:	2300      	movs	r3, #0
 800469e:	77fb      	strb	r3, [r7, #31]
 80046a0:	e0cc      	b.n	800483c <UART_SetConfig+0x348>
 80046a2:	2302      	movs	r3, #2
 80046a4:	77fb      	strb	r3, [r7, #31]
 80046a6:	e0c9      	b.n	800483c <UART_SetConfig+0x348>
 80046a8:	2304      	movs	r3, #4
 80046aa:	77fb      	strb	r3, [r7, #31]
 80046ac:	e0c6      	b.n	800483c <UART_SetConfig+0x348>
 80046ae:	2308      	movs	r3, #8
 80046b0:	77fb      	strb	r3, [r7, #31]
 80046b2:	e0c3      	b.n	800483c <UART_SetConfig+0x348>
 80046b4:	2310      	movs	r3, #16
 80046b6:	77fb      	strb	r3, [r7, #31]
 80046b8:	e0c0      	b.n	800483c <UART_SetConfig+0x348>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a44      	ldr	r2, [pc, #272]	@ (80047d0 <UART_SetConfig+0x2dc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d125      	bne.n	8004710 <UART_SetConfig+0x21c>
 80046c4:	4b3e      	ldr	r3, [pc, #248]	@ (80047c0 <UART_SetConfig+0x2cc>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046d2:	d017      	beq.n	8004704 <UART_SetConfig+0x210>
 80046d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046d8:	d817      	bhi.n	800470a <UART_SetConfig+0x216>
 80046da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046de:	d00b      	beq.n	80046f8 <UART_SetConfig+0x204>
 80046e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e4:	d811      	bhi.n	800470a <UART_SetConfig+0x216>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <UART_SetConfig+0x1fe>
 80046ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ee:	d006      	beq.n	80046fe <UART_SetConfig+0x20a>
 80046f0:	e00b      	b.n	800470a <UART_SetConfig+0x216>
 80046f2:	2300      	movs	r3, #0
 80046f4:	77fb      	strb	r3, [r7, #31]
 80046f6:	e0a1      	b.n	800483c <UART_SetConfig+0x348>
 80046f8:	2302      	movs	r3, #2
 80046fa:	77fb      	strb	r3, [r7, #31]
 80046fc:	e09e      	b.n	800483c <UART_SetConfig+0x348>
 80046fe:	2304      	movs	r3, #4
 8004700:	77fb      	strb	r3, [r7, #31]
 8004702:	e09b      	b.n	800483c <UART_SetConfig+0x348>
 8004704:	2308      	movs	r3, #8
 8004706:	77fb      	strb	r3, [r7, #31]
 8004708:	e098      	b.n	800483c <UART_SetConfig+0x348>
 800470a:	2310      	movs	r3, #16
 800470c:	77fb      	strb	r3, [r7, #31]
 800470e:	e095      	b.n	800483c <UART_SetConfig+0x348>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a2f      	ldr	r2, [pc, #188]	@ (80047d4 <UART_SetConfig+0x2e0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d125      	bne.n	8004766 <UART_SetConfig+0x272>
 800471a:	4b29      	ldr	r3, [pc, #164]	@ (80047c0 <UART_SetConfig+0x2cc>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004720:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004724:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004728:	d017      	beq.n	800475a <UART_SetConfig+0x266>
 800472a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800472e:	d817      	bhi.n	8004760 <UART_SetConfig+0x26c>
 8004730:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004734:	d00b      	beq.n	800474e <UART_SetConfig+0x25a>
 8004736:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800473a:	d811      	bhi.n	8004760 <UART_SetConfig+0x26c>
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <UART_SetConfig+0x254>
 8004740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004744:	d006      	beq.n	8004754 <UART_SetConfig+0x260>
 8004746:	e00b      	b.n	8004760 <UART_SetConfig+0x26c>
 8004748:	2301      	movs	r3, #1
 800474a:	77fb      	strb	r3, [r7, #31]
 800474c:	e076      	b.n	800483c <UART_SetConfig+0x348>
 800474e:	2302      	movs	r3, #2
 8004750:	77fb      	strb	r3, [r7, #31]
 8004752:	e073      	b.n	800483c <UART_SetConfig+0x348>
 8004754:	2304      	movs	r3, #4
 8004756:	77fb      	strb	r3, [r7, #31]
 8004758:	e070      	b.n	800483c <UART_SetConfig+0x348>
 800475a:	2308      	movs	r3, #8
 800475c:	77fb      	strb	r3, [r7, #31]
 800475e:	e06d      	b.n	800483c <UART_SetConfig+0x348>
 8004760:	2310      	movs	r3, #16
 8004762:	77fb      	strb	r3, [r7, #31]
 8004764:	e06a      	b.n	800483c <UART_SetConfig+0x348>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1b      	ldr	r2, [pc, #108]	@ (80047d8 <UART_SetConfig+0x2e4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d138      	bne.n	80047e2 <UART_SetConfig+0x2ee>
 8004770:	4b13      	ldr	r3, [pc, #76]	@ (80047c0 <UART_SetConfig+0x2cc>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004776:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800477a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800477e:	d017      	beq.n	80047b0 <UART_SetConfig+0x2bc>
 8004780:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004784:	d82a      	bhi.n	80047dc <UART_SetConfig+0x2e8>
 8004786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800478a:	d00b      	beq.n	80047a4 <UART_SetConfig+0x2b0>
 800478c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004790:	d824      	bhi.n	80047dc <UART_SetConfig+0x2e8>
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <UART_SetConfig+0x2aa>
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800479a:	d006      	beq.n	80047aa <UART_SetConfig+0x2b6>
 800479c:	e01e      	b.n	80047dc <UART_SetConfig+0x2e8>
 800479e:	2300      	movs	r3, #0
 80047a0:	77fb      	strb	r3, [r7, #31]
 80047a2:	e04b      	b.n	800483c <UART_SetConfig+0x348>
 80047a4:	2302      	movs	r3, #2
 80047a6:	77fb      	strb	r3, [r7, #31]
 80047a8:	e048      	b.n	800483c <UART_SetConfig+0x348>
 80047aa:	2304      	movs	r3, #4
 80047ac:	77fb      	strb	r3, [r7, #31]
 80047ae:	e045      	b.n	800483c <UART_SetConfig+0x348>
 80047b0:	2308      	movs	r3, #8
 80047b2:	77fb      	strb	r3, [r7, #31]
 80047b4:	e042      	b.n	800483c <UART_SetConfig+0x348>
 80047b6:	bf00      	nop
 80047b8:	efff69f3 	.word	0xefff69f3
 80047bc:	40011000 	.word	0x40011000
 80047c0:	40023800 	.word	0x40023800
 80047c4:	40004400 	.word	0x40004400
 80047c8:	40004800 	.word	0x40004800
 80047cc:	40004c00 	.word	0x40004c00
 80047d0:	40005000 	.word	0x40005000
 80047d4:	40011400 	.word	0x40011400
 80047d8:	40007800 	.word	0x40007800
 80047dc:	2310      	movs	r3, #16
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e02c      	b.n	800483c <UART_SetConfig+0x348>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a72      	ldr	r2, [pc, #456]	@ (80049b0 <UART_SetConfig+0x4bc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d125      	bne.n	8004838 <UART_SetConfig+0x344>
 80047ec:	4b71      	ldr	r3, [pc, #452]	@ (80049b4 <UART_SetConfig+0x4c0>)
 80047ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80047f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80047fa:	d017      	beq.n	800482c <UART_SetConfig+0x338>
 80047fc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004800:	d817      	bhi.n	8004832 <UART_SetConfig+0x33e>
 8004802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004806:	d00b      	beq.n	8004820 <UART_SetConfig+0x32c>
 8004808:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800480c:	d811      	bhi.n	8004832 <UART_SetConfig+0x33e>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <UART_SetConfig+0x326>
 8004812:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004816:	d006      	beq.n	8004826 <UART_SetConfig+0x332>
 8004818:	e00b      	b.n	8004832 <UART_SetConfig+0x33e>
 800481a:	2300      	movs	r3, #0
 800481c:	77fb      	strb	r3, [r7, #31]
 800481e:	e00d      	b.n	800483c <UART_SetConfig+0x348>
 8004820:	2302      	movs	r3, #2
 8004822:	77fb      	strb	r3, [r7, #31]
 8004824:	e00a      	b.n	800483c <UART_SetConfig+0x348>
 8004826:	2304      	movs	r3, #4
 8004828:	77fb      	strb	r3, [r7, #31]
 800482a:	e007      	b.n	800483c <UART_SetConfig+0x348>
 800482c:	2308      	movs	r3, #8
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e004      	b.n	800483c <UART_SetConfig+0x348>
 8004832:	2310      	movs	r3, #16
 8004834:	77fb      	strb	r3, [r7, #31]
 8004836:	e001      	b.n	800483c <UART_SetConfig+0x348>
 8004838:	2310      	movs	r3, #16
 800483a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004844:	d15b      	bne.n	80048fe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004846:	7ffb      	ldrb	r3, [r7, #31]
 8004848:	2b08      	cmp	r3, #8
 800484a:	d828      	bhi.n	800489e <UART_SetConfig+0x3aa>
 800484c:	a201      	add	r2, pc, #4	@ (adr r2, 8004854 <UART_SetConfig+0x360>)
 800484e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004852:	bf00      	nop
 8004854:	08004879 	.word	0x08004879
 8004858:	08004881 	.word	0x08004881
 800485c:	08004889 	.word	0x08004889
 8004860:	0800489f 	.word	0x0800489f
 8004864:	0800488f 	.word	0x0800488f
 8004868:	0800489f 	.word	0x0800489f
 800486c:	0800489f 	.word	0x0800489f
 8004870:	0800489f 	.word	0x0800489f
 8004874:	08004897 	.word	0x08004897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004878:	f7fe fa66 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 800487c:	61b8      	str	r0, [r7, #24]
        break;
 800487e:	e013      	b.n	80048a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004880:	f7fe fa76 	bl	8002d70 <HAL_RCC_GetPCLK2Freq>
 8004884:	61b8      	str	r0, [r7, #24]
        break;
 8004886:	e00f      	b.n	80048a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004888:	4b4b      	ldr	r3, [pc, #300]	@ (80049b8 <UART_SetConfig+0x4c4>)
 800488a:	61bb      	str	r3, [r7, #24]
        break;
 800488c:	e00c      	b.n	80048a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800488e:	f7fe f949 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 8004892:	61b8      	str	r0, [r7, #24]
        break;
 8004894:	e008      	b.n	80048a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800489a:	61bb      	str	r3, [r7, #24]
        break;
 800489c:	e004      	b.n	80048a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	77bb      	strb	r3, [r7, #30]
        break;
 80048a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d074      	beq.n	8004998 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	005a      	lsls	r2, r3, #1
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	085b      	lsrs	r3, r3, #1
 80048b8:	441a      	add	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	2b0f      	cmp	r3, #15
 80048c8:	d916      	bls.n	80048f8 <UART_SetConfig+0x404>
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d0:	d212      	bcs.n	80048f8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f023 030f 	bic.w	r3, r3, #15
 80048da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	085b      	lsrs	r3, r3, #1
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	89fb      	ldrh	r3, [r7, #14]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	89fa      	ldrh	r2, [r7, #14]
 80048f4:	60da      	str	r2, [r3, #12]
 80048f6:	e04f      	b.n	8004998 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	77bb      	strb	r3, [r7, #30]
 80048fc:	e04c      	b.n	8004998 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048fe:	7ffb      	ldrb	r3, [r7, #31]
 8004900:	2b08      	cmp	r3, #8
 8004902:	d828      	bhi.n	8004956 <UART_SetConfig+0x462>
 8004904:	a201      	add	r2, pc, #4	@ (adr r2, 800490c <UART_SetConfig+0x418>)
 8004906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490a:	bf00      	nop
 800490c:	08004931 	.word	0x08004931
 8004910:	08004939 	.word	0x08004939
 8004914:	08004941 	.word	0x08004941
 8004918:	08004957 	.word	0x08004957
 800491c:	08004947 	.word	0x08004947
 8004920:	08004957 	.word	0x08004957
 8004924:	08004957 	.word	0x08004957
 8004928:	08004957 	.word	0x08004957
 800492c:	0800494f 	.word	0x0800494f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004930:	f7fe fa0a 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 8004934:	61b8      	str	r0, [r7, #24]
        break;
 8004936:	e013      	b.n	8004960 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004938:	f7fe fa1a 	bl	8002d70 <HAL_RCC_GetPCLK2Freq>
 800493c:	61b8      	str	r0, [r7, #24]
        break;
 800493e:	e00f      	b.n	8004960 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004940:	4b1d      	ldr	r3, [pc, #116]	@ (80049b8 <UART_SetConfig+0x4c4>)
 8004942:	61bb      	str	r3, [r7, #24]
        break;
 8004944:	e00c      	b.n	8004960 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004946:	f7fe f8ed 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 800494a:	61b8      	str	r0, [r7, #24]
        break;
 800494c:	e008      	b.n	8004960 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800494e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004952:	61bb      	str	r3, [r7, #24]
        break;
 8004954:	e004      	b.n	8004960 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	77bb      	strb	r3, [r7, #30]
        break;
 800495e:	bf00      	nop
    }

    if (pclk != 0U)
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d018      	beq.n	8004998 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	085a      	lsrs	r2, r3, #1
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	441a      	add	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b0f      	cmp	r3, #15
 800497e:	d909      	bls.n	8004994 <UART_SetConfig+0x4a0>
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004986:	d205      	bcs.n	8004994 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	b29a      	uxth	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60da      	str	r2, [r3, #12]
 8004992:	e001      	b.n	8004998 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40007c00 	.word	0x40007c00
 80049b4:	40023800 	.word	0x40023800
 80049b8:	00f42400 	.word	0x00f42400

080049bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d01a      	beq.n	8004ad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aba:	d10a      	bne.n	8004ad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	605a      	str	r2, [r3, #4]
  }
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b098      	sub	sp, #96	@ 0x60
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b10:	f7fc fb94 	bl	800123c <HAL_GetTick>
 8004b14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d12e      	bne.n	8004b82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f88c 	bl	8004c50 <UART_WaitOnFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d021      	beq.n	8004b82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b52:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b64:	e841 2300 	strex	r3, r2, [r1]
 8004b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e6      	bne.n	8004b3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e062      	b.n	8004c48 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d149      	bne.n	8004c24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f856 	bl	8004c50 <UART_WaitOnFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d03c      	beq.n	8004c24 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e6      	bne.n	8004baa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3308      	adds	r3, #8
 8004be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	e853 3f00 	ldrex	r3, [r3]
 8004bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0301 	bic.w	r3, r3, #1
 8004bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bfc:	61fa      	str	r2, [r7, #28]
 8004bfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c00:	69b9      	ldr	r1, [r7, #24]
 8004c02:	69fa      	ldr	r2, [r7, #28]
 8004c04:	e841 2300 	strex	r3, r2, [r1]
 8004c08:	617b      	str	r3, [r7, #20]
   return(result);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1e5      	bne.n	8004bdc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e011      	b.n	8004c48 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3758      	adds	r7, #88	@ 0x58
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c60:	e04f      	b.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c68:	d04b      	beq.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6a:	f7fc fae7 	bl	800123c <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d302      	bcc.n	8004c80 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e04e      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d037      	beq.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b80      	cmp	r3, #128	@ 0x80
 8004c96:	d034      	beq.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b40      	cmp	r3, #64	@ 0x40
 8004c9c:	d031      	beq.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d110      	bne.n	8004cce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f838 	bl	8004d2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e029      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cdc:	d111      	bne.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f81e 	bl	8004d2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e00f      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	bf0c      	ite	eq
 8004d12:	2301      	moveq	r3, #1
 8004d14:	2300      	movne	r3, #0
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d0a0      	beq.n	8004c62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b095      	sub	sp, #84	@ 0x54
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d50:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e6      	bne.n	8004d32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3308      	adds	r3, #8
 8004d6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f023 0301 	bic.w	r3, r3, #1
 8004d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3308      	adds	r3, #8
 8004d82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e5      	bne.n	8004d64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d118      	bne.n	8004dd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f023 0310 	bic.w	r3, r3, #16
 8004db4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dbe:	61bb      	str	r3, [r7, #24]
 8004dc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	6979      	ldr	r1, [r7, #20]
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	613b      	str	r3, [r7, #16]
   return(result);
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e6      	bne.n	8004da0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004de6:	bf00      	nop
 8004de8:	3754      	adds	r7, #84	@ 0x54
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004dfc:	4b04      	ldr	r3, [pc, #16]	@ (8004e10 <HAL_ETH_RxCpltCallback+0x1c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 f841 	bl	8004e88 <osSemaphoreRelease>
}
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	2000038c 	.word	0x2000038c

08004e14 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004e1c:	4b04      	ldr	r3, [pc, #16]	@ (8004e30 <HAL_ETH_TxCpltCallback+0x1c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 f831 	bl	8004e88 <osSemaphoreRelease>
}
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000390 	.word	0x20000390

08004e34 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7fc fc4d 	bl	80016dc <HAL_ETH_GetDMAError>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e48:	2b80      	cmp	r3, #128	@ 0x80
 8004e4a:	d104      	bne.n	8004e56 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004e4c:	4b04      	ldr	r3, [pc, #16]	@ (8004e60 <HAL_ETH_ErrorCallback+0x2c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 f819 	bl	8004e88 <osSemaphoreRelease>
  }
}
 8004e56:	bf00      	nop
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	2000038c 	.word	0x2000038c

08004e64 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e6a:	f3ef 8305 	mrs	r3, IPSR
 8004e6e:	607b      	str	r3, [r7, #4]
  return(result);
 8004e70:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	bf14      	ite	ne
 8004e76:	2301      	movne	r3, #1
 8004e78:	2300      	moveq	r3, #0
 8004e7a:	b2db      	uxtb	r3, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004e94:	2300      	movs	r3, #0
 8004e96:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004e98:	f7ff ffe4 	bl	8004e64 <inHandlerMode>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d016      	beq.n	8004ed0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004ea2:	f107 0308 	add.w	r3, r7, #8
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f9b5 	bl	8005218 <xQueueGiveFromISR>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d001      	beq.n	8004eb8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004eb4:	23ff      	movs	r3, #255	@ 0xff
 8004eb6:	e017      	b.n	8004ee8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d013      	beq.n	8004ee6 <osSemaphoreRelease+0x5e>
 8004ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef0 <osSemaphoreRelease+0x68>)
 8004ec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	e00a      	b.n	8004ee6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f894 	bl	8005004 <xQueueGenericSend>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d001      	beq.n	8004ee6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004ee2:	23ff      	movs	r3, #255	@ 0xff
 8004ee4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	601a      	str	r2, [r3, #0]
}
 8004f30:	bf00      	nop
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f52:	d103      	bne.n	8004f5c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	e00c      	b.n	8004f76 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3308      	adds	r3, #8
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	e002      	b.n	8004f6a <vListInsert+0x2e>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d2f6      	bcs.n	8004f64 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	601a      	str	r2, [r3, #0]
}
 8004fa2:	bf00      	nop
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b085      	sub	sp, #20
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6892      	ldr	r2, [r2, #8]
 8004fc4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6852      	ldr	r2, [r2, #4]
 8004fce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d103      	bne.n	8004fe2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	1e5a      	subs	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
	...

08005004 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08e      	sub	sp, #56	@ 0x38
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005012:	2300      	movs	r3, #0
 8005014:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10d      	bne.n	800503c <xQueueGenericSend+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005024:	b672      	cpsid	i
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	b662      	cpsie	i
 8005034:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005036:	bf00      	nop
 8005038:	bf00      	nop
 800503a:	e7fd      	b.n	8005038 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d103      	bne.n	800504a <xQueueGenericSend+0x46>
 8005042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <xQueueGenericSend+0x4a>
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <xQueueGenericSend+0x4c>
 800504e:	2300      	movs	r3, #0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10d      	bne.n	8005070 <xQueueGenericSend+0x6c>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005058:	b672      	cpsid	i
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	b662      	cpsie	i
 8005068:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800506a:	bf00      	nop
 800506c:	bf00      	nop
 800506e:	e7fd      	b.n	800506c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d103      	bne.n	800507e <xQueueGenericSend+0x7a>
 8005076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <xQueueGenericSend+0x7e>
 800507e:	2301      	movs	r3, #1
 8005080:	e000      	b.n	8005084 <xQueueGenericSend+0x80>
 8005082:	2300      	movs	r3, #0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10d      	bne.n	80050a4 <xQueueGenericSend+0xa0>
	__asm volatile
 8005088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508c:	b672      	cpsid	i
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	b662      	cpsie	i
 800509c:	623b      	str	r3, [r7, #32]
}
 800509e:	bf00      	nop
 80050a0:	bf00      	nop
 80050a2:	e7fd      	b.n	80050a0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050a4:	f000 fd24 	bl	8005af0 <xTaskGetSchedulerState>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d102      	bne.n	80050b4 <xQueueGenericSend+0xb0>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <xQueueGenericSend+0xb4>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <xQueueGenericSend+0xb6>
 80050b8:	2300      	movs	r3, #0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10d      	bne.n	80050da <xQueueGenericSend+0xd6>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c2:	b672      	cpsid	i
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	b662      	cpsie	i
 80050d2:	61fb      	str	r3, [r7, #28]
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	e7fd      	b.n	80050d6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050da:	f000 fe2d 	bl	8005d38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d302      	bcc.n	80050f0 <xQueueGenericSend+0xec>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d129      	bne.n	8005144 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050f6:	f000 f927 	bl	8005348 <prvCopyDataToQueue>
 80050fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005100:	2b00      	cmp	r3, #0
 8005102:	d010      	beq.n	8005126 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005106:	3324      	adds	r3, #36	@ 0x24
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fbe1 	bl	80058d0 <xTaskRemoveFromEventList>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d013      	beq.n	800513c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005114:	4b3f      	ldr	r3, [pc, #252]	@ (8005214 <xQueueGenericSend+0x210>)
 8005116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	e00a      	b.n	800513c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800512c:	4b39      	ldr	r3, [pc, #228]	@ (8005214 <xQueueGenericSend+0x210>)
 800512e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800513c:	f000 fe32 	bl	8005da4 <vPortExitCritical>
				return pdPASS;
 8005140:	2301      	movs	r3, #1
 8005142:	e063      	b.n	800520c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d103      	bne.n	8005152 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800514a:	f000 fe2b 	bl	8005da4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800514e:	2300      	movs	r3, #0
 8005150:	e05c      	b.n	800520c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005154:	2b00      	cmp	r3, #0
 8005156:	d106      	bne.n	8005166 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005158:	f107 0314 	add.w	r3, r7, #20
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fc1d 	bl	800599c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005162:	2301      	movs	r3, #1
 8005164:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005166:	f000 fe1d 	bl	8005da4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800516a:	f000 f9c1 	bl	80054f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800516e:	f000 fde3 	bl	8005d38 <vPortEnterCritical>
 8005172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005174:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005178:	b25b      	sxtb	r3, r3
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517e:	d103      	bne.n	8005188 <xQueueGenericSend+0x184>
 8005180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800518e:	b25b      	sxtb	r3, r3
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005194:	d103      	bne.n	800519e <xQueueGenericSend+0x19a>
 8005196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800519e:	f000 fe01 	bl	8005da4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051a2:	1d3a      	adds	r2, r7, #4
 80051a4:	f107 0314 	add.w	r3, r7, #20
 80051a8:	4611      	mov	r1, r2
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fc0c 	bl	80059c8 <xTaskCheckForTimeOut>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d124      	bne.n	8005200 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051b8:	f000 f982 	bl	80054c0 <prvIsQueueFull>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d018      	beq.n	80051f4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c4:	3310      	adds	r3, #16
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	4611      	mov	r1, r2
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fb58 	bl	8005880 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80051d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051d2:	f000 f923 	bl	800541c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80051d6:	f000 f999 	bl	800550c <xTaskResumeAll>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f47f af7c 	bne.w	80050da <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80051e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005214 <xQueueGenericSend+0x210>)
 80051e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	e772      	b.n	80050da <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051f6:	f000 f911 	bl	800541c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051fa:	f000 f987 	bl	800550c <xTaskResumeAll>
 80051fe:	e76c      	b.n	80050da <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005200:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005202:	f000 f90b 	bl	800541c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005206:	f000 f981 	bl	800550c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800520a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800520c:	4618      	mov	r0, r3
 800520e:	3738      	adds	r7, #56	@ 0x38
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	e000ed04 	.word	0xe000ed04

08005218 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08e      	sub	sp, #56	@ 0x38
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10d      	bne.n	8005248 <xQueueGiveFromISR+0x30>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005230:	b672      	cpsid	i
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	b662      	cpsie	i
 8005240:	623b      	str	r3, [r7, #32]
}
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	e7fd      	b.n	8005244 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00d      	beq.n	800526c <xQueueGiveFromISR+0x54>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005254:	b672      	cpsid	i
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	b662      	cpsie	i
 8005264:	61fb      	str	r3, [r7, #28]
}
 8005266:	bf00      	nop
 8005268:	bf00      	nop
 800526a:	e7fd      	b.n	8005268 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d103      	bne.n	800527c <xQueueGiveFromISR+0x64>
 8005274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <xQueueGiveFromISR+0x68>
 800527c:	2301      	movs	r3, #1
 800527e:	e000      	b.n	8005282 <xQueueGiveFromISR+0x6a>
 8005280:	2300      	movs	r3, #0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10d      	bne.n	80052a2 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528a:	b672      	cpsid	i
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	b662      	cpsie	i
 800529a:	61bb      	str	r3, [r7, #24]
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	e7fd      	b.n	800529e <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052a2:	f000 fe05 	bl	8005eb0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052a6:	f3ef 8211 	mrs	r2, BASEPRI
 80052aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ae:	b672      	cpsid	i
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	b662      	cpsie	i
 80052be:	617a      	str	r2, [r7, #20]
 80052c0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80052c2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ca:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80052cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d22b      	bcs.n	800532e <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80052d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f0:	d112      	bne.n	8005318 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d016      	beq.n	8005328 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fc:	3324      	adds	r3, #36	@ 0x24
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fae6 	bl	80058d0 <xTaskRemoveFromEventList>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00e      	beq.n	8005328 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00b      	beq.n	8005328 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2201      	movs	r2, #1
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	e007      	b.n	8005328 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800531c:	3301      	adds	r3, #1
 800531e:	b2db      	uxtb	r3, r3
 8005320:	b25a      	sxtb	r2, r3
 8005322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005324:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005328:	2301      	movs	r3, #1
 800532a:	637b      	str	r3, [r7, #52]	@ 0x34
 800532c:	e001      	b.n	8005332 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800532e:	2300      	movs	r3, #0
 8005330:	637b      	str	r3, [r7, #52]	@ 0x34
 8005332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005334:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800533c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800533e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005340:	4618      	mov	r0, r3
 8005342:	3738      	adds	r7, #56	@ 0x38
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005354:	2300      	movs	r3, #0
 8005356:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10d      	bne.n	8005382 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d14d      	bne.n	800540a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	4618      	mov	r0, r3
 8005374:	f000 fbda 	bl	8005b2c <xTaskPriorityDisinherit>
 8005378:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	609a      	str	r2, [r3, #8]
 8005380:	e043      	b.n	800540a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d119      	bne.n	80053bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6858      	ldr	r0, [r3, #4]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005390:	461a      	mov	r2, r3
 8005392:	68b9      	ldr	r1, [r7, #8]
 8005394:	f001 fd35 	bl	8006e02 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a0:	441a      	add	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d32b      	bcc.n	800540a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	605a      	str	r2, [r3, #4]
 80053ba:	e026      	b.n	800540a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	68d8      	ldr	r0, [r3, #12]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c4:	461a      	mov	r2, r3
 80053c6:	68b9      	ldr	r1, [r7, #8]
 80053c8:	f001 fd1b 	bl	8006e02 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d4:	425b      	negs	r3, r3
 80053d6:	441a      	add	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d207      	bcs.n	80053f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f0:	425b      	negs	r3, r3
 80053f2:	441a      	add	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d105      	bne.n	800540a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	3b01      	subs	r3, #1
 8005408:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005412:	697b      	ldr	r3, [r7, #20]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005424:	f000 fc88 	bl	8005d38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800542e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005430:	e011      	b.n	8005456 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005436:	2b00      	cmp	r3, #0
 8005438:	d012      	beq.n	8005460 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3324      	adds	r3, #36	@ 0x24
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fa46 	bl	80058d0 <xTaskRemoveFromEventList>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800544a:	f000 fb25 	bl	8005a98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	3b01      	subs	r3, #1
 8005452:	b2db      	uxtb	r3, r3
 8005454:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800545a:	2b00      	cmp	r3, #0
 800545c:	dce9      	bgt.n	8005432 <prvUnlockQueue+0x16>
 800545e:	e000      	b.n	8005462 <prvUnlockQueue+0x46>
					break;
 8005460:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	22ff      	movs	r2, #255	@ 0xff
 8005466:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800546a:	f000 fc9b 	bl	8005da4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800546e:	f000 fc63 	bl	8005d38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005478:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800547a:	e011      	b.n	80054a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d012      	beq.n	80054aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3310      	adds	r3, #16
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fa21 	bl	80058d0 <xTaskRemoveFromEventList>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005494:	f000 fb00 	bl	8005a98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005498:	7bbb      	ldrb	r3, [r7, #14]
 800549a:	3b01      	subs	r3, #1
 800549c:	b2db      	uxtb	r3, r3
 800549e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	dce9      	bgt.n	800547c <prvUnlockQueue+0x60>
 80054a8:	e000      	b.n	80054ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80054aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	22ff      	movs	r2, #255	@ 0xff
 80054b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80054b4:	f000 fc76 	bl	8005da4 <vPortExitCritical>
}
 80054b8:	bf00      	nop
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054c8:	f000 fc36 	bl	8005d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d102      	bne.n	80054de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80054d8:	2301      	movs	r3, #1
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	e001      	b.n	80054e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80054de:	2300      	movs	r3, #0
 80054e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054e2:	f000 fc5f 	bl	8005da4 <vPortExitCritical>

	return xReturn;
 80054e6:	68fb      	ldr	r3, [r7, #12]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80054f4:	4b04      	ldr	r3, [pc, #16]	@ (8005508 <vTaskSuspendAll+0x18>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3301      	adds	r3, #1
 80054fa:	4a03      	ldr	r2, [pc, #12]	@ (8005508 <vTaskSuspendAll+0x18>)
 80054fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80054fe:	bf00      	nop
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	20000524 	.word	0x20000524

0800550c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005516:	2300      	movs	r3, #0
 8005518:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800551a:	4b43      	ldr	r3, [pc, #268]	@ (8005628 <xTaskResumeAll+0x11c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10d      	bne.n	800553e <xTaskResumeAll+0x32>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005526:	b672      	cpsid	i
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	b662      	cpsie	i
 8005536:	603b      	str	r3, [r7, #0]
}
 8005538:	bf00      	nop
 800553a:	bf00      	nop
 800553c:	e7fd      	b.n	800553a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800553e:	f000 fbfb 	bl	8005d38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005542:	4b39      	ldr	r3, [pc, #228]	@ (8005628 <xTaskResumeAll+0x11c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3b01      	subs	r3, #1
 8005548:	4a37      	ldr	r2, [pc, #220]	@ (8005628 <xTaskResumeAll+0x11c>)
 800554a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800554c:	4b36      	ldr	r3, [pc, #216]	@ (8005628 <xTaskResumeAll+0x11c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d161      	bne.n	8005618 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005554:	4b35      	ldr	r3, [pc, #212]	@ (800562c <xTaskResumeAll+0x120>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d05d      	beq.n	8005618 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800555c:	e02e      	b.n	80055bc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800555e:	4b34      	ldr	r3, [pc, #208]	@ (8005630 <xTaskResumeAll+0x124>)
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3318      	adds	r3, #24
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff fd1f 	bl	8004fae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3304      	adds	r3, #4
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fd1a 	bl	8004fae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557e:	2201      	movs	r2, #1
 8005580:	409a      	lsls	r2, r3
 8005582:	4b2c      	ldr	r3, [pc, #176]	@ (8005634 <xTaskResumeAll+0x128>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4313      	orrs	r3, r2
 8005588:	4a2a      	ldr	r2, [pc, #168]	@ (8005634 <xTaskResumeAll+0x128>)
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4a27      	ldr	r2, [pc, #156]	@ (8005638 <xTaskResumeAll+0x12c>)
 800559a:	441a      	add	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3304      	adds	r3, #4
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f7ff fca6 	bl	8004ef4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ac:	4b23      	ldr	r3, [pc, #140]	@ (800563c <xTaskResumeAll+0x130>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d302      	bcc.n	80055bc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80055b6:	4b22      	ldr	r3, [pc, #136]	@ (8005640 <xTaskResumeAll+0x134>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005630 <xTaskResumeAll+0x124>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1cc      	bne.n	800555e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055ca:	f000 fa71 	bl	8005ab0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80055ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005644 <xTaskResumeAll+0x138>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d010      	beq.n	80055fc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055da:	f000 f837 	bl	800564c <xTaskIncrementTick>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80055e4:	4b16      	ldr	r3, [pc, #88]	@ (8005640 <xTaskResumeAll+0x134>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f1      	bne.n	80055da <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80055f6:	4b13      	ldr	r3, [pc, #76]	@ (8005644 <xTaskResumeAll+0x138>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055fc:	4b10      	ldr	r3, [pc, #64]	@ (8005640 <xTaskResumeAll+0x134>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d009      	beq.n	8005618 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005604:	2301      	movs	r3, #1
 8005606:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005608:	4b0f      	ldr	r3, [pc, #60]	@ (8005648 <xTaskResumeAll+0x13c>)
 800560a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005618:	f000 fbc4 	bl	8005da4 <vPortExitCritical>

	return xAlreadyYielded;
 800561c:	68bb      	ldr	r3, [r7, #8]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20000524 	.word	0x20000524
 800562c:	20000504 	.word	0x20000504
 8005630:	200004dc 	.word	0x200004dc
 8005634:	2000050c 	.word	0x2000050c
 8005638:	20000448 	.word	0x20000448
 800563c:	20000444 	.word	0x20000444
 8005640:	20000518 	.word	0x20000518
 8005644:	20000514 	.word	0x20000514
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005656:	4b50      	ldr	r3, [pc, #320]	@ (8005798 <xTaskIncrementTick+0x14c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f040 808b 	bne.w	8005776 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005660:	4b4e      	ldr	r3, [pc, #312]	@ (800579c <xTaskIncrementTick+0x150>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3301      	adds	r3, #1
 8005666:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005668:	4a4c      	ldr	r2, [pc, #304]	@ (800579c <xTaskIncrementTick+0x150>)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d123      	bne.n	80056bc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8005674:	4b4a      	ldr	r3, [pc, #296]	@ (80057a0 <xTaskIncrementTick+0x154>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00d      	beq.n	800569a <xTaskIncrementTick+0x4e>
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005682:	b672      	cpsid	i
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	b662      	cpsie	i
 8005692:	603b      	str	r3, [r7, #0]
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	e7fd      	b.n	8005696 <xTaskIncrementTick+0x4a>
 800569a:	4b41      	ldr	r3, [pc, #260]	@ (80057a0 <xTaskIncrementTick+0x154>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	4b40      	ldr	r3, [pc, #256]	@ (80057a4 <xTaskIncrementTick+0x158>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a3e      	ldr	r2, [pc, #248]	@ (80057a0 <xTaskIncrementTick+0x154>)
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	4a3e      	ldr	r2, [pc, #248]	@ (80057a4 <xTaskIncrementTick+0x158>)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	4b3e      	ldr	r3, [pc, #248]	@ (80057a8 <xTaskIncrementTick+0x15c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3301      	adds	r3, #1
 80056b4:	4a3c      	ldr	r2, [pc, #240]	@ (80057a8 <xTaskIncrementTick+0x15c>)
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	f000 f9fa 	bl	8005ab0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056bc:	4b3b      	ldr	r3, [pc, #236]	@ (80057ac <xTaskIncrementTick+0x160>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d348      	bcc.n	8005758 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056c6:	4b36      	ldr	r3, [pc, #216]	@ (80057a0 <xTaskIncrementTick+0x154>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d104      	bne.n	80056da <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d0:	4b36      	ldr	r3, [pc, #216]	@ (80057ac <xTaskIncrementTick+0x160>)
 80056d2:	f04f 32ff 	mov.w	r2, #4294967295
 80056d6:	601a      	str	r2, [r3, #0]
					break;
 80056d8:	e03e      	b.n	8005758 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056da:	4b31      	ldr	r3, [pc, #196]	@ (80057a0 <xTaskIncrementTick+0x154>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d203      	bcs.n	80056fa <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056f2:	4a2e      	ldr	r2, [pc, #184]	@ (80057ac <xTaskIncrementTick+0x160>)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056f8:	e02e      	b.n	8005758 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	3304      	adds	r3, #4
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff fc55 	bl	8004fae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	3318      	adds	r3, #24
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff fc4c 	bl	8004fae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571a:	2201      	movs	r2, #1
 800571c:	409a      	lsls	r2, r3
 800571e:	4b24      	ldr	r3, [pc, #144]	@ (80057b0 <xTaskIncrementTick+0x164>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4313      	orrs	r3, r2
 8005724:	4a22      	ldr	r2, [pc, #136]	@ (80057b0 <xTaskIncrementTick+0x164>)
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4a1f      	ldr	r2, [pc, #124]	@ (80057b4 <xTaskIncrementTick+0x168>)
 8005736:	441a      	add	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	3304      	adds	r3, #4
 800573c:	4619      	mov	r1, r3
 800573e:	4610      	mov	r0, r2
 8005740:	f7ff fbd8 	bl	8004ef4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005748:	4b1b      	ldr	r3, [pc, #108]	@ (80057b8 <xTaskIncrementTick+0x16c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574e:	429a      	cmp	r2, r3
 8005750:	d3b9      	bcc.n	80056c6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8005752:	2301      	movs	r3, #1
 8005754:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005756:	e7b6      	b.n	80056c6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005758:	4b17      	ldr	r3, [pc, #92]	@ (80057b8 <xTaskIncrementTick+0x16c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800575e:	4915      	ldr	r1, [pc, #84]	@ (80057b4 <xTaskIncrementTick+0x168>)
 8005760:	4613      	mov	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d907      	bls.n	8005780 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005770:	2301      	movs	r3, #1
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e004      	b.n	8005780 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005776:	4b11      	ldr	r3, [pc, #68]	@ (80057bc <xTaskIncrementTick+0x170>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3301      	adds	r3, #1
 800577c:	4a0f      	ldr	r2, [pc, #60]	@ (80057bc <xTaskIncrementTick+0x170>)
 800577e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005780:	4b0f      	ldr	r3, [pc, #60]	@ (80057c0 <xTaskIncrementTick+0x174>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005788:	2301      	movs	r3, #1
 800578a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800578c:	697b      	ldr	r3, [r7, #20]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20000524 	.word	0x20000524
 800579c:	20000508 	.word	0x20000508
 80057a0:	200004d4 	.word	0x200004d4
 80057a4:	200004d8 	.word	0x200004d8
 80057a8:	2000051c 	.word	0x2000051c
 80057ac:	20000520 	.word	0x20000520
 80057b0:	2000050c 	.word	0x2000050c
 80057b4:	20000448 	.word	0x20000448
 80057b8:	20000444 	.word	0x20000444
 80057bc:	20000514 	.word	0x20000514
 80057c0:	20000518 	.word	0x20000518

080057c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057ca:	4b28      	ldr	r3, [pc, #160]	@ (800586c <vTaskSwitchContext+0xa8>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057d2:	4b27      	ldr	r3, [pc, #156]	@ (8005870 <vTaskSwitchContext+0xac>)
 80057d4:	2201      	movs	r2, #1
 80057d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057d8:	e042      	b.n	8005860 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80057da:	4b25      	ldr	r3, [pc, #148]	@ (8005870 <vTaskSwitchContext+0xac>)
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057e0:	4b24      	ldr	r3, [pc, #144]	@ (8005874 <vTaskSwitchContext+0xb0>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	fab3 f383 	clz	r3, r3
 80057ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80057ee:	7afb      	ldrb	r3, [r7, #11]
 80057f0:	f1c3 031f 	rsb	r3, r3, #31
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	4920      	ldr	r1, [pc, #128]	@ (8005878 <vTaskSwitchContext+0xb4>)
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	440b      	add	r3, r1
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10d      	bne.n	8005826 <vTaskSwitchContext+0x62>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580e:	b672      	cpsid	i
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	b662      	cpsie	i
 800581e:	607b      	str	r3, [r7, #4]
}
 8005820:	bf00      	nop
 8005822:	bf00      	nop
 8005824:	e7fd      	b.n	8005822 <vTaskSwitchContext+0x5e>
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4a11      	ldr	r2, [pc, #68]	@ (8005878 <vTaskSwitchContext+0xb4>)
 8005832:	4413      	add	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	605a      	str	r2, [r3, #4]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	3308      	adds	r3, #8
 8005848:	429a      	cmp	r2, r3
 800584a:	d104      	bne.n	8005856 <vTaskSwitchContext+0x92>
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	605a      	str	r2, [r3, #4]
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	4a07      	ldr	r2, [pc, #28]	@ (800587c <vTaskSwitchContext+0xb8>)
 800585e:	6013      	str	r3, [r2, #0]
}
 8005860:	bf00      	nop
 8005862:	371c      	adds	r7, #28
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	20000524 	.word	0x20000524
 8005870:	20000518 	.word	0x20000518
 8005874:	2000050c 	.word	0x2000050c
 8005878:	20000448 	.word	0x20000448
 800587c:	20000444 	.word	0x20000444

08005880 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10d      	bne.n	80058ac <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005894:	b672      	cpsid	i
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	b662      	cpsie	i
 80058a4:	60fb      	str	r3, [r7, #12]
}
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	e7fd      	b.n	80058a8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058ac:	4b07      	ldr	r3, [pc, #28]	@ (80058cc <vTaskPlaceOnEventList+0x4c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3318      	adds	r3, #24
 80058b2:	4619      	mov	r1, r3
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff fb41 	bl	8004f3c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058ba:	2101      	movs	r1, #1
 80058bc:	6838      	ldr	r0, [r7, #0]
 80058be:	f000 f9c1 	bl	8005c44 <prvAddCurrentTaskToDelayedList>
}
 80058c2:	bf00      	nop
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20000444 	.word	0x20000444

080058d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10d      	bne.n	8005902 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80058e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ea:	b672      	cpsid	i
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	b662      	cpsie	i
 80058fa:	60fb      	str	r3, [r7, #12]
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	e7fd      	b.n	80058fe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	3318      	adds	r3, #24
 8005906:	4618      	mov	r0, r3
 8005908:	f7ff fb51 	bl	8004fae <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800590c:	4b1d      	ldr	r3, [pc, #116]	@ (8005984 <xTaskRemoveFromEventList+0xb4>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d11c      	bne.n	800594e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	3304      	adds	r3, #4
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff fb48 	bl	8004fae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005922:	2201      	movs	r2, #1
 8005924:	409a      	lsls	r2, r3
 8005926:	4b18      	ldr	r3, [pc, #96]	@ (8005988 <xTaskRemoveFromEventList+0xb8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4313      	orrs	r3, r2
 800592c:	4a16      	ldr	r2, [pc, #88]	@ (8005988 <xTaskRemoveFromEventList+0xb8>)
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4a13      	ldr	r2, [pc, #76]	@ (800598c <xTaskRemoveFromEventList+0xbc>)
 800593e:	441a      	add	r2, r3
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	3304      	adds	r3, #4
 8005944:	4619      	mov	r1, r3
 8005946:	4610      	mov	r0, r2
 8005948:	f7ff fad4 	bl	8004ef4 <vListInsertEnd>
 800594c:	e005      	b.n	800595a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	3318      	adds	r3, #24
 8005952:	4619      	mov	r1, r3
 8005954:	480e      	ldr	r0, [pc, #56]	@ (8005990 <xTaskRemoveFromEventList+0xc0>)
 8005956:	f7ff facd 	bl	8004ef4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595e:	4b0d      	ldr	r3, [pc, #52]	@ (8005994 <xTaskRemoveFromEventList+0xc4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005964:	429a      	cmp	r2, r3
 8005966:	d905      	bls.n	8005974 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005968:	2301      	movs	r3, #1
 800596a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800596c:	4b0a      	ldr	r3, [pc, #40]	@ (8005998 <xTaskRemoveFromEventList+0xc8>)
 800596e:	2201      	movs	r2, #1
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	e001      	b.n	8005978 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005974:	2300      	movs	r3, #0
 8005976:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005978:	697b      	ldr	r3, [r7, #20]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20000524 	.word	0x20000524
 8005988:	2000050c 	.word	0x2000050c
 800598c:	20000448 	.word	0x20000448
 8005990:	200004dc 	.word	0x200004dc
 8005994:	20000444 	.word	0x20000444
 8005998:	20000518 	.word	0x20000518

0800599c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059a4:	4b06      	ldr	r3, [pc, #24]	@ (80059c0 <vTaskInternalSetTimeOutState+0x24>)
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059ac:	4b05      	ldr	r3, [pc, #20]	@ (80059c4 <vTaskInternalSetTimeOutState+0x28>)
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	605a      	str	r2, [r3, #4]
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	2000051c 	.word	0x2000051c
 80059c4:	20000508 	.word	0x20000508

080059c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10d      	bne.n	80059f4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059dc:	b672      	cpsid	i
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	b662      	cpsie	i
 80059ec:	613b      	str	r3, [r7, #16]
}
 80059ee:	bf00      	nop
 80059f0:	bf00      	nop
 80059f2:	e7fd      	b.n	80059f0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10d      	bne.n	8005a16 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fe:	b672      	cpsid	i
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	b662      	cpsie	i
 8005a0e:	60fb      	str	r3, [r7, #12]
}
 8005a10:	bf00      	nop
 8005a12:	bf00      	nop
 8005a14:	e7fd      	b.n	8005a12 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8005a16:	f000 f98f 	bl	8005d38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8005a90 <xTaskCheckForTimeOut+0xc8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a32:	d102      	bne.n	8005a3a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61fb      	str	r3, [r7, #28]
 8005a38:	e023      	b.n	8005a82 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	4b15      	ldr	r3, [pc, #84]	@ (8005a94 <xTaskCheckForTimeOut+0xcc>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d007      	beq.n	8005a56 <xTaskCheckForTimeOut+0x8e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d302      	bcc.n	8005a56 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a50:	2301      	movs	r3, #1
 8005a52:	61fb      	str	r3, [r7, #28]
 8005a54:	e015      	b.n	8005a82 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d20b      	bcs.n	8005a78 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	1ad2      	subs	r2, r2, r3
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff ff95 	bl	800599c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a72:	2300      	movs	r3, #0
 8005a74:	61fb      	str	r3, [r7, #28]
 8005a76:	e004      	b.n	8005a82 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a82:	f000 f98f 	bl	8005da4 <vPortExitCritical>

	return xReturn;
 8005a86:	69fb      	ldr	r3, [r7, #28]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3720      	adds	r7, #32
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20000508 	.word	0x20000508
 8005a94:	2000051c 	.word	0x2000051c

08005a98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a9c:	4b03      	ldr	r3, [pc, #12]	@ (8005aac <vTaskMissedYield+0x14>)
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]
}
 8005aa2:	bf00      	nop
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	20000518 	.word	0x20000518

08005ab0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae8 <prvResetNextTaskUnblockTime+0x38>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d104      	bne.n	8005aca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8005aec <prvResetNextTaskUnblockTime+0x3c>)
 8005ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ac8:	e008      	b.n	8005adc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aca:	4b07      	ldr	r3, [pc, #28]	@ (8005ae8 <prvResetNextTaskUnblockTime+0x38>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	4a04      	ldr	r2, [pc, #16]	@ (8005aec <prvResetNextTaskUnblockTime+0x3c>)
 8005ada:	6013      	str	r3, [r2, #0]
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	200004d4 	.word	0x200004d4
 8005aec:	20000520 	.word	0x20000520

08005af0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005af6:	4b0b      	ldr	r3, [pc, #44]	@ (8005b24 <xTaskGetSchedulerState+0x34>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d102      	bne.n	8005b04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005afe:	2301      	movs	r3, #1
 8005b00:	607b      	str	r3, [r7, #4]
 8005b02:	e008      	b.n	8005b16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b04:	4b08      	ldr	r3, [pc, #32]	@ (8005b28 <xTaskGetSchedulerState+0x38>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d102      	bne.n	8005b12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	607b      	str	r3, [r7, #4]
 8005b10:	e001      	b.n	8005b16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b12:	2300      	movs	r3, #0
 8005b14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b16:	687b      	ldr	r3, [r7, #4]
	}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	20000510 	.word	0x20000510
 8005b28:	20000524 	.word	0x20000524

08005b2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d074      	beq.n	8005c2c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b42:	4b3d      	ldr	r3, [pc, #244]	@ (8005c38 <xTaskPriorityDisinherit+0x10c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d00d      	beq.n	8005b68 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b50:	b672      	cpsid	i
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	b662      	cpsie	i
 8005b60:	60fb      	str	r3, [r7, #12]
}
 8005b62:	bf00      	nop
 8005b64:	bf00      	nop
 8005b66:	e7fd      	b.n	8005b64 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10d      	bne.n	8005b8c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b74:	b672      	cpsid	i
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	b662      	cpsie	i
 8005b84:	60bb      	str	r3, [r7, #8]
}
 8005b86:	bf00      	nop
 8005b88:	bf00      	nop
 8005b8a:	e7fd      	b.n	8005b88 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b90:	1e5a      	subs	r2, r3, #1
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d044      	beq.n	8005c2c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d140      	bne.n	8005c2c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	3304      	adds	r3, #4
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff f9fd 	bl	8004fae <uxListRemove>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d115      	bne.n	8005be6 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bbe:	491f      	ldr	r1, [pc, #124]	@ (8005c3c <xTaskPriorityDisinherit+0x110>)
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	440b      	add	r3, r1
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <xTaskPriorityDisinherit+0xba>
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bda:	43da      	mvns	r2, r3
 8005bdc:	4b18      	ldr	r3, [pc, #96]	@ (8005c40 <xTaskPriorityDisinherit+0x114>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4013      	ands	r3, r2
 8005be2:	4a17      	ldr	r2, [pc, #92]	@ (8005c40 <xTaskPriorityDisinherit+0x114>)
 8005be4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf2:	f1c3 0207 	rsb	r2, r3, #7
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfe:	2201      	movs	r2, #1
 8005c00:	409a      	lsls	r2, r3
 8005c02:	4b0f      	ldr	r3, [pc, #60]	@ (8005c40 <xTaskPriorityDisinherit+0x114>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	4a0d      	ldr	r2, [pc, #52]	@ (8005c40 <xTaskPriorityDisinherit+0x114>)
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4a08      	ldr	r2, [pc, #32]	@ (8005c3c <xTaskPriorityDisinherit+0x110>)
 8005c1a:	441a      	add	r2, r3
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	4619      	mov	r1, r3
 8005c22:	4610      	mov	r0, r2
 8005c24:	f7ff f966 	bl	8004ef4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c2c:	697b      	ldr	r3, [r7, #20]
	}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20000444 	.word	0x20000444
 8005c3c:	20000448 	.word	0x20000448
 8005c40:	2000050c 	.word	0x2000050c

08005c44 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c4e:	4b29      	ldr	r3, [pc, #164]	@ (8005cf4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c54:	4b28      	ldr	r3, [pc, #160]	@ (8005cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3304      	adds	r3, #4
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff f9a7 	bl	8004fae <uxListRemove>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10b      	bne.n	8005c7e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005c66:	4b24      	ldr	r3, [pc, #144]	@ (8005cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c72:	43da      	mvns	r2, r3
 8005c74:	4b21      	ldr	r3, [pc, #132]	@ (8005cfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	4a20      	ldr	r2, [pc, #128]	@ (8005cfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c7c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c84:	d10a      	bne.n	8005c9c <prvAddCurrentTaskToDelayedList+0x58>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d007      	beq.n	8005c9c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8005cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4619      	mov	r1, r3
 8005c94:	481a      	ldr	r0, [pc, #104]	@ (8005d00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005c96:	f7ff f92d 	bl	8004ef4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c9a:	e026      	b.n	8005cea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ca4:	4b14      	ldr	r3, [pc, #80]	@ (8005cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d209      	bcs.n	8005cc8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cb4:	4b13      	ldr	r3, [pc, #76]	@ (8005d04 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8005cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	f7ff f93b 	bl	8004f3c <vListInsert>
}
 8005cc6:	e010      	b.n	8005cea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8005d08 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	f7ff f931 	bl	8004f3c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cda:	4b0c      	ldr	r3, [pc, #48]	@ (8005d0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d202      	bcs.n	8005cea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005ce4:	4a09      	ldr	r2, [pc, #36]	@ (8005d0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	6013      	str	r3, [r2, #0]
}
 8005cea:	bf00      	nop
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000508 	.word	0x20000508
 8005cf8:	20000444 	.word	0x20000444
 8005cfc:	2000050c 	.word	0x2000050c
 8005d00:	200004f0 	.word	0x200004f0
 8005d04:	200004d8 	.word	0x200004d8
 8005d08:	200004d4 	.word	0x200004d4
 8005d0c:	20000520 	.word	0x20000520

08005d10 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d10:	4b07      	ldr	r3, [pc, #28]	@ (8005d30 <pxCurrentTCBConst2>)
 8005d12:	6819      	ldr	r1, [r3, #0]
 8005d14:	6808      	ldr	r0, [r1, #0]
 8005d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1a:	f380 8809 	msr	PSP, r0
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f04f 0000 	mov.w	r0, #0
 8005d26:	f380 8811 	msr	BASEPRI, r0
 8005d2a:	4770      	bx	lr
 8005d2c:	f3af 8000 	nop.w

08005d30 <pxCurrentTCBConst2>:
 8005d30:	20000444 	.word	0x20000444
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop

08005d38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d42:	b672      	cpsid	i
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	b662      	cpsie	i
 8005d52:	607b      	str	r3, [r7, #4]
}
 8005d54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d56:	4b11      	ldr	r3, [pc, #68]	@ (8005d9c <vPortEnterCritical+0x64>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	4a0f      	ldr	r2, [pc, #60]	@ (8005d9c <vPortEnterCritical+0x64>)
 8005d5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d60:	4b0e      	ldr	r3, [pc, #56]	@ (8005d9c <vPortEnterCritical+0x64>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d112      	bne.n	8005d8e <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d68:	4b0d      	ldr	r3, [pc, #52]	@ (8005da0 <vPortEnterCritical+0x68>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00d      	beq.n	8005d8e <vPortEnterCritical+0x56>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d76:	b672      	cpsid	i
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	b662      	cpsie	i
 8005d86:	603b      	str	r3, [r7, #0]
}
 8005d88:	bf00      	nop
 8005d8a:	bf00      	nop
 8005d8c:	e7fd      	b.n	8005d8a <vPortEnterCritical+0x52>
	}
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	2000000c 	.word	0x2000000c
 8005da0:	e000ed04 	.word	0xe000ed04

08005da4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005daa:	4b13      	ldr	r3, [pc, #76]	@ (8005df8 <vPortExitCritical+0x54>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10d      	bne.n	8005dce <vPortExitCritical+0x2a>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db6:	b672      	cpsid	i
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	b662      	cpsie	i
 8005dc6:	607b      	str	r3, [r7, #4]
}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	e7fd      	b.n	8005dca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005dce:	4b0a      	ldr	r3, [pc, #40]	@ (8005df8 <vPortExitCritical+0x54>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	4a08      	ldr	r2, [pc, #32]	@ (8005df8 <vPortExitCritical+0x54>)
 8005dd6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005dd8:	4b07      	ldr	r3, [pc, #28]	@ (8005df8 <vPortExitCritical+0x54>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d105      	bne.n	8005dec <vPortExitCritical+0x48>
 8005de0:	2300      	movs	r3, #0
 8005de2:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	f383 8811 	msr	BASEPRI, r3
}
 8005dea:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	2000000c 	.word	0x2000000c
 8005dfc:	00000000 	.word	0x00000000

08005e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e00:	f3ef 8009 	mrs	r0, PSP
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	4b15      	ldr	r3, [pc, #84]	@ (8005e60 <pxCurrentTCBConst>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	f01e 0f10 	tst.w	lr, #16
 8005e10:	bf08      	it	eq
 8005e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1a:	6010      	str	r0, [r2, #0]
 8005e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005e24:	b672      	cpsid	i
 8005e26:	f380 8811 	msr	BASEPRI, r0
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	b662      	cpsie	i
 8005e34:	f7ff fcc6 	bl	80057c4 <vTaskSwitchContext>
 8005e38:	f04f 0000 	mov.w	r0, #0
 8005e3c:	f380 8811 	msr	BASEPRI, r0
 8005e40:	bc09      	pop	{r0, r3}
 8005e42:	6819      	ldr	r1, [r3, #0]
 8005e44:	6808      	ldr	r0, [r1, #0]
 8005e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4a:	f01e 0f10 	tst.w	lr, #16
 8005e4e:	bf08      	it	eq
 8005e50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e54:	f380 8809 	msr	PSP, r0
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop

08005e60 <pxCurrentTCBConst>:
 8005e60:	20000444 	.word	0x20000444
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop

08005e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e72:	b672      	cpsid	i
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	b662      	cpsie	i
 8005e82:	607b      	str	r3, [r7, #4]
}
 8005e84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e86:	f7ff fbe1 	bl	800564c <xTaskIncrementTick>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e90:	4b06      	ldr	r3, [pc, #24]	@ (8005eac <SysTick_Handler+0x44>)
 8005e92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	f383 8811 	msr	BASEPRI, r3
}
 8005ea2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ea4:	bf00      	nop
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	e000ed04 	.word	0xe000ed04

08005eb0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005eb6:	f3ef 8305 	mrs	r3, IPSR
 8005eba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b0f      	cmp	r3, #15
 8005ec0:	d917      	bls.n	8005ef2 <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8005f2c <vPortValidateInterruptPriority+0x7c>)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ecc:	4b18      	ldr	r3, [pc, #96]	@ (8005f30 <vPortValidateInterruptPriority+0x80>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	7afa      	ldrb	r2, [r7, #11]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d20d      	bcs.n	8005ef2 <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eda:	b672      	cpsid	i
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	b662      	cpsie	i
 8005eea:	607b      	str	r3, [r7, #4]
}
 8005eec:	bf00      	nop
 8005eee:	bf00      	nop
 8005ef0:	e7fd      	b.n	8005eee <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ef2:	4b10      	ldr	r3, [pc, #64]	@ (8005f34 <vPortValidateInterruptPriority+0x84>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005efa:	4b0f      	ldr	r3, [pc, #60]	@ (8005f38 <vPortValidateInterruptPriority+0x88>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d90d      	bls.n	8005f1e <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f06:	b672      	cpsid	i
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	b662      	cpsie	i
 8005f16:	603b      	str	r3, [r7, #0]
}
 8005f18:	bf00      	nop
 8005f1a:	bf00      	nop
 8005f1c:	e7fd      	b.n	8005f1a <vPortValidateInterruptPriority+0x6a>
	}
 8005f1e:	bf00      	nop
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	e000e3f0 	.word	0xe000e3f0
 8005f30:	20000528 	.word	0x20000528
 8005f34:	e000ed0c 	.word	0xe000ed0c
 8005f38:	2000052c 	.word	0x2000052c

08005f3c <__cvt>:
 8005f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f3e:	ed2d 8b02 	vpush	{d8}
 8005f42:	eeb0 8b40 	vmov.f64	d8, d0
 8005f46:	b085      	sub	sp, #20
 8005f48:	4617      	mov	r7, r2
 8005f4a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8005f4c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f4e:	ee18 2a90 	vmov	r2, s17
 8005f52:	f025 0520 	bic.w	r5, r5, #32
 8005f56:	2a00      	cmp	r2, #0
 8005f58:	bfb6      	itet	lt
 8005f5a:	222d      	movlt	r2, #45	@ 0x2d
 8005f5c:	2200      	movge	r2, #0
 8005f5e:	eeb1 8b40 	vneglt.f64	d8, d0
 8005f62:	2d46      	cmp	r5, #70	@ 0x46
 8005f64:	460c      	mov	r4, r1
 8005f66:	701a      	strb	r2, [r3, #0]
 8005f68:	d004      	beq.n	8005f74 <__cvt+0x38>
 8005f6a:	2d45      	cmp	r5, #69	@ 0x45
 8005f6c:	d100      	bne.n	8005f70 <__cvt+0x34>
 8005f6e:	3401      	adds	r4, #1
 8005f70:	2102      	movs	r1, #2
 8005f72:	e000      	b.n	8005f76 <__cvt+0x3a>
 8005f74:	2103      	movs	r1, #3
 8005f76:	ab03      	add	r3, sp, #12
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	ab02      	add	r3, sp, #8
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	4622      	mov	r2, r4
 8005f80:	4633      	mov	r3, r6
 8005f82:	eeb0 0b48 	vmov.f64	d0, d8
 8005f86:	f000 fff3 	bl	8006f70 <_dtoa_r>
 8005f8a:	2d47      	cmp	r5, #71	@ 0x47
 8005f8c:	d114      	bne.n	8005fb8 <__cvt+0x7c>
 8005f8e:	07fb      	lsls	r3, r7, #31
 8005f90:	d50a      	bpl.n	8005fa8 <__cvt+0x6c>
 8005f92:	1902      	adds	r2, r0, r4
 8005f94:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f9c:	bf08      	it	eq
 8005f9e:	9203      	streq	r2, [sp, #12]
 8005fa0:	2130      	movs	r1, #48	@ 0x30
 8005fa2:	9b03      	ldr	r3, [sp, #12]
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d319      	bcc.n	8005fdc <__cvt+0xa0>
 8005fa8:	9b03      	ldr	r3, [sp, #12]
 8005faa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005fac:	1a1b      	subs	r3, r3, r0
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	b005      	add	sp, #20
 8005fb2:	ecbd 8b02 	vpop	{d8}
 8005fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fb8:	2d46      	cmp	r5, #70	@ 0x46
 8005fba:	eb00 0204 	add.w	r2, r0, r4
 8005fbe:	d1e9      	bne.n	8005f94 <__cvt+0x58>
 8005fc0:	7803      	ldrb	r3, [r0, #0]
 8005fc2:	2b30      	cmp	r3, #48	@ 0x30
 8005fc4:	d107      	bne.n	8005fd6 <__cvt+0x9a>
 8005fc6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fce:	bf1c      	itt	ne
 8005fd0:	f1c4 0401 	rsbne	r4, r4, #1
 8005fd4:	6034      	strne	r4, [r6, #0]
 8005fd6:	6833      	ldr	r3, [r6, #0]
 8005fd8:	441a      	add	r2, r3
 8005fda:	e7db      	b.n	8005f94 <__cvt+0x58>
 8005fdc:	1c5c      	adds	r4, r3, #1
 8005fde:	9403      	str	r4, [sp, #12]
 8005fe0:	7019      	strb	r1, [r3, #0]
 8005fe2:	e7de      	b.n	8005fa2 <__cvt+0x66>

08005fe4 <__exponent>:
 8005fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fe6:	2900      	cmp	r1, #0
 8005fe8:	bfba      	itte	lt
 8005fea:	4249      	neglt	r1, r1
 8005fec:	232d      	movlt	r3, #45	@ 0x2d
 8005fee:	232b      	movge	r3, #43	@ 0x2b
 8005ff0:	2909      	cmp	r1, #9
 8005ff2:	7002      	strb	r2, [r0, #0]
 8005ff4:	7043      	strb	r3, [r0, #1]
 8005ff6:	dd29      	ble.n	800604c <__exponent+0x68>
 8005ff8:	f10d 0307 	add.w	r3, sp, #7
 8005ffc:	461d      	mov	r5, r3
 8005ffe:	270a      	movs	r7, #10
 8006000:	461a      	mov	r2, r3
 8006002:	fbb1 f6f7 	udiv	r6, r1, r7
 8006006:	fb07 1416 	mls	r4, r7, r6, r1
 800600a:	3430      	adds	r4, #48	@ 0x30
 800600c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006010:	460c      	mov	r4, r1
 8006012:	2c63      	cmp	r4, #99	@ 0x63
 8006014:	f103 33ff 	add.w	r3, r3, #4294967295
 8006018:	4631      	mov	r1, r6
 800601a:	dcf1      	bgt.n	8006000 <__exponent+0x1c>
 800601c:	3130      	adds	r1, #48	@ 0x30
 800601e:	1e94      	subs	r4, r2, #2
 8006020:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006024:	1c41      	adds	r1, r0, #1
 8006026:	4623      	mov	r3, r4
 8006028:	42ab      	cmp	r3, r5
 800602a:	d30a      	bcc.n	8006042 <__exponent+0x5e>
 800602c:	f10d 0309 	add.w	r3, sp, #9
 8006030:	1a9b      	subs	r3, r3, r2
 8006032:	42ac      	cmp	r4, r5
 8006034:	bf88      	it	hi
 8006036:	2300      	movhi	r3, #0
 8006038:	3302      	adds	r3, #2
 800603a:	4403      	add	r3, r0
 800603c:	1a18      	subs	r0, r3, r0
 800603e:	b003      	add	sp, #12
 8006040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006042:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006046:	f801 6f01 	strb.w	r6, [r1, #1]!
 800604a:	e7ed      	b.n	8006028 <__exponent+0x44>
 800604c:	2330      	movs	r3, #48	@ 0x30
 800604e:	3130      	adds	r1, #48	@ 0x30
 8006050:	7083      	strb	r3, [r0, #2]
 8006052:	70c1      	strb	r1, [r0, #3]
 8006054:	1d03      	adds	r3, r0, #4
 8006056:	e7f1      	b.n	800603c <__exponent+0x58>

08006058 <_printf_float>:
 8006058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	b08d      	sub	sp, #52	@ 0x34
 800605e:	460c      	mov	r4, r1
 8006060:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006064:	4616      	mov	r6, r2
 8006066:	461f      	mov	r7, r3
 8006068:	4605      	mov	r5, r0
 800606a:	f000 fe59 	bl	8006d20 <_localeconv_r>
 800606e:	f8d0 b000 	ldr.w	fp, [r0]
 8006072:	4658      	mov	r0, fp
 8006074:	f7fa f934 	bl	80002e0 <strlen>
 8006078:	2300      	movs	r3, #0
 800607a:	930a      	str	r3, [sp, #40]	@ 0x28
 800607c:	f8d8 3000 	ldr.w	r3, [r8]
 8006080:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006084:	6822      	ldr	r2, [r4, #0]
 8006086:	9005      	str	r0, [sp, #20]
 8006088:	3307      	adds	r3, #7
 800608a:	f023 0307 	bic.w	r3, r3, #7
 800608e:	f103 0108 	add.w	r1, r3, #8
 8006092:	f8c8 1000 	str.w	r1, [r8]
 8006096:	ed93 0b00 	vldr	d0, [r3]
 800609a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80062f8 <_printf_float+0x2a0>
 800609e:	eeb0 7bc0 	vabs.f64	d7, d0
 80060a2:	eeb4 7b46 	vcmp.f64	d7, d6
 80060a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060aa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80060ae:	dd24      	ble.n	80060fa <_printf_float+0xa2>
 80060b0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80060b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060b8:	d502      	bpl.n	80060c0 <_printf_float+0x68>
 80060ba:	232d      	movs	r3, #45	@ 0x2d
 80060bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060c0:	498f      	ldr	r1, [pc, #572]	@ (8006300 <_printf_float+0x2a8>)
 80060c2:	4b90      	ldr	r3, [pc, #576]	@ (8006304 <_printf_float+0x2ac>)
 80060c4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80060c8:	bf94      	ite	ls
 80060ca:	4688      	movls	r8, r1
 80060cc:	4698      	movhi	r8, r3
 80060ce:	f022 0204 	bic.w	r2, r2, #4
 80060d2:	2303      	movs	r3, #3
 80060d4:	6123      	str	r3, [r4, #16]
 80060d6:	6022      	str	r2, [r4, #0]
 80060d8:	f04f 0a00 	mov.w	sl, #0
 80060dc:	9700      	str	r7, [sp, #0]
 80060de:	4633      	mov	r3, r6
 80060e0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80060e2:	4621      	mov	r1, r4
 80060e4:	4628      	mov	r0, r5
 80060e6:	f000 f9d1 	bl	800648c <_printf_common>
 80060ea:	3001      	adds	r0, #1
 80060ec:	f040 8089 	bne.w	8006202 <_printf_float+0x1aa>
 80060f0:	f04f 30ff 	mov.w	r0, #4294967295
 80060f4:	b00d      	add	sp, #52	@ 0x34
 80060f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fa:	eeb4 0b40 	vcmp.f64	d0, d0
 80060fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006102:	d709      	bvc.n	8006118 <_printf_float+0xc0>
 8006104:	ee10 3a90 	vmov	r3, s1
 8006108:	2b00      	cmp	r3, #0
 800610a:	bfbc      	itt	lt
 800610c:	232d      	movlt	r3, #45	@ 0x2d
 800610e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006112:	497d      	ldr	r1, [pc, #500]	@ (8006308 <_printf_float+0x2b0>)
 8006114:	4b7d      	ldr	r3, [pc, #500]	@ (800630c <_printf_float+0x2b4>)
 8006116:	e7d5      	b.n	80060c4 <_printf_float+0x6c>
 8006118:	6863      	ldr	r3, [r4, #4]
 800611a:	1c59      	adds	r1, r3, #1
 800611c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006120:	d139      	bne.n	8006196 <_printf_float+0x13e>
 8006122:	2306      	movs	r3, #6
 8006124:	6063      	str	r3, [r4, #4]
 8006126:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800612a:	2300      	movs	r3, #0
 800612c:	6022      	str	r2, [r4, #0]
 800612e:	9303      	str	r3, [sp, #12]
 8006130:	ab0a      	add	r3, sp, #40	@ 0x28
 8006132:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006136:	ab09      	add	r3, sp, #36	@ 0x24
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	6861      	ldr	r1, [r4, #4]
 800613c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006140:	4628      	mov	r0, r5
 8006142:	f7ff fefb 	bl	8005f3c <__cvt>
 8006146:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800614a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800614c:	4680      	mov	r8, r0
 800614e:	d129      	bne.n	80061a4 <_printf_float+0x14c>
 8006150:	1cc8      	adds	r0, r1, #3
 8006152:	db02      	blt.n	800615a <_printf_float+0x102>
 8006154:	6863      	ldr	r3, [r4, #4]
 8006156:	4299      	cmp	r1, r3
 8006158:	dd41      	ble.n	80061de <_printf_float+0x186>
 800615a:	f1a9 0902 	sub.w	r9, r9, #2
 800615e:	fa5f f989 	uxtb.w	r9, r9
 8006162:	3901      	subs	r1, #1
 8006164:	464a      	mov	r2, r9
 8006166:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800616a:	9109      	str	r1, [sp, #36]	@ 0x24
 800616c:	f7ff ff3a 	bl	8005fe4 <__exponent>
 8006170:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006172:	1813      	adds	r3, r2, r0
 8006174:	2a01      	cmp	r2, #1
 8006176:	4682      	mov	sl, r0
 8006178:	6123      	str	r3, [r4, #16]
 800617a:	dc02      	bgt.n	8006182 <_printf_float+0x12a>
 800617c:	6822      	ldr	r2, [r4, #0]
 800617e:	07d2      	lsls	r2, r2, #31
 8006180:	d501      	bpl.n	8006186 <_printf_float+0x12e>
 8006182:	3301      	adds	r3, #1
 8006184:	6123      	str	r3, [r4, #16]
 8006186:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0a6      	beq.n	80060dc <_printf_float+0x84>
 800618e:	232d      	movs	r3, #45	@ 0x2d
 8006190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006194:	e7a2      	b.n	80060dc <_printf_float+0x84>
 8006196:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800619a:	d1c4      	bne.n	8006126 <_printf_float+0xce>
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1c2      	bne.n	8006126 <_printf_float+0xce>
 80061a0:	2301      	movs	r3, #1
 80061a2:	e7bf      	b.n	8006124 <_printf_float+0xcc>
 80061a4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80061a8:	d9db      	bls.n	8006162 <_printf_float+0x10a>
 80061aa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80061ae:	d118      	bne.n	80061e2 <_printf_float+0x18a>
 80061b0:	2900      	cmp	r1, #0
 80061b2:	6863      	ldr	r3, [r4, #4]
 80061b4:	dd0b      	ble.n	80061ce <_printf_float+0x176>
 80061b6:	6121      	str	r1, [r4, #16]
 80061b8:	b913      	cbnz	r3, 80061c0 <_printf_float+0x168>
 80061ba:	6822      	ldr	r2, [r4, #0]
 80061bc:	07d0      	lsls	r0, r2, #31
 80061be:	d502      	bpl.n	80061c6 <_printf_float+0x16e>
 80061c0:	3301      	adds	r3, #1
 80061c2:	440b      	add	r3, r1
 80061c4:	6123      	str	r3, [r4, #16]
 80061c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80061c8:	f04f 0a00 	mov.w	sl, #0
 80061cc:	e7db      	b.n	8006186 <_printf_float+0x12e>
 80061ce:	b913      	cbnz	r3, 80061d6 <_printf_float+0x17e>
 80061d0:	6822      	ldr	r2, [r4, #0]
 80061d2:	07d2      	lsls	r2, r2, #31
 80061d4:	d501      	bpl.n	80061da <_printf_float+0x182>
 80061d6:	3302      	adds	r3, #2
 80061d8:	e7f4      	b.n	80061c4 <_printf_float+0x16c>
 80061da:	2301      	movs	r3, #1
 80061dc:	e7f2      	b.n	80061c4 <_printf_float+0x16c>
 80061de:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80061e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061e4:	4299      	cmp	r1, r3
 80061e6:	db05      	blt.n	80061f4 <_printf_float+0x19c>
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	6121      	str	r1, [r4, #16]
 80061ec:	07d8      	lsls	r0, r3, #31
 80061ee:	d5ea      	bpl.n	80061c6 <_printf_float+0x16e>
 80061f0:	1c4b      	adds	r3, r1, #1
 80061f2:	e7e7      	b.n	80061c4 <_printf_float+0x16c>
 80061f4:	2900      	cmp	r1, #0
 80061f6:	bfd4      	ite	le
 80061f8:	f1c1 0202 	rsble	r2, r1, #2
 80061fc:	2201      	movgt	r2, #1
 80061fe:	4413      	add	r3, r2
 8006200:	e7e0      	b.n	80061c4 <_printf_float+0x16c>
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	055a      	lsls	r2, r3, #21
 8006206:	d407      	bmi.n	8006218 <_printf_float+0x1c0>
 8006208:	6923      	ldr	r3, [r4, #16]
 800620a:	4642      	mov	r2, r8
 800620c:	4631      	mov	r1, r6
 800620e:	4628      	mov	r0, r5
 8006210:	47b8      	blx	r7
 8006212:	3001      	adds	r0, #1
 8006214:	d12a      	bne.n	800626c <_printf_float+0x214>
 8006216:	e76b      	b.n	80060f0 <_printf_float+0x98>
 8006218:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800621c:	f240 80e0 	bls.w	80063e0 <_printf_float+0x388>
 8006220:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006224:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622c:	d133      	bne.n	8006296 <_printf_float+0x23e>
 800622e:	4a38      	ldr	r2, [pc, #224]	@ (8006310 <_printf_float+0x2b8>)
 8006230:	2301      	movs	r3, #1
 8006232:	4631      	mov	r1, r6
 8006234:	4628      	mov	r0, r5
 8006236:	47b8      	blx	r7
 8006238:	3001      	adds	r0, #1
 800623a:	f43f af59 	beq.w	80060f0 <_printf_float+0x98>
 800623e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006242:	4543      	cmp	r3, r8
 8006244:	db02      	blt.n	800624c <_printf_float+0x1f4>
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	07d8      	lsls	r0, r3, #31
 800624a:	d50f      	bpl.n	800626c <_printf_float+0x214>
 800624c:	9b05      	ldr	r3, [sp, #20]
 800624e:	465a      	mov	r2, fp
 8006250:	4631      	mov	r1, r6
 8006252:	4628      	mov	r0, r5
 8006254:	47b8      	blx	r7
 8006256:	3001      	adds	r0, #1
 8006258:	f43f af4a 	beq.w	80060f0 <_printf_float+0x98>
 800625c:	f04f 0900 	mov.w	r9, #0
 8006260:	f108 38ff 	add.w	r8, r8, #4294967295
 8006264:	f104 0a1a 	add.w	sl, r4, #26
 8006268:	45c8      	cmp	r8, r9
 800626a:	dc09      	bgt.n	8006280 <_printf_float+0x228>
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	079b      	lsls	r3, r3, #30
 8006270:	f100 8107 	bmi.w	8006482 <_printf_float+0x42a>
 8006274:	68e0      	ldr	r0, [r4, #12]
 8006276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006278:	4298      	cmp	r0, r3
 800627a:	bfb8      	it	lt
 800627c:	4618      	movlt	r0, r3
 800627e:	e739      	b.n	80060f4 <_printf_float+0x9c>
 8006280:	2301      	movs	r3, #1
 8006282:	4652      	mov	r2, sl
 8006284:	4631      	mov	r1, r6
 8006286:	4628      	mov	r0, r5
 8006288:	47b8      	blx	r7
 800628a:	3001      	adds	r0, #1
 800628c:	f43f af30 	beq.w	80060f0 <_printf_float+0x98>
 8006290:	f109 0901 	add.w	r9, r9, #1
 8006294:	e7e8      	b.n	8006268 <_printf_float+0x210>
 8006296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006298:	2b00      	cmp	r3, #0
 800629a:	dc3b      	bgt.n	8006314 <_printf_float+0x2bc>
 800629c:	4a1c      	ldr	r2, [pc, #112]	@ (8006310 <_printf_float+0x2b8>)
 800629e:	2301      	movs	r3, #1
 80062a0:	4631      	mov	r1, r6
 80062a2:	4628      	mov	r0, r5
 80062a4:	47b8      	blx	r7
 80062a6:	3001      	adds	r0, #1
 80062a8:	f43f af22 	beq.w	80060f0 <_printf_float+0x98>
 80062ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80062b0:	ea59 0303 	orrs.w	r3, r9, r3
 80062b4:	d102      	bne.n	80062bc <_printf_float+0x264>
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	07d9      	lsls	r1, r3, #31
 80062ba:	d5d7      	bpl.n	800626c <_printf_float+0x214>
 80062bc:	9b05      	ldr	r3, [sp, #20]
 80062be:	465a      	mov	r2, fp
 80062c0:	4631      	mov	r1, r6
 80062c2:	4628      	mov	r0, r5
 80062c4:	47b8      	blx	r7
 80062c6:	3001      	adds	r0, #1
 80062c8:	f43f af12 	beq.w	80060f0 <_printf_float+0x98>
 80062cc:	f04f 0a00 	mov.w	sl, #0
 80062d0:	f104 0b1a 	add.w	fp, r4, #26
 80062d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062d6:	425b      	negs	r3, r3
 80062d8:	4553      	cmp	r3, sl
 80062da:	dc01      	bgt.n	80062e0 <_printf_float+0x288>
 80062dc:	464b      	mov	r3, r9
 80062de:	e794      	b.n	800620a <_printf_float+0x1b2>
 80062e0:	2301      	movs	r3, #1
 80062e2:	465a      	mov	r2, fp
 80062e4:	4631      	mov	r1, r6
 80062e6:	4628      	mov	r0, r5
 80062e8:	47b8      	blx	r7
 80062ea:	3001      	adds	r0, #1
 80062ec:	f43f af00 	beq.w	80060f0 <_printf_float+0x98>
 80062f0:	f10a 0a01 	add.w	sl, sl, #1
 80062f4:	e7ee      	b.n	80062d4 <_printf_float+0x27c>
 80062f6:	bf00      	nop
 80062f8:	ffffffff 	.word	0xffffffff
 80062fc:	7fefffff 	.word	0x7fefffff
 8006300:	08008ab1 	.word	0x08008ab1
 8006304:	08008ab5 	.word	0x08008ab5
 8006308:	08008ab9 	.word	0x08008ab9
 800630c:	08008abd 	.word	0x08008abd
 8006310:	08008ac1 	.word	0x08008ac1
 8006314:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006316:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800631a:	4553      	cmp	r3, sl
 800631c:	bfa8      	it	ge
 800631e:	4653      	movge	r3, sl
 8006320:	2b00      	cmp	r3, #0
 8006322:	4699      	mov	r9, r3
 8006324:	dc37      	bgt.n	8006396 <_printf_float+0x33e>
 8006326:	2300      	movs	r3, #0
 8006328:	9307      	str	r3, [sp, #28]
 800632a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800632e:	f104 021a 	add.w	r2, r4, #26
 8006332:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006334:	9907      	ldr	r1, [sp, #28]
 8006336:	9306      	str	r3, [sp, #24]
 8006338:	eba3 0309 	sub.w	r3, r3, r9
 800633c:	428b      	cmp	r3, r1
 800633e:	dc31      	bgt.n	80063a4 <_printf_float+0x34c>
 8006340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006342:	459a      	cmp	sl, r3
 8006344:	dc3b      	bgt.n	80063be <_printf_float+0x366>
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	07da      	lsls	r2, r3, #31
 800634a:	d438      	bmi.n	80063be <_printf_float+0x366>
 800634c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800634e:	ebaa 0903 	sub.w	r9, sl, r3
 8006352:	9b06      	ldr	r3, [sp, #24]
 8006354:	ebaa 0303 	sub.w	r3, sl, r3
 8006358:	4599      	cmp	r9, r3
 800635a:	bfa8      	it	ge
 800635c:	4699      	movge	r9, r3
 800635e:	f1b9 0f00 	cmp.w	r9, #0
 8006362:	dc34      	bgt.n	80063ce <_printf_float+0x376>
 8006364:	f04f 0800 	mov.w	r8, #0
 8006368:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800636c:	f104 0b1a 	add.w	fp, r4, #26
 8006370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006372:	ebaa 0303 	sub.w	r3, sl, r3
 8006376:	eba3 0309 	sub.w	r3, r3, r9
 800637a:	4543      	cmp	r3, r8
 800637c:	f77f af76 	ble.w	800626c <_printf_float+0x214>
 8006380:	2301      	movs	r3, #1
 8006382:	465a      	mov	r2, fp
 8006384:	4631      	mov	r1, r6
 8006386:	4628      	mov	r0, r5
 8006388:	47b8      	blx	r7
 800638a:	3001      	adds	r0, #1
 800638c:	f43f aeb0 	beq.w	80060f0 <_printf_float+0x98>
 8006390:	f108 0801 	add.w	r8, r8, #1
 8006394:	e7ec      	b.n	8006370 <_printf_float+0x318>
 8006396:	4642      	mov	r2, r8
 8006398:	4631      	mov	r1, r6
 800639a:	4628      	mov	r0, r5
 800639c:	47b8      	blx	r7
 800639e:	3001      	adds	r0, #1
 80063a0:	d1c1      	bne.n	8006326 <_printf_float+0x2ce>
 80063a2:	e6a5      	b.n	80060f0 <_printf_float+0x98>
 80063a4:	2301      	movs	r3, #1
 80063a6:	4631      	mov	r1, r6
 80063a8:	4628      	mov	r0, r5
 80063aa:	9206      	str	r2, [sp, #24]
 80063ac:	47b8      	blx	r7
 80063ae:	3001      	adds	r0, #1
 80063b0:	f43f ae9e 	beq.w	80060f0 <_printf_float+0x98>
 80063b4:	9b07      	ldr	r3, [sp, #28]
 80063b6:	9a06      	ldr	r2, [sp, #24]
 80063b8:	3301      	adds	r3, #1
 80063ba:	9307      	str	r3, [sp, #28]
 80063bc:	e7b9      	b.n	8006332 <_printf_float+0x2da>
 80063be:	9b05      	ldr	r3, [sp, #20]
 80063c0:	465a      	mov	r2, fp
 80063c2:	4631      	mov	r1, r6
 80063c4:	4628      	mov	r0, r5
 80063c6:	47b8      	blx	r7
 80063c8:	3001      	adds	r0, #1
 80063ca:	d1bf      	bne.n	800634c <_printf_float+0x2f4>
 80063cc:	e690      	b.n	80060f0 <_printf_float+0x98>
 80063ce:	9a06      	ldr	r2, [sp, #24]
 80063d0:	464b      	mov	r3, r9
 80063d2:	4442      	add	r2, r8
 80063d4:	4631      	mov	r1, r6
 80063d6:	4628      	mov	r0, r5
 80063d8:	47b8      	blx	r7
 80063da:	3001      	adds	r0, #1
 80063dc:	d1c2      	bne.n	8006364 <_printf_float+0x30c>
 80063de:	e687      	b.n	80060f0 <_printf_float+0x98>
 80063e0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80063e4:	f1b9 0f01 	cmp.w	r9, #1
 80063e8:	dc01      	bgt.n	80063ee <_printf_float+0x396>
 80063ea:	07db      	lsls	r3, r3, #31
 80063ec:	d536      	bpl.n	800645c <_printf_float+0x404>
 80063ee:	2301      	movs	r3, #1
 80063f0:	4642      	mov	r2, r8
 80063f2:	4631      	mov	r1, r6
 80063f4:	4628      	mov	r0, r5
 80063f6:	47b8      	blx	r7
 80063f8:	3001      	adds	r0, #1
 80063fa:	f43f ae79 	beq.w	80060f0 <_printf_float+0x98>
 80063fe:	9b05      	ldr	r3, [sp, #20]
 8006400:	465a      	mov	r2, fp
 8006402:	4631      	mov	r1, r6
 8006404:	4628      	mov	r0, r5
 8006406:	47b8      	blx	r7
 8006408:	3001      	adds	r0, #1
 800640a:	f43f ae71 	beq.w	80060f0 <_printf_float+0x98>
 800640e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006412:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800641a:	f109 39ff 	add.w	r9, r9, #4294967295
 800641e:	d018      	beq.n	8006452 <_printf_float+0x3fa>
 8006420:	464b      	mov	r3, r9
 8006422:	f108 0201 	add.w	r2, r8, #1
 8006426:	4631      	mov	r1, r6
 8006428:	4628      	mov	r0, r5
 800642a:	47b8      	blx	r7
 800642c:	3001      	adds	r0, #1
 800642e:	d10c      	bne.n	800644a <_printf_float+0x3f2>
 8006430:	e65e      	b.n	80060f0 <_printf_float+0x98>
 8006432:	2301      	movs	r3, #1
 8006434:	465a      	mov	r2, fp
 8006436:	4631      	mov	r1, r6
 8006438:	4628      	mov	r0, r5
 800643a:	47b8      	blx	r7
 800643c:	3001      	adds	r0, #1
 800643e:	f43f ae57 	beq.w	80060f0 <_printf_float+0x98>
 8006442:	f108 0801 	add.w	r8, r8, #1
 8006446:	45c8      	cmp	r8, r9
 8006448:	dbf3      	blt.n	8006432 <_printf_float+0x3da>
 800644a:	4653      	mov	r3, sl
 800644c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006450:	e6dc      	b.n	800620c <_printf_float+0x1b4>
 8006452:	f04f 0800 	mov.w	r8, #0
 8006456:	f104 0b1a 	add.w	fp, r4, #26
 800645a:	e7f4      	b.n	8006446 <_printf_float+0x3ee>
 800645c:	2301      	movs	r3, #1
 800645e:	4642      	mov	r2, r8
 8006460:	e7e1      	b.n	8006426 <_printf_float+0x3ce>
 8006462:	2301      	movs	r3, #1
 8006464:	464a      	mov	r2, r9
 8006466:	4631      	mov	r1, r6
 8006468:	4628      	mov	r0, r5
 800646a:	47b8      	blx	r7
 800646c:	3001      	adds	r0, #1
 800646e:	f43f ae3f 	beq.w	80060f0 <_printf_float+0x98>
 8006472:	f108 0801 	add.w	r8, r8, #1
 8006476:	68e3      	ldr	r3, [r4, #12]
 8006478:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800647a:	1a5b      	subs	r3, r3, r1
 800647c:	4543      	cmp	r3, r8
 800647e:	dcf0      	bgt.n	8006462 <_printf_float+0x40a>
 8006480:	e6f8      	b.n	8006274 <_printf_float+0x21c>
 8006482:	f04f 0800 	mov.w	r8, #0
 8006486:	f104 0919 	add.w	r9, r4, #25
 800648a:	e7f4      	b.n	8006476 <_printf_float+0x41e>

0800648c <_printf_common>:
 800648c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006490:	4616      	mov	r6, r2
 8006492:	4698      	mov	r8, r3
 8006494:	688a      	ldr	r2, [r1, #8]
 8006496:	690b      	ldr	r3, [r1, #16]
 8006498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800649c:	4293      	cmp	r3, r2
 800649e:	bfb8      	it	lt
 80064a0:	4613      	movlt	r3, r2
 80064a2:	6033      	str	r3, [r6, #0]
 80064a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064a8:	4607      	mov	r7, r0
 80064aa:	460c      	mov	r4, r1
 80064ac:	b10a      	cbz	r2, 80064b2 <_printf_common+0x26>
 80064ae:	3301      	adds	r3, #1
 80064b0:	6033      	str	r3, [r6, #0]
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	0699      	lsls	r1, r3, #26
 80064b6:	bf42      	ittt	mi
 80064b8:	6833      	ldrmi	r3, [r6, #0]
 80064ba:	3302      	addmi	r3, #2
 80064bc:	6033      	strmi	r3, [r6, #0]
 80064be:	6825      	ldr	r5, [r4, #0]
 80064c0:	f015 0506 	ands.w	r5, r5, #6
 80064c4:	d106      	bne.n	80064d4 <_printf_common+0x48>
 80064c6:	f104 0a19 	add.w	sl, r4, #25
 80064ca:	68e3      	ldr	r3, [r4, #12]
 80064cc:	6832      	ldr	r2, [r6, #0]
 80064ce:	1a9b      	subs	r3, r3, r2
 80064d0:	42ab      	cmp	r3, r5
 80064d2:	dc26      	bgt.n	8006522 <_printf_common+0x96>
 80064d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064d8:	6822      	ldr	r2, [r4, #0]
 80064da:	3b00      	subs	r3, #0
 80064dc:	bf18      	it	ne
 80064de:	2301      	movne	r3, #1
 80064e0:	0692      	lsls	r2, r2, #26
 80064e2:	d42b      	bmi.n	800653c <_printf_common+0xb0>
 80064e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064e8:	4641      	mov	r1, r8
 80064ea:	4638      	mov	r0, r7
 80064ec:	47c8      	blx	r9
 80064ee:	3001      	adds	r0, #1
 80064f0:	d01e      	beq.n	8006530 <_printf_common+0xa4>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	6922      	ldr	r2, [r4, #16]
 80064f6:	f003 0306 	and.w	r3, r3, #6
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	bf02      	ittt	eq
 80064fe:	68e5      	ldreq	r5, [r4, #12]
 8006500:	6833      	ldreq	r3, [r6, #0]
 8006502:	1aed      	subeq	r5, r5, r3
 8006504:	68a3      	ldr	r3, [r4, #8]
 8006506:	bf0c      	ite	eq
 8006508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800650c:	2500      	movne	r5, #0
 800650e:	4293      	cmp	r3, r2
 8006510:	bfc4      	itt	gt
 8006512:	1a9b      	subgt	r3, r3, r2
 8006514:	18ed      	addgt	r5, r5, r3
 8006516:	2600      	movs	r6, #0
 8006518:	341a      	adds	r4, #26
 800651a:	42b5      	cmp	r5, r6
 800651c:	d11a      	bne.n	8006554 <_printf_common+0xc8>
 800651e:	2000      	movs	r0, #0
 8006520:	e008      	b.n	8006534 <_printf_common+0xa8>
 8006522:	2301      	movs	r3, #1
 8006524:	4652      	mov	r2, sl
 8006526:	4641      	mov	r1, r8
 8006528:	4638      	mov	r0, r7
 800652a:	47c8      	blx	r9
 800652c:	3001      	adds	r0, #1
 800652e:	d103      	bne.n	8006538 <_printf_common+0xac>
 8006530:	f04f 30ff 	mov.w	r0, #4294967295
 8006534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006538:	3501      	adds	r5, #1
 800653a:	e7c6      	b.n	80064ca <_printf_common+0x3e>
 800653c:	18e1      	adds	r1, r4, r3
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	2030      	movs	r0, #48	@ 0x30
 8006542:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006546:	4422      	add	r2, r4
 8006548:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800654c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006550:	3302      	adds	r3, #2
 8006552:	e7c7      	b.n	80064e4 <_printf_common+0x58>
 8006554:	2301      	movs	r3, #1
 8006556:	4622      	mov	r2, r4
 8006558:	4641      	mov	r1, r8
 800655a:	4638      	mov	r0, r7
 800655c:	47c8      	blx	r9
 800655e:	3001      	adds	r0, #1
 8006560:	d0e6      	beq.n	8006530 <_printf_common+0xa4>
 8006562:	3601      	adds	r6, #1
 8006564:	e7d9      	b.n	800651a <_printf_common+0x8e>
	...

08006568 <_printf_i>:
 8006568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800656c:	7e0f      	ldrb	r7, [r1, #24]
 800656e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006570:	2f78      	cmp	r7, #120	@ 0x78
 8006572:	4691      	mov	r9, r2
 8006574:	4680      	mov	r8, r0
 8006576:	460c      	mov	r4, r1
 8006578:	469a      	mov	sl, r3
 800657a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800657e:	d807      	bhi.n	8006590 <_printf_i+0x28>
 8006580:	2f62      	cmp	r7, #98	@ 0x62
 8006582:	d80a      	bhi.n	800659a <_printf_i+0x32>
 8006584:	2f00      	cmp	r7, #0
 8006586:	f000 80d2 	beq.w	800672e <_printf_i+0x1c6>
 800658a:	2f58      	cmp	r7, #88	@ 0x58
 800658c:	f000 80b9 	beq.w	8006702 <_printf_i+0x19a>
 8006590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006594:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006598:	e03a      	b.n	8006610 <_printf_i+0xa8>
 800659a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800659e:	2b15      	cmp	r3, #21
 80065a0:	d8f6      	bhi.n	8006590 <_printf_i+0x28>
 80065a2:	a101      	add	r1, pc, #4	@ (adr r1, 80065a8 <_printf_i+0x40>)
 80065a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065a8:	08006601 	.word	0x08006601
 80065ac:	08006615 	.word	0x08006615
 80065b0:	08006591 	.word	0x08006591
 80065b4:	08006591 	.word	0x08006591
 80065b8:	08006591 	.word	0x08006591
 80065bc:	08006591 	.word	0x08006591
 80065c0:	08006615 	.word	0x08006615
 80065c4:	08006591 	.word	0x08006591
 80065c8:	08006591 	.word	0x08006591
 80065cc:	08006591 	.word	0x08006591
 80065d0:	08006591 	.word	0x08006591
 80065d4:	08006715 	.word	0x08006715
 80065d8:	0800663f 	.word	0x0800663f
 80065dc:	080066cf 	.word	0x080066cf
 80065e0:	08006591 	.word	0x08006591
 80065e4:	08006591 	.word	0x08006591
 80065e8:	08006737 	.word	0x08006737
 80065ec:	08006591 	.word	0x08006591
 80065f0:	0800663f 	.word	0x0800663f
 80065f4:	08006591 	.word	0x08006591
 80065f8:	08006591 	.word	0x08006591
 80065fc:	080066d7 	.word	0x080066d7
 8006600:	6833      	ldr	r3, [r6, #0]
 8006602:	1d1a      	adds	r2, r3, #4
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6032      	str	r2, [r6, #0]
 8006608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800660c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006610:	2301      	movs	r3, #1
 8006612:	e09d      	b.n	8006750 <_printf_i+0x1e8>
 8006614:	6833      	ldr	r3, [r6, #0]
 8006616:	6820      	ldr	r0, [r4, #0]
 8006618:	1d19      	adds	r1, r3, #4
 800661a:	6031      	str	r1, [r6, #0]
 800661c:	0606      	lsls	r6, r0, #24
 800661e:	d501      	bpl.n	8006624 <_printf_i+0xbc>
 8006620:	681d      	ldr	r5, [r3, #0]
 8006622:	e003      	b.n	800662c <_printf_i+0xc4>
 8006624:	0645      	lsls	r5, r0, #25
 8006626:	d5fb      	bpl.n	8006620 <_printf_i+0xb8>
 8006628:	f9b3 5000 	ldrsh.w	r5, [r3]
 800662c:	2d00      	cmp	r5, #0
 800662e:	da03      	bge.n	8006638 <_printf_i+0xd0>
 8006630:	232d      	movs	r3, #45	@ 0x2d
 8006632:	426d      	negs	r5, r5
 8006634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006638:	4859      	ldr	r0, [pc, #356]	@ (80067a0 <_printf_i+0x238>)
 800663a:	230a      	movs	r3, #10
 800663c:	e011      	b.n	8006662 <_printf_i+0xfa>
 800663e:	6821      	ldr	r1, [r4, #0]
 8006640:	6833      	ldr	r3, [r6, #0]
 8006642:	0608      	lsls	r0, r1, #24
 8006644:	f853 5b04 	ldr.w	r5, [r3], #4
 8006648:	d402      	bmi.n	8006650 <_printf_i+0xe8>
 800664a:	0649      	lsls	r1, r1, #25
 800664c:	bf48      	it	mi
 800664e:	b2ad      	uxthmi	r5, r5
 8006650:	2f6f      	cmp	r7, #111	@ 0x6f
 8006652:	4853      	ldr	r0, [pc, #332]	@ (80067a0 <_printf_i+0x238>)
 8006654:	6033      	str	r3, [r6, #0]
 8006656:	bf14      	ite	ne
 8006658:	230a      	movne	r3, #10
 800665a:	2308      	moveq	r3, #8
 800665c:	2100      	movs	r1, #0
 800665e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006662:	6866      	ldr	r6, [r4, #4]
 8006664:	60a6      	str	r6, [r4, #8]
 8006666:	2e00      	cmp	r6, #0
 8006668:	bfa2      	ittt	ge
 800666a:	6821      	ldrge	r1, [r4, #0]
 800666c:	f021 0104 	bicge.w	r1, r1, #4
 8006670:	6021      	strge	r1, [r4, #0]
 8006672:	b90d      	cbnz	r5, 8006678 <_printf_i+0x110>
 8006674:	2e00      	cmp	r6, #0
 8006676:	d04b      	beq.n	8006710 <_printf_i+0x1a8>
 8006678:	4616      	mov	r6, r2
 800667a:	fbb5 f1f3 	udiv	r1, r5, r3
 800667e:	fb03 5711 	mls	r7, r3, r1, r5
 8006682:	5dc7      	ldrb	r7, [r0, r7]
 8006684:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006688:	462f      	mov	r7, r5
 800668a:	42bb      	cmp	r3, r7
 800668c:	460d      	mov	r5, r1
 800668e:	d9f4      	bls.n	800667a <_printf_i+0x112>
 8006690:	2b08      	cmp	r3, #8
 8006692:	d10b      	bne.n	80066ac <_printf_i+0x144>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	07df      	lsls	r7, r3, #31
 8006698:	d508      	bpl.n	80066ac <_printf_i+0x144>
 800669a:	6923      	ldr	r3, [r4, #16]
 800669c:	6861      	ldr	r1, [r4, #4]
 800669e:	4299      	cmp	r1, r3
 80066a0:	bfde      	ittt	le
 80066a2:	2330      	movle	r3, #48	@ 0x30
 80066a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066ac:	1b92      	subs	r2, r2, r6
 80066ae:	6122      	str	r2, [r4, #16]
 80066b0:	f8cd a000 	str.w	sl, [sp]
 80066b4:	464b      	mov	r3, r9
 80066b6:	aa03      	add	r2, sp, #12
 80066b8:	4621      	mov	r1, r4
 80066ba:	4640      	mov	r0, r8
 80066bc:	f7ff fee6 	bl	800648c <_printf_common>
 80066c0:	3001      	adds	r0, #1
 80066c2:	d14a      	bne.n	800675a <_printf_i+0x1f2>
 80066c4:	f04f 30ff 	mov.w	r0, #4294967295
 80066c8:	b004      	add	sp, #16
 80066ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	f043 0320 	orr.w	r3, r3, #32
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	4833      	ldr	r0, [pc, #204]	@ (80067a4 <_printf_i+0x23c>)
 80066d8:	2778      	movs	r7, #120	@ 0x78
 80066da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	6831      	ldr	r1, [r6, #0]
 80066e2:	061f      	lsls	r7, r3, #24
 80066e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80066e8:	d402      	bmi.n	80066f0 <_printf_i+0x188>
 80066ea:	065f      	lsls	r7, r3, #25
 80066ec:	bf48      	it	mi
 80066ee:	b2ad      	uxthmi	r5, r5
 80066f0:	6031      	str	r1, [r6, #0]
 80066f2:	07d9      	lsls	r1, r3, #31
 80066f4:	bf44      	itt	mi
 80066f6:	f043 0320 	orrmi.w	r3, r3, #32
 80066fa:	6023      	strmi	r3, [r4, #0]
 80066fc:	b11d      	cbz	r5, 8006706 <_printf_i+0x19e>
 80066fe:	2310      	movs	r3, #16
 8006700:	e7ac      	b.n	800665c <_printf_i+0xf4>
 8006702:	4827      	ldr	r0, [pc, #156]	@ (80067a0 <_printf_i+0x238>)
 8006704:	e7e9      	b.n	80066da <_printf_i+0x172>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	f023 0320 	bic.w	r3, r3, #32
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	e7f6      	b.n	80066fe <_printf_i+0x196>
 8006710:	4616      	mov	r6, r2
 8006712:	e7bd      	b.n	8006690 <_printf_i+0x128>
 8006714:	6833      	ldr	r3, [r6, #0]
 8006716:	6825      	ldr	r5, [r4, #0]
 8006718:	6961      	ldr	r1, [r4, #20]
 800671a:	1d18      	adds	r0, r3, #4
 800671c:	6030      	str	r0, [r6, #0]
 800671e:	062e      	lsls	r6, r5, #24
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	d501      	bpl.n	8006728 <_printf_i+0x1c0>
 8006724:	6019      	str	r1, [r3, #0]
 8006726:	e002      	b.n	800672e <_printf_i+0x1c6>
 8006728:	0668      	lsls	r0, r5, #25
 800672a:	d5fb      	bpl.n	8006724 <_printf_i+0x1bc>
 800672c:	8019      	strh	r1, [r3, #0]
 800672e:	2300      	movs	r3, #0
 8006730:	6123      	str	r3, [r4, #16]
 8006732:	4616      	mov	r6, r2
 8006734:	e7bc      	b.n	80066b0 <_printf_i+0x148>
 8006736:	6833      	ldr	r3, [r6, #0]
 8006738:	1d1a      	adds	r2, r3, #4
 800673a:	6032      	str	r2, [r6, #0]
 800673c:	681e      	ldr	r6, [r3, #0]
 800673e:	6862      	ldr	r2, [r4, #4]
 8006740:	2100      	movs	r1, #0
 8006742:	4630      	mov	r0, r6
 8006744:	f7f9 fd7c 	bl	8000240 <memchr>
 8006748:	b108      	cbz	r0, 800674e <_printf_i+0x1e6>
 800674a:	1b80      	subs	r0, r0, r6
 800674c:	6060      	str	r0, [r4, #4]
 800674e:	6863      	ldr	r3, [r4, #4]
 8006750:	6123      	str	r3, [r4, #16]
 8006752:	2300      	movs	r3, #0
 8006754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006758:	e7aa      	b.n	80066b0 <_printf_i+0x148>
 800675a:	6923      	ldr	r3, [r4, #16]
 800675c:	4632      	mov	r2, r6
 800675e:	4649      	mov	r1, r9
 8006760:	4640      	mov	r0, r8
 8006762:	47d0      	blx	sl
 8006764:	3001      	adds	r0, #1
 8006766:	d0ad      	beq.n	80066c4 <_printf_i+0x15c>
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	079b      	lsls	r3, r3, #30
 800676c:	d413      	bmi.n	8006796 <_printf_i+0x22e>
 800676e:	68e0      	ldr	r0, [r4, #12]
 8006770:	9b03      	ldr	r3, [sp, #12]
 8006772:	4298      	cmp	r0, r3
 8006774:	bfb8      	it	lt
 8006776:	4618      	movlt	r0, r3
 8006778:	e7a6      	b.n	80066c8 <_printf_i+0x160>
 800677a:	2301      	movs	r3, #1
 800677c:	4632      	mov	r2, r6
 800677e:	4649      	mov	r1, r9
 8006780:	4640      	mov	r0, r8
 8006782:	47d0      	blx	sl
 8006784:	3001      	adds	r0, #1
 8006786:	d09d      	beq.n	80066c4 <_printf_i+0x15c>
 8006788:	3501      	adds	r5, #1
 800678a:	68e3      	ldr	r3, [r4, #12]
 800678c:	9903      	ldr	r1, [sp, #12]
 800678e:	1a5b      	subs	r3, r3, r1
 8006790:	42ab      	cmp	r3, r5
 8006792:	dcf2      	bgt.n	800677a <_printf_i+0x212>
 8006794:	e7eb      	b.n	800676e <_printf_i+0x206>
 8006796:	2500      	movs	r5, #0
 8006798:	f104 0619 	add.w	r6, r4, #25
 800679c:	e7f5      	b.n	800678a <_printf_i+0x222>
 800679e:	bf00      	nop
 80067a0:	08008ac3 	.word	0x08008ac3
 80067a4:	08008ad4 	.word	0x08008ad4

080067a8 <std>:
 80067a8:	2300      	movs	r3, #0
 80067aa:	b510      	push	{r4, lr}
 80067ac:	4604      	mov	r4, r0
 80067ae:	e9c0 3300 	strd	r3, r3, [r0]
 80067b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067b6:	6083      	str	r3, [r0, #8]
 80067b8:	8181      	strh	r1, [r0, #12]
 80067ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80067bc:	81c2      	strh	r2, [r0, #14]
 80067be:	6183      	str	r3, [r0, #24]
 80067c0:	4619      	mov	r1, r3
 80067c2:	2208      	movs	r2, #8
 80067c4:	305c      	adds	r0, #92	@ 0x5c
 80067c6:	f000 faa3 	bl	8006d10 <memset>
 80067ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006800 <std+0x58>)
 80067cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80067ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006804 <std+0x5c>)
 80067d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006808 <std+0x60>)
 80067d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067d6:	4b0d      	ldr	r3, [pc, #52]	@ (800680c <std+0x64>)
 80067d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80067da:	4b0d      	ldr	r3, [pc, #52]	@ (8006810 <std+0x68>)
 80067dc:	6224      	str	r4, [r4, #32]
 80067de:	429c      	cmp	r4, r3
 80067e0:	d006      	beq.n	80067f0 <std+0x48>
 80067e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80067e6:	4294      	cmp	r4, r2
 80067e8:	d002      	beq.n	80067f0 <std+0x48>
 80067ea:	33d0      	adds	r3, #208	@ 0xd0
 80067ec:	429c      	cmp	r4, r3
 80067ee:	d105      	bne.n	80067fc <std+0x54>
 80067f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80067f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067f8:	f000 bb00 	b.w	8006dfc <__retarget_lock_init_recursive>
 80067fc:	bd10      	pop	{r4, pc}
 80067fe:	bf00      	nop
 8006800:	08006b61 	.word	0x08006b61
 8006804:	08006b83 	.word	0x08006b83
 8006808:	08006bbb 	.word	0x08006bbb
 800680c:	08006bdf 	.word	0x08006bdf
 8006810:	20000534 	.word	0x20000534

08006814 <stdio_exit_handler>:
 8006814:	4a02      	ldr	r2, [pc, #8]	@ (8006820 <stdio_exit_handler+0xc>)
 8006816:	4903      	ldr	r1, [pc, #12]	@ (8006824 <stdio_exit_handler+0x10>)
 8006818:	4803      	ldr	r0, [pc, #12]	@ (8006828 <stdio_exit_handler+0x14>)
 800681a:	f000 b869 	b.w	80068f0 <_fwalk_sglue>
 800681e:	bf00      	nop
 8006820:	20000010 	.word	0x20000010
 8006824:	080086ad 	.word	0x080086ad
 8006828:	20000020 	.word	0x20000020

0800682c <cleanup_stdio>:
 800682c:	6841      	ldr	r1, [r0, #4]
 800682e:	4b0c      	ldr	r3, [pc, #48]	@ (8006860 <cleanup_stdio+0x34>)
 8006830:	4299      	cmp	r1, r3
 8006832:	b510      	push	{r4, lr}
 8006834:	4604      	mov	r4, r0
 8006836:	d001      	beq.n	800683c <cleanup_stdio+0x10>
 8006838:	f001 ff38 	bl	80086ac <_fflush_r>
 800683c:	68a1      	ldr	r1, [r4, #8]
 800683e:	4b09      	ldr	r3, [pc, #36]	@ (8006864 <cleanup_stdio+0x38>)
 8006840:	4299      	cmp	r1, r3
 8006842:	d002      	beq.n	800684a <cleanup_stdio+0x1e>
 8006844:	4620      	mov	r0, r4
 8006846:	f001 ff31 	bl	80086ac <_fflush_r>
 800684a:	68e1      	ldr	r1, [r4, #12]
 800684c:	4b06      	ldr	r3, [pc, #24]	@ (8006868 <cleanup_stdio+0x3c>)
 800684e:	4299      	cmp	r1, r3
 8006850:	d004      	beq.n	800685c <cleanup_stdio+0x30>
 8006852:	4620      	mov	r0, r4
 8006854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006858:	f001 bf28 	b.w	80086ac <_fflush_r>
 800685c:	bd10      	pop	{r4, pc}
 800685e:	bf00      	nop
 8006860:	20000534 	.word	0x20000534
 8006864:	2000059c 	.word	0x2000059c
 8006868:	20000604 	.word	0x20000604

0800686c <global_stdio_init.part.0>:
 800686c:	b510      	push	{r4, lr}
 800686e:	4b0b      	ldr	r3, [pc, #44]	@ (800689c <global_stdio_init.part.0+0x30>)
 8006870:	4c0b      	ldr	r4, [pc, #44]	@ (80068a0 <global_stdio_init.part.0+0x34>)
 8006872:	4a0c      	ldr	r2, [pc, #48]	@ (80068a4 <global_stdio_init.part.0+0x38>)
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	4620      	mov	r0, r4
 8006878:	2200      	movs	r2, #0
 800687a:	2104      	movs	r1, #4
 800687c:	f7ff ff94 	bl	80067a8 <std>
 8006880:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006884:	2201      	movs	r2, #1
 8006886:	2109      	movs	r1, #9
 8006888:	f7ff ff8e 	bl	80067a8 <std>
 800688c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006890:	2202      	movs	r2, #2
 8006892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006896:	2112      	movs	r1, #18
 8006898:	f7ff bf86 	b.w	80067a8 <std>
 800689c:	2000066c 	.word	0x2000066c
 80068a0:	20000534 	.word	0x20000534
 80068a4:	08006815 	.word	0x08006815

080068a8 <__sfp_lock_acquire>:
 80068a8:	4801      	ldr	r0, [pc, #4]	@ (80068b0 <__sfp_lock_acquire+0x8>)
 80068aa:	f000 baa8 	b.w	8006dfe <__retarget_lock_acquire_recursive>
 80068ae:	bf00      	nop
 80068b0:	20000671 	.word	0x20000671

080068b4 <__sfp_lock_release>:
 80068b4:	4801      	ldr	r0, [pc, #4]	@ (80068bc <__sfp_lock_release+0x8>)
 80068b6:	f000 baa3 	b.w	8006e00 <__retarget_lock_release_recursive>
 80068ba:	bf00      	nop
 80068bc:	20000671 	.word	0x20000671

080068c0 <__sinit>:
 80068c0:	b510      	push	{r4, lr}
 80068c2:	4604      	mov	r4, r0
 80068c4:	f7ff fff0 	bl	80068a8 <__sfp_lock_acquire>
 80068c8:	6a23      	ldr	r3, [r4, #32]
 80068ca:	b11b      	cbz	r3, 80068d4 <__sinit+0x14>
 80068cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d0:	f7ff bff0 	b.w	80068b4 <__sfp_lock_release>
 80068d4:	4b04      	ldr	r3, [pc, #16]	@ (80068e8 <__sinit+0x28>)
 80068d6:	6223      	str	r3, [r4, #32]
 80068d8:	4b04      	ldr	r3, [pc, #16]	@ (80068ec <__sinit+0x2c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1f5      	bne.n	80068cc <__sinit+0xc>
 80068e0:	f7ff ffc4 	bl	800686c <global_stdio_init.part.0>
 80068e4:	e7f2      	b.n	80068cc <__sinit+0xc>
 80068e6:	bf00      	nop
 80068e8:	0800682d 	.word	0x0800682d
 80068ec:	2000066c 	.word	0x2000066c

080068f0 <_fwalk_sglue>:
 80068f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068f4:	4607      	mov	r7, r0
 80068f6:	4688      	mov	r8, r1
 80068f8:	4614      	mov	r4, r2
 80068fa:	2600      	movs	r6, #0
 80068fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006900:	f1b9 0901 	subs.w	r9, r9, #1
 8006904:	d505      	bpl.n	8006912 <_fwalk_sglue+0x22>
 8006906:	6824      	ldr	r4, [r4, #0]
 8006908:	2c00      	cmp	r4, #0
 800690a:	d1f7      	bne.n	80068fc <_fwalk_sglue+0xc>
 800690c:	4630      	mov	r0, r6
 800690e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006912:	89ab      	ldrh	r3, [r5, #12]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d907      	bls.n	8006928 <_fwalk_sglue+0x38>
 8006918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800691c:	3301      	adds	r3, #1
 800691e:	d003      	beq.n	8006928 <_fwalk_sglue+0x38>
 8006920:	4629      	mov	r1, r5
 8006922:	4638      	mov	r0, r7
 8006924:	47c0      	blx	r8
 8006926:	4306      	orrs	r6, r0
 8006928:	3568      	adds	r5, #104	@ 0x68
 800692a:	e7e9      	b.n	8006900 <_fwalk_sglue+0x10>

0800692c <_puts_r>:
 800692c:	6a03      	ldr	r3, [r0, #32]
 800692e:	b570      	push	{r4, r5, r6, lr}
 8006930:	6884      	ldr	r4, [r0, #8]
 8006932:	4605      	mov	r5, r0
 8006934:	460e      	mov	r6, r1
 8006936:	b90b      	cbnz	r3, 800693c <_puts_r+0x10>
 8006938:	f7ff ffc2 	bl	80068c0 <__sinit>
 800693c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800693e:	07db      	lsls	r3, r3, #31
 8006940:	d405      	bmi.n	800694e <_puts_r+0x22>
 8006942:	89a3      	ldrh	r3, [r4, #12]
 8006944:	0598      	lsls	r0, r3, #22
 8006946:	d402      	bmi.n	800694e <_puts_r+0x22>
 8006948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800694a:	f000 fa58 	bl	8006dfe <__retarget_lock_acquire_recursive>
 800694e:	89a3      	ldrh	r3, [r4, #12]
 8006950:	0719      	lsls	r1, r3, #28
 8006952:	d502      	bpl.n	800695a <_puts_r+0x2e>
 8006954:	6923      	ldr	r3, [r4, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d135      	bne.n	80069c6 <_puts_r+0x9a>
 800695a:	4621      	mov	r1, r4
 800695c:	4628      	mov	r0, r5
 800695e:	f000 f981 	bl	8006c64 <__swsetup_r>
 8006962:	b380      	cbz	r0, 80069c6 <_puts_r+0x9a>
 8006964:	f04f 35ff 	mov.w	r5, #4294967295
 8006968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800696a:	07da      	lsls	r2, r3, #31
 800696c:	d405      	bmi.n	800697a <_puts_r+0x4e>
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	059b      	lsls	r3, r3, #22
 8006972:	d402      	bmi.n	800697a <_puts_r+0x4e>
 8006974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006976:	f000 fa43 	bl	8006e00 <__retarget_lock_release_recursive>
 800697a:	4628      	mov	r0, r5
 800697c:	bd70      	pop	{r4, r5, r6, pc}
 800697e:	2b00      	cmp	r3, #0
 8006980:	da04      	bge.n	800698c <_puts_r+0x60>
 8006982:	69a2      	ldr	r2, [r4, #24]
 8006984:	429a      	cmp	r2, r3
 8006986:	dc17      	bgt.n	80069b8 <_puts_r+0x8c>
 8006988:	290a      	cmp	r1, #10
 800698a:	d015      	beq.n	80069b8 <_puts_r+0x8c>
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	6022      	str	r2, [r4, #0]
 8006992:	7019      	strb	r1, [r3, #0]
 8006994:	68a3      	ldr	r3, [r4, #8]
 8006996:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800699a:	3b01      	subs	r3, #1
 800699c:	60a3      	str	r3, [r4, #8]
 800699e:	2900      	cmp	r1, #0
 80069a0:	d1ed      	bne.n	800697e <_puts_r+0x52>
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	da11      	bge.n	80069ca <_puts_r+0x9e>
 80069a6:	4622      	mov	r2, r4
 80069a8:	210a      	movs	r1, #10
 80069aa:	4628      	mov	r0, r5
 80069ac:	f000 f91b 	bl	8006be6 <__swbuf_r>
 80069b0:	3001      	adds	r0, #1
 80069b2:	d0d7      	beq.n	8006964 <_puts_r+0x38>
 80069b4:	250a      	movs	r5, #10
 80069b6:	e7d7      	b.n	8006968 <_puts_r+0x3c>
 80069b8:	4622      	mov	r2, r4
 80069ba:	4628      	mov	r0, r5
 80069bc:	f000 f913 	bl	8006be6 <__swbuf_r>
 80069c0:	3001      	adds	r0, #1
 80069c2:	d1e7      	bne.n	8006994 <_puts_r+0x68>
 80069c4:	e7ce      	b.n	8006964 <_puts_r+0x38>
 80069c6:	3e01      	subs	r6, #1
 80069c8:	e7e4      	b.n	8006994 <_puts_r+0x68>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	6022      	str	r2, [r4, #0]
 80069d0:	220a      	movs	r2, #10
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	e7ee      	b.n	80069b4 <_puts_r+0x88>
	...

080069d8 <puts>:
 80069d8:	4b02      	ldr	r3, [pc, #8]	@ (80069e4 <puts+0xc>)
 80069da:	4601      	mov	r1, r0
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	f7ff bfa5 	b.w	800692c <_puts_r>
 80069e2:	bf00      	nop
 80069e4:	2000001c 	.word	0x2000001c

080069e8 <setbuf>:
 80069e8:	fab1 f281 	clz	r2, r1
 80069ec:	0952      	lsrs	r2, r2, #5
 80069ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069f2:	0052      	lsls	r2, r2, #1
 80069f4:	f000 b800 	b.w	80069f8 <setvbuf>

080069f8 <setvbuf>:
 80069f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069fc:	461d      	mov	r5, r3
 80069fe:	4b57      	ldr	r3, [pc, #348]	@ (8006b5c <setvbuf+0x164>)
 8006a00:	681f      	ldr	r7, [r3, #0]
 8006a02:	4604      	mov	r4, r0
 8006a04:	460e      	mov	r6, r1
 8006a06:	4690      	mov	r8, r2
 8006a08:	b127      	cbz	r7, 8006a14 <setvbuf+0x1c>
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	b913      	cbnz	r3, 8006a14 <setvbuf+0x1c>
 8006a0e:	4638      	mov	r0, r7
 8006a10:	f7ff ff56 	bl	80068c0 <__sinit>
 8006a14:	f1b8 0f02 	cmp.w	r8, #2
 8006a18:	d006      	beq.n	8006a28 <setvbuf+0x30>
 8006a1a:	f1b8 0f01 	cmp.w	r8, #1
 8006a1e:	f200 809a 	bhi.w	8006b56 <setvbuf+0x15e>
 8006a22:	2d00      	cmp	r5, #0
 8006a24:	f2c0 8097 	blt.w	8006b56 <setvbuf+0x15e>
 8006a28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a2a:	07d9      	lsls	r1, r3, #31
 8006a2c:	d405      	bmi.n	8006a3a <setvbuf+0x42>
 8006a2e:	89a3      	ldrh	r3, [r4, #12]
 8006a30:	059a      	lsls	r2, r3, #22
 8006a32:	d402      	bmi.n	8006a3a <setvbuf+0x42>
 8006a34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a36:	f000 f9e2 	bl	8006dfe <__retarget_lock_acquire_recursive>
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	f001 fe35 	bl	80086ac <_fflush_r>
 8006a42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a44:	b141      	cbz	r1, 8006a58 <setvbuf+0x60>
 8006a46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a4a:	4299      	cmp	r1, r3
 8006a4c:	d002      	beq.n	8006a54 <setvbuf+0x5c>
 8006a4e:	4638      	mov	r0, r7
 8006a50:	f000 ffe4 	bl	8007a1c <_free_r>
 8006a54:	2300      	movs	r3, #0
 8006a56:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a58:	2300      	movs	r3, #0
 8006a5a:	61a3      	str	r3, [r4, #24]
 8006a5c:	6063      	str	r3, [r4, #4]
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	061b      	lsls	r3, r3, #24
 8006a62:	d503      	bpl.n	8006a6c <setvbuf+0x74>
 8006a64:	6921      	ldr	r1, [r4, #16]
 8006a66:	4638      	mov	r0, r7
 8006a68:	f000 ffd8 	bl	8007a1c <_free_r>
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8006a72:	f023 0303 	bic.w	r3, r3, #3
 8006a76:	f1b8 0f02 	cmp.w	r8, #2
 8006a7a:	81a3      	strh	r3, [r4, #12]
 8006a7c:	d061      	beq.n	8006b42 <setvbuf+0x14a>
 8006a7e:	ab01      	add	r3, sp, #4
 8006a80:	466a      	mov	r2, sp
 8006a82:	4621      	mov	r1, r4
 8006a84:	4638      	mov	r0, r7
 8006a86:	f001 fe4b 	bl	8008720 <__swhatbuf_r>
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	4318      	orrs	r0, r3
 8006a8e:	81a0      	strh	r0, [r4, #12]
 8006a90:	bb2d      	cbnz	r5, 8006ade <setvbuf+0xe6>
 8006a92:	9d00      	ldr	r5, [sp, #0]
 8006a94:	4628      	mov	r0, r5
 8006a96:	f001 f80b 	bl	8007ab0 <malloc>
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	d152      	bne.n	8006b46 <setvbuf+0x14e>
 8006aa0:	f8dd 9000 	ldr.w	r9, [sp]
 8006aa4:	45a9      	cmp	r9, r5
 8006aa6:	d140      	bne.n	8006b2a <setvbuf+0x132>
 8006aa8:	f04f 35ff 	mov.w	r5, #4294967295
 8006aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ab0:	f043 0202 	orr.w	r2, r3, #2
 8006ab4:	81a2      	strh	r2, [r4, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	60a2      	str	r2, [r4, #8]
 8006aba:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8006abe:	6022      	str	r2, [r4, #0]
 8006ac0:	6122      	str	r2, [r4, #16]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	6162      	str	r2, [r4, #20]
 8006ac6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ac8:	07d6      	lsls	r6, r2, #31
 8006aca:	d404      	bmi.n	8006ad6 <setvbuf+0xde>
 8006acc:	0598      	lsls	r0, r3, #22
 8006ace:	d402      	bmi.n	8006ad6 <setvbuf+0xde>
 8006ad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ad2:	f000 f995 	bl	8006e00 <__retarget_lock_release_recursive>
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	b003      	add	sp, #12
 8006ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ade:	2e00      	cmp	r6, #0
 8006ae0:	d0d8      	beq.n	8006a94 <setvbuf+0x9c>
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	b913      	cbnz	r3, 8006aec <setvbuf+0xf4>
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	f7ff feea 	bl	80068c0 <__sinit>
 8006aec:	f1b8 0f01 	cmp.w	r8, #1
 8006af0:	bf08      	it	eq
 8006af2:	89a3      	ldrheq	r3, [r4, #12]
 8006af4:	6026      	str	r6, [r4, #0]
 8006af6:	bf04      	itt	eq
 8006af8:	f043 0301 	orreq.w	r3, r3, #1
 8006afc:	81a3      	strheq	r3, [r4, #12]
 8006afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b02:	f013 0208 	ands.w	r2, r3, #8
 8006b06:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006b0a:	d01e      	beq.n	8006b4a <setvbuf+0x152>
 8006b0c:	07d9      	lsls	r1, r3, #31
 8006b0e:	bf41      	itttt	mi
 8006b10:	2200      	movmi	r2, #0
 8006b12:	426d      	negmi	r5, r5
 8006b14:	60a2      	strmi	r2, [r4, #8]
 8006b16:	61a5      	strmi	r5, [r4, #24]
 8006b18:	bf58      	it	pl
 8006b1a:	60a5      	strpl	r5, [r4, #8]
 8006b1c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b1e:	07d2      	lsls	r2, r2, #31
 8006b20:	d401      	bmi.n	8006b26 <setvbuf+0x12e>
 8006b22:	059b      	lsls	r3, r3, #22
 8006b24:	d513      	bpl.n	8006b4e <setvbuf+0x156>
 8006b26:	2500      	movs	r5, #0
 8006b28:	e7d5      	b.n	8006ad6 <setvbuf+0xde>
 8006b2a:	4648      	mov	r0, r9
 8006b2c:	f000 ffc0 	bl	8007ab0 <malloc>
 8006b30:	4606      	mov	r6, r0
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d0b8      	beq.n	8006aa8 <setvbuf+0xb0>
 8006b36:	89a3      	ldrh	r3, [r4, #12]
 8006b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b3c:	81a3      	strh	r3, [r4, #12]
 8006b3e:	464d      	mov	r5, r9
 8006b40:	e7cf      	b.n	8006ae2 <setvbuf+0xea>
 8006b42:	2500      	movs	r5, #0
 8006b44:	e7b2      	b.n	8006aac <setvbuf+0xb4>
 8006b46:	46a9      	mov	r9, r5
 8006b48:	e7f5      	b.n	8006b36 <setvbuf+0x13e>
 8006b4a:	60a2      	str	r2, [r4, #8]
 8006b4c:	e7e6      	b.n	8006b1c <setvbuf+0x124>
 8006b4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b50:	f000 f956 	bl	8006e00 <__retarget_lock_release_recursive>
 8006b54:	e7e7      	b.n	8006b26 <setvbuf+0x12e>
 8006b56:	f04f 35ff 	mov.w	r5, #4294967295
 8006b5a:	e7bc      	b.n	8006ad6 <setvbuf+0xde>
 8006b5c:	2000001c 	.word	0x2000001c

08006b60 <__sread>:
 8006b60:	b510      	push	{r4, lr}
 8006b62:	460c      	mov	r4, r1
 8006b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b68:	f000 f900 	bl	8006d6c <_read_r>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	bfab      	itete	ge
 8006b70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b72:	89a3      	ldrhlt	r3, [r4, #12]
 8006b74:	181b      	addge	r3, r3, r0
 8006b76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b7a:	bfac      	ite	ge
 8006b7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b7e:	81a3      	strhlt	r3, [r4, #12]
 8006b80:	bd10      	pop	{r4, pc}

08006b82 <__swrite>:
 8006b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b86:	461f      	mov	r7, r3
 8006b88:	898b      	ldrh	r3, [r1, #12]
 8006b8a:	05db      	lsls	r3, r3, #23
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	460c      	mov	r4, r1
 8006b90:	4616      	mov	r6, r2
 8006b92:	d505      	bpl.n	8006ba0 <__swrite+0x1e>
 8006b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b98:	2302      	movs	r3, #2
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f000 f8d4 	bl	8006d48 <_lseek_r>
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ba6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006baa:	81a3      	strh	r3, [r4, #12]
 8006bac:	4632      	mov	r2, r6
 8006bae:	463b      	mov	r3, r7
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb6:	f000 b8eb 	b.w	8006d90 <_write_r>

08006bba <__sseek>:
 8006bba:	b510      	push	{r4, lr}
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc2:	f000 f8c1 	bl	8006d48 <_lseek_r>
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	bf15      	itete	ne
 8006bcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006bce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006bd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006bd6:	81a3      	strheq	r3, [r4, #12]
 8006bd8:	bf18      	it	ne
 8006bda:	81a3      	strhne	r3, [r4, #12]
 8006bdc:	bd10      	pop	{r4, pc}

08006bde <__sclose>:
 8006bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be2:	f000 b8a1 	b.w	8006d28 <_close_r>

08006be6 <__swbuf_r>:
 8006be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be8:	460e      	mov	r6, r1
 8006bea:	4614      	mov	r4, r2
 8006bec:	4605      	mov	r5, r0
 8006bee:	b118      	cbz	r0, 8006bf8 <__swbuf_r+0x12>
 8006bf0:	6a03      	ldr	r3, [r0, #32]
 8006bf2:	b90b      	cbnz	r3, 8006bf8 <__swbuf_r+0x12>
 8006bf4:	f7ff fe64 	bl	80068c0 <__sinit>
 8006bf8:	69a3      	ldr	r3, [r4, #24]
 8006bfa:	60a3      	str	r3, [r4, #8]
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	071a      	lsls	r2, r3, #28
 8006c00:	d501      	bpl.n	8006c06 <__swbuf_r+0x20>
 8006c02:	6923      	ldr	r3, [r4, #16]
 8006c04:	b943      	cbnz	r3, 8006c18 <__swbuf_r+0x32>
 8006c06:	4621      	mov	r1, r4
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f000 f82b 	bl	8006c64 <__swsetup_r>
 8006c0e:	b118      	cbz	r0, 8006c18 <__swbuf_r+0x32>
 8006c10:	f04f 37ff 	mov.w	r7, #4294967295
 8006c14:	4638      	mov	r0, r7
 8006c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	6922      	ldr	r2, [r4, #16]
 8006c1c:	1a98      	subs	r0, r3, r2
 8006c1e:	6963      	ldr	r3, [r4, #20]
 8006c20:	b2f6      	uxtb	r6, r6
 8006c22:	4283      	cmp	r3, r0
 8006c24:	4637      	mov	r7, r6
 8006c26:	dc05      	bgt.n	8006c34 <__swbuf_r+0x4e>
 8006c28:	4621      	mov	r1, r4
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f001 fd3e 	bl	80086ac <_fflush_r>
 8006c30:	2800      	cmp	r0, #0
 8006c32:	d1ed      	bne.n	8006c10 <__swbuf_r+0x2a>
 8006c34:	68a3      	ldr	r3, [r4, #8]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	60a3      	str	r3, [r4, #8]
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	6022      	str	r2, [r4, #0]
 8006c40:	701e      	strb	r6, [r3, #0]
 8006c42:	6962      	ldr	r2, [r4, #20]
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d004      	beq.n	8006c54 <__swbuf_r+0x6e>
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	07db      	lsls	r3, r3, #31
 8006c4e:	d5e1      	bpl.n	8006c14 <__swbuf_r+0x2e>
 8006c50:	2e0a      	cmp	r6, #10
 8006c52:	d1df      	bne.n	8006c14 <__swbuf_r+0x2e>
 8006c54:	4621      	mov	r1, r4
 8006c56:	4628      	mov	r0, r5
 8006c58:	f001 fd28 	bl	80086ac <_fflush_r>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	d0d9      	beq.n	8006c14 <__swbuf_r+0x2e>
 8006c60:	e7d6      	b.n	8006c10 <__swbuf_r+0x2a>
	...

08006c64 <__swsetup_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	4b29      	ldr	r3, [pc, #164]	@ (8006d0c <__swsetup_r+0xa8>)
 8006c68:	4605      	mov	r5, r0
 8006c6a:	6818      	ldr	r0, [r3, #0]
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	b118      	cbz	r0, 8006c78 <__swsetup_r+0x14>
 8006c70:	6a03      	ldr	r3, [r0, #32]
 8006c72:	b90b      	cbnz	r3, 8006c78 <__swsetup_r+0x14>
 8006c74:	f7ff fe24 	bl	80068c0 <__sinit>
 8006c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c7c:	0719      	lsls	r1, r3, #28
 8006c7e:	d422      	bmi.n	8006cc6 <__swsetup_r+0x62>
 8006c80:	06da      	lsls	r2, r3, #27
 8006c82:	d407      	bmi.n	8006c94 <__swsetup_r+0x30>
 8006c84:	2209      	movs	r2, #9
 8006c86:	602a      	str	r2, [r5, #0]
 8006c88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c8c:	81a3      	strh	r3, [r4, #12]
 8006c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c92:	e033      	b.n	8006cfc <__swsetup_r+0x98>
 8006c94:	0758      	lsls	r0, r3, #29
 8006c96:	d512      	bpl.n	8006cbe <__swsetup_r+0x5a>
 8006c98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c9a:	b141      	cbz	r1, 8006cae <__swsetup_r+0x4a>
 8006c9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ca0:	4299      	cmp	r1, r3
 8006ca2:	d002      	beq.n	8006caa <__swsetup_r+0x46>
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	f000 feb9 	bl	8007a1c <_free_r>
 8006caa:	2300      	movs	r3, #0
 8006cac:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cae:	89a3      	ldrh	r3, [r4, #12]
 8006cb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006cb4:	81a3      	strh	r3, [r4, #12]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	6063      	str	r3, [r4, #4]
 8006cba:	6923      	ldr	r3, [r4, #16]
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	89a3      	ldrh	r3, [r4, #12]
 8006cc0:	f043 0308 	orr.w	r3, r3, #8
 8006cc4:	81a3      	strh	r3, [r4, #12]
 8006cc6:	6923      	ldr	r3, [r4, #16]
 8006cc8:	b94b      	cbnz	r3, 8006cde <__swsetup_r+0x7a>
 8006cca:	89a3      	ldrh	r3, [r4, #12]
 8006ccc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006cd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cd4:	d003      	beq.n	8006cde <__swsetup_r+0x7a>
 8006cd6:	4621      	mov	r1, r4
 8006cd8:	4628      	mov	r0, r5
 8006cda:	f001 fd47 	bl	800876c <__smakebuf_r>
 8006cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ce2:	f013 0201 	ands.w	r2, r3, #1
 8006ce6:	d00a      	beq.n	8006cfe <__swsetup_r+0x9a>
 8006ce8:	2200      	movs	r2, #0
 8006cea:	60a2      	str	r2, [r4, #8]
 8006cec:	6962      	ldr	r2, [r4, #20]
 8006cee:	4252      	negs	r2, r2
 8006cf0:	61a2      	str	r2, [r4, #24]
 8006cf2:	6922      	ldr	r2, [r4, #16]
 8006cf4:	b942      	cbnz	r2, 8006d08 <__swsetup_r+0xa4>
 8006cf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006cfa:	d1c5      	bne.n	8006c88 <__swsetup_r+0x24>
 8006cfc:	bd38      	pop	{r3, r4, r5, pc}
 8006cfe:	0799      	lsls	r1, r3, #30
 8006d00:	bf58      	it	pl
 8006d02:	6962      	ldrpl	r2, [r4, #20]
 8006d04:	60a2      	str	r2, [r4, #8]
 8006d06:	e7f4      	b.n	8006cf2 <__swsetup_r+0x8e>
 8006d08:	2000      	movs	r0, #0
 8006d0a:	e7f7      	b.n	8006cfc <__swsetup_r+0x98>
 8006d0c:	2000001c 	.word	0x2000001c

08006d10 <memset>:
 8006d10:	4402      	add	r2, r0
 8006d12:	4603      	mov	r3, r0
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d100      	bne.n	8006d1a <memset+0xa>
 8006d18:	4770      	bx	lr
 8006d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d1e:	e7f9      	b.n	8006d14 <memset+0x4>

08006d20 <_localeconv_r>:
 8006d20:	4800      	ldr	r0, [pc, #0]	@ (8006d24 <_localeconv_r+0x4>)
 8006d22:	4770      	bx	lr
 8006d24:	2000015c 	.word	0x2000015c

08006d28 <_close_r>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	4d06      	ldr	r5, [pc, #24]	@ (8006d44 <_close_r+0x1c>)
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	4604      	mov	r4, r0
 8006d30:	4608      	mov	r0, r1
 8006d32:	602b      	str	r3, [r5, #0]
 8006d34:	f7fa f9ba 	bl	80010ac <_close>
 8006d38:	1c43      	adds	r3, r0, #1
 8006d3a:	d102      	bne.n	8006d42 <_close_r+0x1a>
 8006d3c:	682b      	ldr	r3, [r5, #0]
 8006d3e:	b103      	cbz	r3, 8006d42 <_close_r+0x1a>
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	bd38      	pop	{r3, r4, r5, pc}
 8006d44:	20000530 	.word	0x20000530

08006d48 <_lseek_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	4d07      	ldr	r5, [pc, #28]	@ (8006d68 <_lseek_r+0x20>)
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	4608      	mov	r0, r1
 8006d50:	4611      	mov	r1, r2
 8006d52:	2200      	movs	r2, #0
 8006d54:	602a      	str	r2, [r5, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	f7fa f9cf 	bl	80010fa <_lseek>
 8006d5c:	1c43      	adds	r3, r0, #1
 8006d5e:	d102      	bne.n	8006d66 <_lseek_r+0x1e>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	b103      	cbz	r3, 8006d66 <_lseek_r+0x1e>
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	bd38      	pop	{r3, r4, r5, pc}
 8006d68:	20000530 	.word	0x20000530

08006d6c <_read_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	4d07      	ldr	r5, [pc, #28]	@ (8006d8c <_read_r+0x20>)
 8006d70:	4604      	mov	r4, r0
 8006d72:	4608      	mov	r0, r1
 8006d74:	4611      	mov	r1, r2
 8006d76:	2200      	movs	r2, #0
 8006d78:	602a      	str	r2, [r5, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	f7fa f95d 	bl	800103a <_read>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d102      	bne.n	8006d8a <_read_r+0x1e>
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	b103      	cbz	r3, 8006d8a <_read_r+0x1e>
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	bd38      	pop	{r3, r4, r5, pc}
 8006d8c:	20000530 	.word	0x20000530

08006d90 <_write_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	4d07      	ldr	r5, [pc, #28]	@ (8006db0 <_write_r+0x20>)
 8006d94:	4604      	mov	r4, r0
 8006d96:	4608      	mov	r0, r1
 8006d98:	4611      	mov	r1, r2
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	602a      	str	r2, [r5, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f7fa f968 	bl	8001074 <_write>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d102      	bne.n	8006dae <_write_r+0x1e>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	b103      	cbz	r3, 8006dae <_write_r+0x1e>
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	20000530 	.word	0x20000530

08006db4 <__libc_init_array>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	4d0d      	ldr	r5, [pc, #52]	@ (8006dec <__libc_init_array+0x38>)
 8006db8:	4c0d      	ldr	r4, [pc, #52]	@ (8006df0 <__libc_init_array+0x3c>)
 8006dba:	1b64      	subs	r4, r4, r5
 8006dbc:	10a4      	asrs	r4, r4, #2
 8006dbe:	2600      	movs	r6, #0
 8006dc0:	42a6      	cmp	r6, r4
 8006dc2:	d109      	bne.n	8006dd8 <__libc_init_array+0x24>
 8006dc4:	4d0b      	ldr	r5, [pc, #44]	@ (8006df4 <__libc_init_array+0x40>)
 8006dc6:	4c0c      	ldr	r4, [pc, #48]	@ (8006df8 <__libc_init_array+0x44>)
 8006dc8:	f001 fdbc 	bl	8008944 <_init>
 8006dcc:	1b64      	subs	r4, r4, r5
 8006dce:	10a4      	asrs	r4, r4, #2
 8006dd0:	2600      	movs	r6, #0
 8006dd2:	42a6      	cmp	r6, r4
 8006dd4:	d105      	bne.n	8006de2 <__libc_init_array+0x2e>
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}
 8006dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ddc:	4798      	blx	r3
 8006dde:	3601      	adds	r6, #1
 8006de0:	e7ee      	b.n	8006dc0 <__libc_init_array+0xc>
 8006de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de6:	4798      	blx	r3
 8006de8:	3601      	adds	r6, #1
 8006dea:	e7f2      	b.n	8006dd2 <__libc_init_array+0x1e>
 8006dec:	08008d2c 	.word	0x08008d2c
 8006df0:	08008d2c 	.word	0x08008d2c
 8006df4:	08008d2c 	.word	0x08008d2c
 8006df8:	08008d30 	.word	0x08008d30

08006dfc <__retarget_lock_init_recursive>:
 8006dfc:	4770      	bx	lr

08006dfe <__retarget_lock_acquire_recursive>:
 8006dfe:	4770      	bx	lr

08006e00 <__retarget_lock_release_recursive>:
 8006e00:	4770      	bx	lr

08006e02 <memcpy>:
 8006e02:	440a      	add	r2, r1
 8006e04:	4291      	cmp	r1, r2
 8006e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e0a:	d100      	bne.n	8006e0e <memcpy+0xc>
 8006e0c:	4770      	bx	lr
 8006e0e:	b510      	push	{r4, lr}
 8006e10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e18:	4291      	cmp	r1, r2
 8006e1a:	d1f9      	bne.n	8006e10 <memcpy+0xe>
 8006e1c:	bd10      	pop	{r4, pc}
	...

08006e20 <__assert_func>:
 8006e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e22:	4614      	mov	r4, r2
 8006e24:	461a      	mov	r2, r3
 8006e26:	4b09      	ldr	r3, [pc, #36]	@ (8006e4c <__assert_func+0x2c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4605      	mov	r5, r0
 8006e2c:	68d8      	ldr	r0, [r3, #12]
 8006e2e:	b954      	cbnz	r4, 8006e46 <__assert_func+0x26>
 8006e30:	4b07      	ldr	r3, [pc, #28]	@ (8006e50 <__assert_func+0x30>)
 8006e32:	461c      	mov	r4, r3
 8006e34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e38:	9100      	str	r1, [sp, #0]
 8006e3a:	462b      	mov	r3, r5
 8006e3c:	4905      	ldr	r1, [pc, #20]	@ (8006e54 <__assert_func+0x34>)
 8006e3e:	f001 fc5d 	bl	80086fc <fiprintf>
 8006e42:	f001 fd01 	bl	8008848 <abort>
 8006e46:	4b04      	ldr	r3, [pc, #16]	@ (8006e58 <__assert_func+0x38>)
 8006e48:	e7f4      	b.n	8006e34 <__assert_func+0x14>
 8006e4a:	bf00      	nop
 8006e4c:	2000001c 	.word	0x2000001c
 8006e50:	08008b20 	.word	0x08008b20
 8006e54:	08008af2 	.word	0x08008af2
 8006e58:	08008ae5 	.word	0x08008ae5

08006e5c <quorem>:
 8006e5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e60:	6903      	ldr	r3, [r0, #16]
 8006e62:	690c      	ldr	r4, [r1, #16]
 8006e64:	42a3      	cmp	r3, r4
 8006e66:	4607      	mov	r7, r0
 8006e68:	db7e      	blt.n	8006f68 <quorem+0x10c>
 8006e6a:	3c01      	subs	r4, #1
 8006e6c:	f101 0814 	add.w	r8, r1, #20
 8006e70:	00a3      	lsls	r3, r4, #2
 8006e72:	f100 0514 	add.w	r5, r0, #20
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e7c:	9301      	str	r3, [sp, #4]
 8006e7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e86:	3301      	adds	r3, #1
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e92:	d32e      	bcc.n	8006ef2 <quorem+0x96>
 8006e94:	f04f 0a00 	mov.w	sl, #0
 8006e98:	46c4      	mov	ip, r8
 8006e9a:	46ae      	mov	lr, r5
 8006e9c:	46d3      	mov	fp, sl
 8006e9e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ea2:	b298      	uxth	r0, r3
 8006ea4:	fb06 a000 	mla	r0, r6, r0, sl
 8006ea8:	0c02      	lsrs	r2, r0, #16
 8006eaa:	0c1b      	lsrs	r3, r3, #16
 8006eac:	fb06 2303 	mla	r3, r6, r3, r2
 8006eb0:	f8de 2000 	ldr.w	r2, [lr]
 8006eb4:	b280      	uxth	r0, r0
 8006eb6:	b292      	uxth	r2, r2
 8006eb8:	1a12      	subs	r2, r2, r0
 8006eba:	445a      	add	r2, fp
 8006ebc:	f8de 0000 	ldr.w	r0, [lr]
 8006ec0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006eca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006ece:	b292      	uxth	r2, r2
 8006ed0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006ed4:	45e1      	cmp	r9, ip
 8006ed6:	f84e 2b04 	str.w	r2, [lr], #4
 8006eda:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006ede:	d2de      	bcs.n	8006e9e <quorem+0x42>
 8006ee0:	9b00      	ldr	r3, [sp, #0]
 8006ee2:	58eb      	ldr	r3, [r5, r3]
 8006ee4:	b92b      	cbnz	r3, 8006ef2 <quorem+0x96>
 8006ee6:	9b01      	ldr	r3, [sp, #4]
 8006ee8:	3b04      	subs	r3, #4
 8006eea:	429d      	cmp	r5, r3
 8006eec:	461a      	mov	r2, r3
 8006eee:	d32f      	bcc.n	8006f50 <quorem+0xf4>
 8006ef0:	613c      	str	r4, [r7, #16]
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	f001 f90c 	bl	8008110 <__mcmp>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	db25      	blt.n	8006f48 <quorem+0xec>
 8006efc:	4629      	mov	r1, r5
 8006efe:	2000      	movs	r0, #0
 8006f00:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f04:	f8d1 c000 	ldr.w	ip, [r1]
 8006f08:	fa1f fe82 	uxth.w	lr, r2
 8006f0c:	fa1f f38c 	uxth.w	r3, ip
 8006f10:	eba3 030e 	sub.w	r3, r3, lr
 8006f14:	4403      	add	r3, r0
 8006f16:	0c12      	lsrs	r2, r2, #16
 8006f18:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006f1c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f26:	45c1      	cmp	r9, r8
 8006f28:	f841 3b04 	str.w	r3, [r1], #4
 8006f2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f30:	d2e6      	bcs.n	8006f00 <quorem+0xa4>
 8006f32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f3a:	b922      	cbnz	r2, 8006f46 <quorem+0xea>
 8006f3c:	3b04      	subs	r3, #4
 8006f3e:	429d      	cmp	r5, r3
 8006f40:	461a      	mov	r2, r3
 8006f42:	d30b      	bcc.n	8006f5c <quorem+0x100>
 8006f44:	613c      	str	r4, [r7, #16]
 8006f46:	3601      	adds	r6, #1
 8006f48:	4630      	mov	r0, r6
 8006f4a:	b003      	add	sp, #12
 8006f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f50:	6812      	ldr	r2, [r2, #0]
 8006f52:	3b04      	subs	r3, #4
 8006f54:	2a00      	cmp	r2, #0
 8006f56:	d1cb      	bne.n	8006ef0 <quorem+0x94>
 8006f58:	3c01      	subs	r4, #1
 8006f5a:	e7c6      	b.n	8006eea <quorem+0x8e>
 8006f5c:	6812      	ldr	r2, [r2, #0]
 8006f5e:	3b04      	subs	r3, #4
 8006f60:	2a00      	cmp	r2, #0
 8006f62:	d1ef      	bne.n	8006f44 <quorem+0xe8>
 8006f64:	3c01      	subs	r4, #1
 8006f66:	e7ea      	b.n	8006f3e <quorem+0xe2>
 8006f68:	2000      	movs	r0, #0
 8006f6a:	e7ee      	b.n	8006f4a <quorem+0xee>
 8006f6c:	0000      	movs	r0, r0
	...

08006f70 <_dtoa_r>:
 8006f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f74:	ed2d 8b02 	vpush	{d8}
 8006f78:	69c7      	ldr	r7, [r0, #28]
 8006f7a:	b091      	sub	sp, #68	@ 0x44
 8006f7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006f80:	ec55 4b10 	vmov	r4, r5, d0
 8006f84:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8006f86:	9107      	str	r1, [sp, #28]
 8006f88:	4681      	mov	r9, r0
 8006f8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f8c:	930d      	str	r3, [sp, #52]	@ 0x34
 8006f8e:	b97f      	cbnz	r7, 8006fb0 <_dtoa_r+0x40>
 8006f90:	2010      	movs	r0, #16
 8006f92:	f000 fd8d 	bl	8007ab0 <malloc>
 8006f96:	4602      	mov	r2, r0
 8006f98:	f8c9 001c 	str.w	r0, [r9, #28]
 8006f9c:	b920      	cbnz	r0, 8006fa8 <_dtoa_r+0x38>
 8006f9e:	4ba0      	ldr	r3, [pc, #640]	@ (8007220 <_dtoa_r+0x2b0>)
 8006fa0:	21ef      	movs	r1, #239	@ 0xef
 8006fa2:	48a0      	ldr	r0, [pc, #640]	@ (8007224 <_dtoa_r+0x2b4>)
 8006fa4:	f7ff ff3c 	bl	8006e20 <__assert_func>
 8006fa8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006fac:	6007      	str	r7, [r0, #0]
 8006fae:	60c7      	str	r7, [r0, #12]
 8006fb0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006fb4:	6819      	ldr	r1, [r3, #0]
 8006fb6:	b159      	cbz	r1, 8006fd0 <_dtoa_r+0x60>
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	604a      	str	r2, [r1, #4]
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	4093      	lsls	r3, r2
 8006fc0:	608b      	str	r3, [r1, #8]
 8006fc2:	4648      	mov	r0, r9
 8006fc4:	f000 fe6a 	bl	8007c9c <_Bfree>
 8006fc8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	1e2b      	subs	r3, r5, #0
 8006fd2:	bfbb      	ittet	lt
 8006fd4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006fd8:	9303      	strlt	r3, [sp, #12]
 8006fda:	2300      	movge	r3, #0
 8006fdc:	2201      	movlt	r2, #1
 8006fde:	bfac      	ite	ge
 8006fe0:	6033      	strge	r3, [r6, #0]
 8006fe2:	6032      	strlt	r2, [r6, #0]
 8006fe4:	4b90      	ldr	r3, [pc, #576]	@ (8007228 <_dtoa_r+0x2b8>)
 8006fe6:	9e03      	ldr	r6, [sp, #12]
 8006fe8:	43b3      	bics	r3, r6
 8006fea:	d110      	bne.n	800700e <_dtoa_r+0x9e>
 8006fec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006fee:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ff2:	6013      	str	r3, [r2, #0]
 8006ff4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8006ff8:	4323      	orrs	r3, r4
 8006ffa:	f000 84de 	beq.w	80079ba <_dtoa_r+0xa4a>
 8006ffe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007000:	4f8a      	ldr	r7, [pc, #552]	@ (800722c <_dtoa_r+0x2bc>)
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 84e0 	beq.w	80079c8 <_dtoa_r+0xa58>
 8007008:	1cfb      	adds	r3, r7, #3
 800700a:	f000 bcdb 	b.w	80079c4 <_dtoa_r+0xa54>
 800700e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007012:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800701a:	d10a      	bne.n	8007032 <_dtoa_r+0xc2>
 800701c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800701e:	2301      	movs	r3, #1
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007024:	b113      	cbz	r3, 800702c <_dtoa_r+0xbc>
 8007026:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007028:	4b81      	ldr	r3, [pc, #516]	@ (8007230 <_dtoa_r+0x2c0>)
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	4f81      	ldr	r7, [pc, #516]	@ (8007234 <_dtoa_r+0x2c4>)
 800702e:	f000 bccb 	b.w	80079c8 <_dtoa_r+0xa58>
 8007032:	aa0e      	add	r2, sp, #56	@ 0x38
 8007034:	a90f      	add	r1, sp, #60	@ 0x3c
 8007036:	4648      	mov	r0, r9
 8007038:	eeb0 0b48 	vmov.f64	d0, d8
 800703c:	f001 f918 	bl	8008270 <__d2b>
 8007040:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007044:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007046:	9001      	str	r0, [sp, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d045      	beq.n	80070d8 <_dtoa_r+0x168>
 800704c:	eeb0 7b48 	vmov.f64	d7, d8
 8007050:	ee18 1a90 	vmov	r1, s17
 8007054:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007058:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800705c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007060:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007064:	2500      	movs	r5, #0
 8007066:	ee07 1a90 	vmov	s15, r1
 800706a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800706e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007208 <_dtoa_r+0x298>
 8007072:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007076:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007210 <_dtoa_r+0x2a0>
 800707a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800707e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007218 <_dtoa_r+0x2a8>
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800708a:	eeb0 7b46 	vmov.f64	d7, d6
 800708e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007092:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007096:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800709a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800709e:	ee16 8a90 	vmov	r8, s13
 80070a2:	d508      	bpl.n	80070b6 <_dtoa_r+0x146>
 80070a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80070a8:	eeb4 6b47 	vcmp.f64	d6, d7
 80070ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b0:	bf18      	it	ne
 80070b2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80070b6:	f1b8 0f16 	cmp.w	r8, #22
 80070ba:	d82b      	bhi.n	8007114 <_dtoa_r+0x1a4>
 80070bc:	495e      	ldr	r1, [pc, #376]	@ (8007238 <_dtoa_r+0x2c8>)
 80070be:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80070c2:	ed91 7b00 	vldr	d7, [r1]
 80070c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80070ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ce:	d501      	bpl.n	80070d4 <_dtoa_r+0x164>
 80070d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80070d4:	2100      	movs	r1, #0
 80070d6:	e01e      	b.n	8007116 <_dtoa_r+0x1a6>
 80070d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070da:	4413      	add	r3, r2
 80070dc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80070e0:	2920      	cmp	r1, #32
 80070e2:	bfc1      	itttt	gt
 80070e4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80070e8:	408e      	lslgt	r6, r1
 80070ea:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80070ee:	fa24 f101 	lsrgt.w	r1, r4, r1
 80070f2:	bfd6      	itet	le
 80070f4:	f1c1 0120 	rsble	r1, r1, #32
 80070f8:	4331      	orrgt	r1, r6
 80070fa:	fa04 f101 	lslle.w	r1, r4, r1
 80070fe:	ee07 1a90 	vmov	s15, r1
 8007102:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007106:	3b01      	subs	r3, #1
 8007108:	ee17 1a90 	vmov	r1, s15
 800710c:	2501      	movs	r5, #1
 800710e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007112:	e7a8      	b.n	8007066 <_dtoa_r+0xf6>
 8007114:	2101      	movs	r1, #1
 8007116:	1ad2      	subs	r2, r2, r3
 8007118:	1e53      	subs	r3, r2, #1
 800711a:	9306      	str	r3, [sp, #24]
 800711c:	bf45      	ittet	mi
 800711e:	f1c2 0301 	rsbmi	r3, r2, #1
 8007122:	9305      	strmi	r3, [sp, #20]
 8007124:	2300      	movpl	r3, #0
 8007126:	2300      	movmi	r3, #0
 8007128:	bf4c      	ite	mi
 800712a:	9306      	strmi	r3, [sp, #24]
 800712c:	9305      	strpl	r3, [sp, #20]
 800712e:	f1b8 0f00 	cmp.w	r8, #0
 8007132:	910c      	str	r1, [sp, #48]	@ 0x30
 8007134:	db18      	blt.n	8007168 <_dtoa_r+0x1f8>
 8007136:	9b06      	ldr	r3, [sp, #24]
 8007138:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800713c:	4443      	add	r3, r8
 800713e:	9306      	str	r3, [sp, #24]
 8007140:	2300      	movs	r3, #0
 8007142:	9a07      	ldr	r2, [sp, #28]
 8007144:	2a09      	cmp	r2, #9
 8007146:	d849      	bhi.n	80071dc <_dtoa_r+0x26c>
 8007148:	2a05      	cmp	r2, #5
 800714a:	bfc4      	itt	gt
 800714c:	3a04      	subgt	r2, #4
 800714e:	9207      	strgt	r2, [sp, #28]
 8007150:	9a07      	ldr	r2, [sp, #28]
 8007152:	f1a2 0202 	sub.w	r2, r2, #2
 8007156:	bfcc      	ite	gt
 8007158:	2400      	movgt	r4, #0
 800715a:	2401      	movle	r4, #1
 800715c:	2a03      	cmp	r2, #3
 800715e:	d848      	bhi.n	80071f2 <_dtoa_r+0x282>
 8007160:	e8df f002 	tbb	[pc, r2]
 8007164:	3a2c2e0b 	.word	0x3a2c2e0b
 8007168:	9b05      	ldr	r3, [sp, #20]
 800716a:	2200      	movs	r2, #0
 800716c:	eba3 0308 	sub.w	r3, r3, r8
 8007170:	9305      	str	r3, [sp, #20]
 8007172:	920a      	str	r2, [sp, #40]	@ 0x28
 8007174:	f1c8 0300 	rsb	r3, r8, #0
 8007178:	e7e3      	b.n	8007142 <_dtoa_r+0x1d2>
 800717a:	2200      	movs	r2, #0
 800717c:	9208      	str	r2, [sp, #32]
 800717e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007180:	2a00      	cmp	r2, #0
 8007182:	dc39      	bgt.n	80071f8 <_dtoa_r+0x288>
 8007184:	f04f 0b01 	mov.w	fp, #1
 8007188:	46da      	mov	sl, fp
 800718a:	465a      	mov	r2, fp
 800718c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007190:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8007194:	2100      	movs	r1, #0
 8007196:	2004      	movs	r0, #4
 8007198:	f100 0614 	add.w	r6, r0, #20
 800719c:	4296      	cmp	r6, r2
 800719e:	d930      	bls.n	8007202 <_dtoa_r+0x292>
 80071a0:	6079      	str	r1, [r7, #4]
 80071a2:	4648      	mov	r0, r9
 80071a4:	9304      	str	r3, [sp, #16]
 80071a6:	f000 fd39 	bl	8007c1c <_Balloc>
 80071aa:	9b04      	ldr	r3, [sp, #16]
 80071ac:	4607      	mov	r7, r0
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d146      	bne.n	8007240 <_dtoa_r+0x2d0>
 80071b2:	4b22      	ldr	r3, [pc, #136]	@ (800723c <_dtoa_r+0x2cc>)
 80071b4:	4602      	mov	r2, r0
 80071b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80071ba:	e6f2      	b.n	8006fa2 <_dtoa_r+0x32>
 80071bc:	2201      	movs	r2, #1
 80071be:	e7dd      	b.n	800717c <_dtoa_r+0x20c>
 80071c0:	2200      	movs	r2, #0
 80071c2:	9208      	str	r2, [sp, #32]
 80071c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071c6:	eb08 0b02 	add.w	fp, r8, r2
 80071ca:	f10b 0a01 	add.w	sl, fp, #1
 80071ce:	4652      	mov	r2, sl
 80071d0:	2a01      	cmp	r2, #1
 80071d2:	bfb8      	it	lt
 80071d4:	2201      	movlt	r2, #1
 80071d6:	e7db      	b.n	8007190 <_dtoa_r+0x220>
 80071d8:	2201      	movs	r2, #1
 80071da:	e7f2      	b.n	80071c2 <_dtoa_r+0x252>
 80071dc:	2401      	movs	r4, #1
 80071de:	2200      	movs	r2, #0
 80071e0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80071e4:	f04f 3bff 	mov.w	fp, #4294967295
 80071e8:	2100      	movs	r1, #0
 80071ea:	46da      	mov	sl, fp
 80071ec:	2212      	movs	r2, #18
 80071ee:	9109      	str	r1, [sp, #36]	@ 0x24
 80071f0:	e7ce      	b.n	8007190 <_dtoa_r+0x220>
 80071f2:	2201      	movs	r2, #1
 80071f4:	9208      	str	r2, [sp, #32]
 80071f6:	e7f5      	b.n	80071e4 <_dtoa_r+0x274>
 80071f8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80071fc:	46da      	mov	sl, fp
 80071fe:	465a      	mov	r2, fp
 8007200:	e7c6      	b.n	8007190 <_dtoa_r+0x220>
 8007202:	3101      	adds	r1, #1
 8007204:	0040      	lsls	r0, r0, #1
 8007206:	e7c7      	b.n	8007198 <_dtoa_r+0x228>
 8007208:	636f4361 	.word	0x636f4361
 800720c:	3fd287a7 	.word	0x3fd287a7
 8007210:	8b60c8b3 	.word	0x8b60c8b3
 8007214:	3fc68a28 	.word	0x3fc68a28
 8007218:	509f79fb 	.word	0x509f79fb
 800721c:	3fd34413 	.word	0x3fd34413
 8007220:	08008b2e 	.word	0x08008b2e
 8007224:	08008b45 	.word	0x08008b45
 8007228:	7ff00000 	.word	0x7ff00000
 800722c:	08008b2a 	.word	0x08008b2a
 8007230:	08008ac2 	.word	0x08008ac2
 8007234:	08008ac1 	.word	0x08008ac1
 8007238:	08008c40 	.word	0x08008c40
 800723c:	08008b9d 	.word	0x08008b9d
 8007240:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8007244:	f1ba 0f0e 	cmp.w	sl, #14
 8007248:	6010      	str	r0, [r2, #0]
 800724a:	d86f      	bhi.n	800732c <_dtoa_r+0x3bc>
 800724c:	2c00      	cmp	r4, #0
 800724e:	d06d      	beq.n	800732c <_dtoa_r+0x3bc>
 8007250:	f1b8 0f00 	cmp.w	r8, #0
 8007254:	f340 80c2 	ble.w	80073dc <_dtoa_r+0x46c>
 8007258:	4aca      	ldr	r2, [pc, #808]	@ (8007584 <_dtoa_r+0x614>)
 800725a:	f008 010f 	and.w	r1, r8, #15
 800725e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007262:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8007266:	ed92 7b00 	vldr	d7, [r2]
 800726a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800726e:	f000 80a9 	beq.w	80073c4 <_dtoa_r+0x454>
 8007272:	4ac5      	ldr	r2, [pc, #788]	@ (8007588 <_dtoa_r+0x618>)
 8007274:	ed92 6b08 	vldr	d6, [r2, #32]
 8007278:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800727c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007280:	f001 010f 	and.w	r1, r1, #15
 8007284:	2203      	movs	r2, #3
 8007286:	48c0      	ldr	r0, [pc, #768]	@ (8007588 <_dtoa_r+0x618>)
 8007288:	2900      	cmp	r1, #0
 800728a:	f040 809d 	bne.w	80073c8 <_dtoa_r+0x458>
 800728e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007292:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007296:	ed8d 7b02 	vstr	d7, [sp, #8]
 800729a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800729c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072a0:	2900      	cmp	r1, #0
 80072a2:	f000 80c1 	beq.w	8007428 <_dtoa_r+0x4b8>
 80072a6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80072aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80072ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b2:	f140 80b9 	bpl.w	8007428 <_dtoa_r+0x4b8>
 80072b6:	f1ba 0f00 	cmp.w	sl, #0
 80072ba:	f000 80b5 	beq.w	8007428 <_dtoa_r+0x4b8>
 80072be:	f1bb 0f00 	cmp.w	fp, #0
 80072c2:	dd31      	ble.n	8007328 <_dtoa_r+0x3b8>
 80072c4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80072c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80072cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80072d0:	f108 31ff 	add.w	r1, r8, #4294967295
 80072d4:	9104      	str	r1, [sp, #16]
 80072d6:	3201      	adds	r2, #1
 80072d8:	465c      	mov	r4, fp
 80072da:	ed9d 6b02 	vldr	d6, [sp, #8]
 80072de:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80072e2:	ee07 2a90 	vmov	s15, r2
 80072e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80072ea:	eea7 5b06 	vfma.f64	d5, d7, d6
 80072ee:	ee15 2a90 	vmov	r2, s11
 80072f2:	ec51 0b15 	vmov	r0, r1, d5
 80072f6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80072fa:	2c00      	cmp	r4, #0
 80072fc:	f040 8098 	bne.w	8007430 <_dtoa_r+0x4c0>
 8007300:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007304:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007308:	ec41 0b17 	vmov	d7, r0, r1
 800730c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007314:	f300 8261 	bgt.w	80077da <_dtoa_r+0x86a>
 8007318:	eeb1 7b47 	vneg.f64	d7, d7
 800731c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007324:	f100 80f5 	bmi.w	8007512 <_dtoa_r+0x5a2>
 8007328:	ed8d 8b02 	vstr	d8, [sp, #8]
 800732c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800732e:	2a00      	cmp	r2, #0
 8007330:	f2c0 812c 	blt.w	800758c <_dtoa_r+0x61c>
 8007334:	f1b8 0f0e 	cmp.w	r8, #14
 8007338:	f300 8128 	bgt.w	800758c <_dtoa_r+0x61c>
 800733c:	4b91      	ldr	r3, [pc, #580]	@ (8007584 <_dtoa_r+0x614>)
 800733e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007342:	ed93 6b00 	vldr	d6, [r3]
 8007346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007348:	2b00      	cmp	r3, #0
 800734a:	da03      	bge.n	8007354 <_dtoa_r+0x3e4>
 800734c:	f1ba 0f00 	cmp.w	sl, #0
 8007350:	f340 80d2 	ble.w	80074f8 <_dtoa_r+0x588>
 8007354:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007358:	ed9d 7b02 	vldr	d7, [sp, #8]
 800735c:	463e      	mov	r6, r7
 800735e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007362:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007366:	ee15 3a10 	vmov	r3, s10
 800736a:	3330      	adds	r3, #48	@ 0x30
 800736c:	f806 3b01 	strb.w	r3, [r6], #1
 8007370:	1bf3      	subs	r3, r6, r7
 8007372:	459a      	cmp	sl, r3
 8007374:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007378:	eea3 7b46 	vfms.f64	d7, d3, d6
 800737c:	f040 80f8 	bne.w	8007570 <_dtoa_r+0x600>
 8007380:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007384:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800738c:	f300 80dd 	bgt.w	800754a <_dtoa_r+0x5da>
 8007390:	eeb4 7b46 	vcmp.f64	d7, d6
 8007394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007398:	d104      	bne.n	80073a4 <_dtoa_r+0x434>
 800739a:	ee15 3a10 	vmov	r3, s10
 800739e:	07db      	lsls	r3, r3, #31
 80073a0:	f100 80d3 	bmi.w	800754a <_dtoa_r+0x5da>
 80073a4:	9901      	ldr	r1, [sp, #4]
 80073a6:	4648      	mov	r0, r9
 80073a8:	f000 fc78 	bl	8007c9c <_Bfree>
 80073ac:	2300      	movs	r3, #0
 80073ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80073b0:	7033      	strb	r3, [r6, #0]
 80073b2:	f108 0301 	add.w	r3, r8, #1
 80073b6:	6013      	str	r3, [r2, #0]
 80073b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 8304 	beq.w	80079c8 <_dtoa_r+0xa58>
 80073c0:	601e      	str	r6, [r3, #0]
 80073c2:	e301      	b.n	80079c8 <_dtoa_r+0xa58>
 80073c4:	2202      	movs	r2, #2
 80073c6:	e75e      	b.n	8007286 <_dtoa_r+0x316>
 80073c8:	07cc      	lsls	r4, r1, #31
 80073ca:	d504      	bpl.n	80073d6 <_dtoa_r+0x466>
 80073cc:	ed90 6b00 	vldr	d6, [r0]
 80073d0:	3201      	adds	r2, #1
 80073d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80073d6:	1049      	asrs	r1, r1, #1
 80073d8:	3008      	adds	r0, #8
 80073da:	e755      	b.n	8007288 <_dtoa_r+0x318>
 80073dc:	d022      	beq.n	8007424 <_dtoa_r+0x4b4>
 80073de:	f1c8 0100 	rsb	r1, r8, #0
 80073e2:	4a68      	ldr	r2, [pc, #416]	@ (8007584 <_dtoa_r+0x614>)
 80073e4:	f001 000f 	and.w	r0, r1, #15
 80073e8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80073ec:	ed92 7b00 	vldr	d7, [r2]
 80073f0:	ee28 7b07 	vmul.f64	d7, d8, d7
 80073f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80073f8:	4863      	ldr	r0, [pc, #396]	@ (8007588 <_dtoa_r+0x618>)
 80073fa:	1109      	asrs	r1, r1, #4
 80073fc:	2400      	movs	r4, #0
 80073fe:	2202      	movs	r2, #2
 8007400:	b929      	cbnz	r1, 800740e <_dtoa_r+0x49e>
 8007402:	2c00      	cmp	r4, #0
 8007404:	f43f af49 	beq.w	800729a <_dtoa_r+0x32a>
 8007408:	ed8d 7b02 	vstr	d7, [sp, #8]
 800740c:	e745      	b.n	800729a <_dtoa_r+0x32a>
 800740e:	07ce      	lsls	r6, r1, #31
 8007410:	d505      	bpl.n	800741e <_dtoa_r+0x4ae>
 8007412:	ed90 6b00 	vldr	d6, [r0]
 8007416:	3201      	adds	r2, #1
 8007418:	2401      	movs	r4, #1
 800741a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800741e:	1049      	asrs	r1, r1, #1
 8007420:	3008      	adds	r0, #8
 8007422:	e7ed      	b.n	8007400 <_dtoa_r+0x490>
 8007424:	2202      	movs	r2, #2
 8007426:	e738      	b.n	800729a <_dtoa_r+0x32a>
 8007428:	f8cd 8010 	str.w	r8, [sp, #16]
 800742c:	4654      	mov	r4, sl
 800742e:	e754      	b.n	80072da <_dtoa_r+0x36a>
 8007430:	4a54      	ldr	r2, [pc, #336]	@ (8007584 <_dtoa_r+0x614>)
 8007432:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007436:	ed12 4b02 	vldr	d4, [r2, #-8]
 800743a:	9a08      	ldr	r2, [sp, #32]
 800743c:	ec41 0b17 	vmov	d7, r0, r1
 8007440:	443c      	add	r4, r7
 8007442:	b34a      	cbz	r2, 8007498 <_dtoa_r+0x528>
 8007444:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007448:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800744c:	463e      	mov	r6, r7
 800744e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007452:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007456:	ee35 7b47 	vsub.f64	d7, d5, d7
 800745a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800745e:	ee14 2a90 	vmov	r2, s9
 8007462:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007466:	3230      	adds	r2, #48	@ 0x30
 8007468:	ee36 6b45 	vsub.f64	d6, d6, d5
 800746c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007474:	f806 2b01 	strb.w	r2, [r6], #1
 8007478:	d438      	bmi.n	80074ec <_dtoa_r+0x57c>
 800747a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800747e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007486:	d462      	bmi.n	800754e <_dtoa_r+0x5de>
 8007488:	42a6      	cmp	r6, r4
 800748a:	f43f af4d 	beq.w	8007328 <_dtoa_r+0x3b8>
 800748e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007492:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007496:	e7e0      	b.n	800745a <_dtoa_r+0x4ea>
 8007498:	4621      	mov	r1, r4
 800749a:	463e      	mov	r6, r7
 800749c:	ee27 7b04 	vmul.f64	d7, d7, d4
 80074a0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80074a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80074a8:	ee14 2a90 	vmov	r2, s9
 80074ac:	3230      	adds	r2, #48	@ 0x30
 80074ae:	f806 2b01 	strb.w	r2, [r6], #1
 80074b2:	42a6      	cmp	r6, r4
 80074b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80074b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80074bc:	d119      	bne.n	80074f2 <_dtoa_r+0x582>
 80074be:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80074c2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80074c6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80074ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ce:	dc3e      	bgt.n	800754e <_dtoa_r+0x5de>
 80074d0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80074d4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80074d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074dc:	f57f af24 	bpl.w	8007328 <_dtoa_r+0x3b8>
 80074e0:	460e      	mov	r6, r1
 80074e2:	3901      	subs	r1, #1
 80074e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074e8:	2b30      	cmp	r3, #48	@ 0x30
 80074ea:	d0f9      	beq.n	80074e0 <_dtoa_r+0x570>
 80074ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80074f0:	e758      	b.n	80073a4 <_dtoa_r+0x434>
 80074f2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80074f6:	e7d5      	b.n	80074a4 <_dtoa_r+0x534>
 80074f8:	d10b      	bne.n	8007512 <_dtoa_r+0x5a2>
 80074fa:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80074fe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007502:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007506:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800750a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800750e:	f2c0 8161 	blt.w	80077d4 <_dtoa_r+0x864>
 8007512:	2400      	movs	r4, #0
 8007514:	4625      	mov	r5, r4
 8007516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007518:	43db      	mvns	r3, r3
 800751a:	9304      	str	r3, [sp, #16]
 800751c:	463e      	mov	r6, r7
 800751e:	f04f 0800 	mov.w	r8, #0
 8007522:	4621      	mov	r1, r4
 8007524:	4648      	mov	r0, r9
 8007526:	f000 fbb9 	bl	8007c9c <_Bfree>
 800752a:	2d00      	cmp	r5, #0
 800752c:	d0de      	beq.n	80074ec <_dtoa_r+0x57c>
 800752e:	f1b8 0f00 	cmp.w	r8, #0
 8007532:	d005      	beq.n	8007540 <_dtoa_r+0x5d0>
 8007534:	45a8      	cmp	r8, r5
 8007536:	d003      	beq.n	8007540 <_dtoa_r+0x5d0>
 8007538:	4641      	mov	r1, r8
 800753a:	4648      	mov	r0, r9
 800753c:	f000 fbae 	bl	8007c9c <_Bfree>
 8007540:	4629      	mov	r1, r5
 8007542:	4648      	mov	r0, r9
 8007544:	f000 fbaa 	bl	8007c9c <_Bfree>
 8007548:	e7d0      	b.n	80074ec <_dtoa_r+0x57c>
 800754a:	f8cd 8010 	str.w	r8, [sp, #16]
 800754e:	4633      	mov	r3, r6
 8007550:	461e      	mov	r6, r3
 8007552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007556:	2a39      	cmp	r2, #57	@ 0x39
 8007558:	d106      	bne.n	8007568 <_dtoa_r+0x5f8>
 800755a:	429f      	cmp	r7, r3
 800755c:	d1f8      	bne.n	8007550 <_dtoa_r+0x5e0>
 800755e:	9a04      	ldr	r2, [sp, #16]
 8007560:	3201      	adds	r2, #1
 8007562:	9204      	str	r2, [sp, #16]
 8007564:	2230      	movs	r2, #48	@ 0x30
 8007566:	703a      	strb	r2, [r7, #0]
 8007568:	781a      	ldrb	r2, [r3, #0]
 800756a:	3201      	adds	r2, #1
 800756c:	701a      	strb	r2, [r3, #0]
 800756e:	e7bd      	b.n	80074ec <_dtoa_r+0x57c>
 8007570:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007574:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800757c:	f47f aeef 	bne.w	800735e <_dtoa_r+0x3ee>
 8007580:	e710      	b.n	80073a4 <_dtoa_r+0x434>
 8007582:	bf00      	nop
 8007584:	08008c40 	.word	0x08008c40
 8007588:	08008c18 	.word	0x08008c18
 800758c:	9908      	ldr	r1, [sp, #32]
 800758e:	2900      	cmp	r1, #0
 8007590:	f000 80e3 	beq.w	800775a <_dtoa_r+0x7ea>
 8007594:	9907      	ldr	r1, [sp, #28]
 8007596:	2901      	cmp	r1, #1
 8007598:	f300 80c8 	bgt.w	800772c <_dtoa_r+0x7bc>
 800759c:	2d00      	cmp	r5, #0
 800759e:	f000 80c1 	beq.w	8007724 <_dtoa_r+0x7b4>
 80075a2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80075a6:	9e05      	ldr	r6, [sp, #20]
 80075a8:	461c      	mov	r4, r3
 80075aa:	9304      	str	r3, [sp, #16]
 80075ac:	9b05      	ldr	r3, [sp, #20]
 80075ae:	4413      	add	r3, r2
 80075b0:	9305      	str	r3, [sp, #20]
 80075b2:	9b06      	ldr	r3, [sp, #24]
 80075b4:	2101      	movs	r1, #1
 80075b6:	4413      	add	r3, r2
 80075b8:	4648      	mov	r0, r9
 80075ba:	9306      	str	r3, [sp, #24]
 80075bc:	f000 fc22 	bl	8007e04 <__i2b>
 80075c0:	9b04      	ldr	r3, [sp, #16]
 80075c2:	4605      	mov	r5, r0
 80075c4:	b166      	cbz	r6, 80075e0 <_dtoa_r+0x670>
 80075c6:	9a06      	ldr	r2, [sp, #24]
 80075c8:	2a00      	cmp	r2, #0
 80075ca:	dd09      	ble.n	80075e0 <_dtoa_r+0x670>
 80075cc:	42b2      	cmp	r2, r6
 80075ce:	9905      	ldr	r1, [sp, #20]
 80075d0:	bfa8      	it	ge
 80075d2:	4632      	movge	r2, r6
 80075d4:	1a89      	subs	r1, r1, r2
 80075d6:	9105      	str	r1, [sp, #20]
 80075d8:	9906      	ldr	r1, [sp, #24]
 80075da:	1ab6      	subs	r6, r6, r2
 80075dc:	1a8a      	subs	r2, r1, r2
 80075de:	9206      	str	r2, [sp, #24]
 80075e0:	b1fb      	cbz	r3, 8007622 <_dtoa_r+0x6b2>
 80075e2:	9a08      	ldr	r2, [sp, #32]
 80075e4:	2a00      	cmp	r2, #0
 80075e6:	f000 80bc 	beq.w	8007762 <_dtoa_r+0x7f2>
 80075ea:	b19c      	cbz	r4, 8007614 <_dtoa_r+0x6a4>
 80075ec:	4629      	mov	r1, r5
 80075ee:	4622      	mov	r2, r4
 80075f0:	4648      	mov	r0, r9
 80075f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075f4:	f000 fcc6 	bl	8007f84 <__pow5mult>
 80075f8:	9a01      	ldr	r2, [sp, #4]
 80075fa:	4601      	mov	r1, r0
 80075fc:	4605      	mov	r5, r0
 80075fe:	4648      	mov	r0, r9
 8007600:	f000 fc16 	bl	8007e30 <__multiply>
 8007604:	9901      	ldr	r1, [sp, #4]
 8007606:	9004      	str	r0, [sp, #16]
 8007608:	4648      	mov	r0, r9
 800760a:	f000 fb47 	bl	8007c9c <_Bfree>
 800760e:	9a04      	ldr	r2, [sp, #16]
 8007610:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007612:	9201      	str	r2, [sp, #4]
 8007614:	1b1a      	subs	r2, r3, r4
 8007616:	d004      	beq.n	8007622 <_dtoa_r+0x6b2>
 8007618:	9901      	ldr	r1, [sp, #4]
 800761a:	4648      	mov	r0, r9
 800761c:	f000 fcb2 	bl	8007f84 <__pow5mult>
 8007620:	9001      	str	r0, [sp, #4]
 8007622:	2101      	movs	r1, #1
 8007624:	4648      	mov	r0, r9
 8007626:	f000 fbed 	bl	8007e04 <__i2b>
 800762a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800762c:	4604      	mov	r4, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	f000 81d0 	beq.w	80079d4 <_dtoa_r+0xa64>
 8007634:	461a      	mov	r2, r3
 8007636:	4601      	mov	r1, r0
 8007638:	4648      	mov	r0, r9
 800763a:	f000 fca3 	bl	8007f84 <__pow5mult>
 800763e:	9b07      	ldr	r3, [sp, #28]
 8007640:	2b01      	cmp	r3, #1
 8007642:	4604      	mov	r4, r0
 8007644:	f300 8095 	bgt.w	8007772 <_dtoa_r+0x802>
 8007648:	9b02      	ldr	r3, [sp, #8]
 800764a:	2b00      	cmp	r3, #0
 800764c:	f040 808b 	bne.w	8007766 <_dtoa_r+0x7f6>
 8007650:	9b03      	ldr	r3, [sp, #12]
 8007652:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007656:	2a00      	cmp	r2, #0
 8007658:	f040 8087 	bne.w	800776a <_dtoa_r+0x7fa>
 800765c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007660:	0d12      	lsrs	r2, r2, #20
 8007662:	0512      	lsls	r2, r2, #20
 8007664:	2a00      	cmp	r2, #0
 8007666:	f000 8082 	beq.w	800776e <_dtoa_r+0x7fe>
 800766a:	9b05      	ldr	r3, [sp, #20]
 800766c:	3301      	adds	r3, #1
 800766e:	9305      	str	r3, [sp, #20]
 8007670:	9b06      	ldr	r3, [sp, #24]
 8007672:	3301      	adds	r3, #1
 8007674:	9306      	str	r3, [sp, #24]
 8007676:	2301      	movs	r3, #1
 8007678:	930b      	str	r3, [sp, #44]	@ 0x2c
 800767a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 81af 	beq.w	80079e0 <_dtoa_r+0xa70>
 8007682:	6922      	ldr	r2, [r4, #16]
 8007684:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007688:	6910      	ldr	r0, [r2, #16]
 800768a:	f000 fb6f 	bl	8007d6c <__hi0bits>
 800768e:	f1c0 0020 	rsb	r0, r0, #32
 8007692:	9b06      	ldr	r3, [sp, #24]
 8007694:	4418      	add	r0, r3
 8007696:	f010 001f 	ands.w	r0, r0, #31
 800769a:	d076      	beq.n	800778a <_dtoa_r+0x81a>
 800769c:	f1c0 0220 	rsb	r2, r0, #32
 80076a0:	2a04      	cmp	r2, #4
 80076a2:	dd69      	ble.n	8007778 <_dtoa_r+0x808>
 80076a4:	9b05      	ldr	r3, [sp, #20]
 80076a6:	f1c0 001c 	rsb	r0, r0, #28
 80076aa:	4403      	add	r3, r0
 80076ac:	9305      	str	r3, [sp, #20]
 80076ae:	9b06      	ldr	r3, [sp, #24]
 80076b0:	4406      	add	r6, r0
 80076b2:	4403      	add	r3, r0
 80076b4:	9306      	str	r3, [sp, #24]
 80076b6:	9b05      	ldr	r3, [sp, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	dd05      	ble.n	80076c8 <_dtoa_r+0x758>
 80076bc:	9901      	ldr	r1, [sp, #4]
 80076be:	461a      	mov	r2, r3
 80076c0:	4648      	mov	r0, r9
 80076c2:	f000 fcb9 	bl	8008038 <__lshift>
 80076c6:	9001      	str	r0, [sp, #4]
 80076c8:	9b06      	ldr	r3, [sp, #24]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	dd05      	ble.n	80076da <_dtoa_r+0x76a>
 80076ce:	4621      	mov	r1, r4
 80076d0:	461a      	mov	r2, r3
 80076d2:	4648      	mov	r0, r9
 80076d4:	f000 fcb0 	bl	8008038 <__lshift>
 80076d8:	4604      	mov	r4, r0
 80076da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d056      	beq.n	800778e <_dtoa_r+0x81e>
 80076e0:	9801      	ldr	r0, [sp, #4]
 80076e2:	4621      	mov	r1, r4
 80076e4:	f000 fd14 	bl	8008110 <__mcmp>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	da50      	bge.n	800778e <_dtoa_r+0x81e>
 80076ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80076f0:	9304      	str	r3, [sp, #16]
 80076f2:	9901      	ldr	r1, [sp, #4]
 80076f4:	2300      	movs	r3, #0
 80076f6:	220a      	movs	r2, #10
 80076f8:	4648      	mov	r0, r9
 80076fa:	f000 faf1 	bl	8007ce0 <__multadd>
 80076fe:	9b08      	ldr	r3, [sp, #32]
 8007700:	9001      	str	r0, [sp, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 816e 	beq.w	80079e4 <_dtoa_r+0xa74>
 8007708:	4629      	mov	r1, r5
 800770a:	2300      	movs	r3, #0
 800770c:	220a      	movs	r2, #10
 800770e:	4648      	mov	r0, r9
 8007710:	f000 fae6 	bl	8007ce0 <__multadd>
 8007714:	f1bb 0f00 	cmp.w	fp, #0
 8007718:	4605      	mov	r5, r0
 800771a:	dc64      	bgt.n	80077e6 <_dtoa_r+0x876>
 800771c:	9b07      	ldr	r3, [sp, #28]
 800771e:	2b02      	cmp	r3, #2
 8007720:	dc3e      	bgt.n	80077a0 <_dtoa_r+0x830>
 8007722:	e060      	b.n	80077e6 <_dtoa_r+0x876>
 8007724:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007726:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800772a:	e73c      	b.n	80075a6 <_dtoa_r+0x636>
 800772c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007730:	42a3      	cmp	r3, r4
 8007732:	bfbf      	itttt	lt
 8007734:	1ae2      	sublt	r2, r4, r3
 8007736:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007738:	189b      	addlt	r3, r3, r2
 800773a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800773c:	bfae      	itee	ge
 800773e:	1b1c      	subge	r4, r3, r4
 8007740:	4623      	movlt	r3, r4
 8007742:	2400      	movlt	r4, #0
 8007744:	f1ba 0f00 	cmp.w	sl, #0
 8007748:	bfb5      	itete	lt
 800774a:	9a05      	ldrlt	r2, [sp, #20]
 800774c:	9e05      	ldrge	r6, [sp, #20]
 800774e:	eba2 060a 	sublt.w	r6, r2, sl
 8007752:	4652      	movge	r2, sl
 8007754:	bfb8      	it	lt
 8007756:	2200      	movlt	r2, #0
 8007758:	e727      	b.n	80075aa <_dtoa_r+0x63a>
 800775a:	9e05      	ldr	r6, [sp, #20]
 800775c:	9d08      	ldr	r5, [sp, #32]
 800775e:	461c      	mov	r4, r3
 8007760:	e730      	b.n	80075c4 <_dtoa_r+0x654>
 8007762:	461a      	mov	r2, r3
 8007764:	e758      	b.n	8007618 <_dtoa_r+0x6a8>
 8007766:	2300      	movs	r3, #0
 8007768:	e786      	b.n	8007678 <_dtoa_r+0x708>
 800776a:	9b02      	ldr	r3, [sp, #8]
 800776c:	e784      	b.n	8007678 <_dtoa_r+0x708>
 800776e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007770:	e783      	b.n	800767a <_dtoa_r+0x70a>
 8007772:	2300      	movs	r3, #0
 8007774:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007776:	e784      	b.n	8007682 <_dtoa_r+0x712>
 8007778:	d09d      	beq.n	80076b6 <_dtoa_r+0x746>
 800777a:	9b05      	ldr	r3, [sp, #20]
 800777c:	321c      	adds	r2, #28
 800777e:	4413      	add	r3, r2
 8007780:	9305      	str	r3, [sp, #20]
 8007782:	9b06      	ldr	r3, [sp, #24]
 8007784:	4416      	add	r6, r2
 8007786:	4413      	add	r3, r2
 8007788:	e794      	b.n	80076b4 <_dtoa_r+0x744>
 800778a:	4602      	mov	r2, r0
 800778c:	e7f5      	b.n	800777a <_dtoa_r+0x80a>
 800778e:	f1ba 0f00 	cmp.w	sl, #0
 8007792:	f8cd 8010 	str.w	r8, [sp, #16]
 8007796:	46d3      	mov	fp, sl
 8007798:	dc21      	bgt.n	80077de <_dtoa_r+0x86e>
 800779a:	9b07      	ldr	r3, [sp, #28]
 800779c:	2b02      	cmp	r3, #2
 800779e:	dd1e      	ble.n	80077de <_dtoa_r+0x86e>
 80077a0:	f1bb 0f00 	cmp.w	fp, #0
 80077a4:	f47f aeb7 	bne.w	8007516 <_dtoa_r+0x5a6>
 80077a8:	4621      	mov	r1, r4
 80077aa:	465b      	mov	r3, fp
 80077ac:	2205      	movs	r2, #5
 80077ae:	4648      	mov	r0, r9
 80077b0:	f000 fa96 	bl	8007ce0 <__multadd>
 80077b4:	4601      	mov	r1, r0
 80077b6:	4604      	mov	r4, r0
 80077b8:	9801      	ldr	r0, [sp, #4]
 80077ba:	f000 fca9 	bl	8008110 <__mcmp>
 80077be:	2800      	cmp	r0, #0
 80077c0:	f77f aea9 	ble.w	8007516 <_dtoa_r+0x5a6>
 80077c4:	463e      	mov	r6, r7
 80077c6:	2331      	movs	r3, #49	@ 0x31
 80077c8:	f806 3b01 	strb.w	r3, [r6], #1
 80077cc:	9b04      	ldr	r3, [sp, #16]
 80077ce:	3301      	adds	r3, #1
 80077d0:	9304      	str	r3, [sp, #16]
 80077d2:	e6a4      	b.n	800751e <_dtoa_r+0x5ae>
 80077d4:	f8cd 8010 	str.w	r8, [sp, #16]
 80077d8:	4654      	mov	r4, sl
 80077da:	4625      	mov	r5, r4
 80077dc:	e7f2      	b.n	80077c4 <_dtoa_r+0x854>
 80077de:	9b08      	ldr	r3, [sp, #32]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 8103 	beq.w	80079ec <_dtoa_r+0xa7c>
 80077e6:	2e00      	cmp	r6, #0
 80077e8:	dd05      	ble.n	80077f6 <_dtoa_r+0x886>
 80077ea:	4629      	mov	r1, r5
 80077ec:	4632      	mov	r2, r6
 80077ee:	4648      	mov	r0, r9
 80077f0:	f000 fc22 	bl	8008038 <__lshift>
 80077f4:	4605      	mov	r5, r0
 80077f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d058      	beq.n	80078ae <_dtoa_r+0x93e>
 80077fc:	6869      	ldr	r1, [r5, #4]
 80077fe:	4648      	mov	r0, r9
 8007800:	f000 fa0c 	bl	8007c1c <_Balloc>
 8007804:	4606      	mov	r6, r0
 8007806:	b928      	cbnz	r0, 8007814 <_dtoa_r+0x8a4>
 8007808:	4b82      	ldr	r3, [pc, #520]	@ (8007a14 <_dtoa_r+0xaa4>)
 800780a:	4602      	mov	r2, r0
 800780c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007810:	f7ff bbc7 	b.w	8006fa2 <_dtoa_r+0x32>
 8007814:	692a      	ldr	r2, [r5, #16]
 8007816:	3202      	adds	r2, #2
 8007818:	0092      	lsls	r2, r2, #2
 800781a:	f105 010c 	add.w	r1, r5, #12
 800781e:	300c      	adds	r0, #12
 8007820:	f7ff faef 	bl	8006e02 <memcpy>
 8007824:	2201      	movs	r2, #1
 8007826:	4631      	mov	r1, r6
 8007828:	4648      	mov	r0, r9
 800782a:	f000 fc05 	bl	8008038 <__lshift>
 800782e:	1c7b      	adds	r3, r7, #1
 8007830:	9305      	str	r3, [sp, #20]
 8007832:	eb07 030b 	add.w	r3, r7, fp
 8007836:	9309      	str	r3, [sp, #36]	@ 0x24
 8007838:	9b02      	ldr	r3, [sp, #8]
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	46a8      	mov	r8, r5
 8007840:	9308      	str	r3, [sp, #32]
 8007842:	4605      	mov	r5, r0
 8007844:	9b05      	ldr	r3, [sp, #20]
 8007846:	9801      	ldr	r0, [sp, #4]
 8007848:	4621      	mov	r1, r4
 800784a:	f103 3bff 	add.w	fp, r3, #4294967295
 800784e:	f7ff fb05 	bl	8006e5c <quorem>
 8007852:	4641      	mov	r1, r8
 8007854:	9002      	str	r0, [sp, #8]
 8007856:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800785a:	9801      	ldr	r0, [sp, #4]
 800785c:	f000 fc58 	bl	8008110 <__mcmp>
 8007860:	462a      	mov	r2, r5
 8007862:	9006      	str	r0, [sp, #24]
 8007864:	4621      	mov	r1, r4
 8007866:	4648      	mov	r0, r9
 8007868:	f000 fc6e 	bl	8008148 <__mdiff>
 800786c:	68c2      	ldr	r2, [r0, #12]
 800786e:	4606      	mov	r6, r0
 8007870:	b9fa      	cbnz	r2, 80078b2 <_dtoa_r+0x942>
 8007872:	4601      	mov	r1, r0
 8007874:	9801      	ldr	r0, [sp, #4]
 8007876:	f000 fc4b 	bl	8008110 <__mcmp>
 800787a:	4602      	mov	r2, r0
 800787c:	4631      	mov	r1, r6
 800787e:	4648      	mov	r0, r9
 8007880:	920a      	str	r2, [sp, #40]	@ 0x28
 8007882:	f000 fa0b 	bl	8007c9c <_Bfree>
 8007886:	9b07      	ldr	r3, [sp, #28]
 8007888:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800788a:	9e05      	ldr	r6, [sp, #20]
 800788c:	ea43 0102 	orr.w	r1, r3, r2
 8007890:	9b08      	ldr	r3, [sp, #32]
 8007892:	4319      	orrs	r1, r3
 8007894:	d10f      	bne.n	80078b6 <_dtoa_r+0x946>
 8007896:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800789a:	d028      	beq.n	80078ee <_dtoa_r+0x97e>
 800789c:	9b06      	ldr	r3, [sp, #24]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	dd02      	ble.n	80078a8 <_dtoa_r+0x938>
 80078a2:	9b02      	ldr	r3, [sp, #8]
 80078a4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80078a8:	f88b a000 	strb.w	sl, [fp]
 80078ac:	e639      	b.n	8007522 <_dtoa_r+0x5b2>
 80078ae:	4628      	mov	r0, r5
 80078b0:	e7bd      	b.n	800782e <_dtoa_r+0x8be>
 80078b2:	2201      	movs	r2, #1
 80078b4:	e7e2      	b.n	800787c <_dtoa_r+0x90c>
 80078b6:	9b06      	ldr	r3, [sp, #24]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	db04      	blt.n	80078c6 <_dtoa_r+0x956>
 80078bc:	9907      	ldr	r1, [sp, #28]
 80078be:	430b      	orrs	r3, r1
 80078c0:	9908      	ldr	r1, [sp, #32]
 80078c2:	430b      	orrs	r3, r1
 80078c4:	d120      	bne.n	8007908 <_dtoa_r+0x998>
 80078c6:	2a00      	cmp	r2, #0
 80078c8:	ddee      	ble.n	80078a8 <_dtoa_r+0x938>
 80078ca:	9901      	ldr	r1, [sp, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	4648      	mov	r0, r9
 80078d0:	f000 fbb2 	bl	8008038 <__lshift>
 80078d4:	4621      	mov	r1, r4
 80078d6:	9001      	str	r0, [sp, #4]
 80078d8:	f000 fc1a 	bl	8008110 <__mcmp>
 80078dc:	2800      	cmp	r0, #0
 80078de:	dc03      	bgt.n	80078e8 <_dtoa_r+0x978>
 80078e0:	d1e2      	bne.n	80078a8 <_dtoa_r+0x938>
 80078e2:	f01a 0f01 	tst.w	sl, #1
 80078e6:	d0df      	beq.n	80078a8 <_dtoa_r+0x938>
 80078e8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80078ec:	d1d9      	bne.n	80078a2 <_dtoa_r+0x932>
 80078ee:	2339      	movs	r3, #57	@ 0x39
 80078f0:	f88b 3000 	strb.w	r3, [fp]
 80078f4:	4633      	mov	r3, r6
 80078f6:	461e      	mov	r6, r3
 80078f8:	3b01      	subs	r3, #1
 80078fa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80078fe:	2a39      	cmp	r2, #57	@ 0x39
 8007900:	d053      	beq.n	80079aa <_dtoa_r+0xa3a>
 8007902:	3201      	adds	r2, #1
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	e60c      	b.n	8007522 <_dtoa_r+0x5b2>
 8007908:	2a00      	cmp	r2, #0
 800790a:	dd07      	ble.n	800791c <_dtoa_r+0x9ac>
 800790c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007910:	d0ed      	beq.n	80078ee <_dtoa_r+0x97e>
 8007912:	f10a 0301 	add.w	r3, sl, #1
 8007916:	f88b 3000 	strb.w	r3, [fp]
 800791a:	e602      	b.n	8007522 <_dtoa_r+0x5b2>
 800791c:	9b05      	ldr	r3, [sp, #20]
 800791e:	9a05      	ldr	r2, [sp, #20]
 8007920:	f803 ac01 	strb.w	sl, [r3, #-1]
 8007924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007926:	4293      	cmp	r3, r2
 8007928:	d029      	beq.n	800797e <_dtoa_r+0xa0e>
 800792a:	9901      	ldr	r1, [sp, #4]
 800792c:	2300      	movs	r3, #0
 800792e:	220a      	movs	r2, #10
 8007930:	4648      	mov	r0, r9
 8007932:	f000 f9d5 	bl	8007ce0 <__multadd>
 8007936:	45a8      	cmp	r8, r5
 8007938:	9001      	str	r0, [sp, #4]
 800793a:	f04f 0300 	mov.w	r3, #0
 800793e:	f04f 020a 	mov.w	r2, #10
 8007942:	4641      	mov	r1, r8
 8007944:	4648      	mov	r0, r9
 8007946:	d107      	bne.n	8007958 <_dtoa_r+0x9e8>
 8007948:	f000 f9ca 	bl	8007ce0 <__multadd>
 800794c:	4680      	mov	r8, r0
 800794e:	4605      	mov	r5, r0
 8007950:	9b05      	ldr	r3, [sp, #20]
 8007952:	3301      	adds	r3, #1
 8007954:	9305      	str	r3, [sp, #20]
 8007956:	e775      	b.n	8007844 <_dtoa_r+0x8d4>
 8007958:	f000 f9c2 	bl	8007ce0 <__multadd>
 800795c:	4629      	mov	r1, r5
 800795e:	4680      	mov	r8, r0
 8007960:	2300      	movs	r3, #0
 8007962:	220a      	movs	r2, #10
 8007964:	4648      	mov	r0, r9
 8007966:	f000 f9bb 	bl	8007ce0 <__multadd>
 800796a:	4605      	mov	r5, r0
 800796c:	e7f0      	b.n	8007950 <_dtoa_r+0x9e0>
 800796e:	f1bb 0f00 	cmp.w	fp, #0
 8007972:	bfcc      	ite	gt
 8007974:	465e      	movgt	r6, fp
 8007976:	2601      	movle	r6, #1
 8007978:	443e      	add	r6, r7
 800797a:	f04f 0800 	mov.w	r8, #0
 800797e:	9901      	ldr	r1, [sp, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	4648      	mov	r0, r9
 8007984:	f000 fb58 	bl	8008038 <__lshift>
 8007988:	4621      	mov	r1, r4
 800798a:	9001      	str	r0, [sp, #4]
 800798c:	f000 fbc0 	bl	8008110 <__mcmp>
 8007990:	2800      	cmp	r0, #0
 8007992:	dcaf      	bgt.n	80078f4 <_dtoa_r+0x984>
 8007994:	d102      	bne.n	800799c <_dtoa_r+0xa2c>
 8007996:	f01a 0f01 	tst.w	sl, #1
 800799a:	d1ab      	bne.n	80078f4 <_dtoa_r+0x984>
 800799c:	4633      	mov	r3, r6
 800799e:	461e      	mov	r6, r3
 80079a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079a4:	2a30      	cmp	r2, #48	@ 0x30
 80079a6:	d0fa      	beq.n	800799e <_dtoa_r+0xa2e>
 80079a8:	e5bb      	b.n	8007522 <_dtoa_r+0x5b2>
 80079aa:	429f      	cmp	r7, r3
 80079ac:	d1a3      	bne.n	80078f6 <_dtoa_r+0x986>
 80079ae:	9b04      	ldr	r3, [sp, #16]
 80079b0:	3301      	adds	r3, #1
 80079b2:	9304      	str	r3, [sp, #16]
 80079b4:	2331      	movs	r3, #49	@ 0x31
 80079b6:	703b      	strb	r3, [r7, #0]
 80079b8:	e5b3      	b.n	8007522 <_dtoa_r+0x5b2>
 80079ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80079bc:	4f16      	ldr	r7, [pc, #88]	@ (8007a18 <_dtoa_r+0xaa8>)
 80079be:	b11b      	cbz	r3, 80079c8 <_dtoa_r+0xa58>
 80079c0:	f107 0308 	add.w	r3, r7, #8
 80079c4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	4638      	mov	r0, r7
 80079ca:	b011      	add	sp, #68	@ 0x44
 80079cc:	ecbd 8b02 	vpop	{d8}
 80079d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d4:	9b07      	ldr	r3, [sp, #28]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	f77f ae36 	ble.w	8007648 <_dtoa_r+0x6d8>
 80079dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079e0:	2001      	movs	r0, #1
 80079e2:	e656      	b.n	8007692 <_dtoa_r+0x722>
 80079e4:	f1bb 0f00 	cmp.w	fp, #0
 80079e8:	f77f aed7 	ble.w	800779a <_dtoa_r+0x82a>
 80079ec:	463e      	mov	r6, r7
 80079ee:	9801      	ldr	r0, [sp, #4]
 80079f0:	4621      	mov	r1, r4
 80079f2:	f7ff fa33 	bl	8006e5c <quorem>
 80079f6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80079fa:	f806 ab01 	strb.w	sl, [r6], #1
 80079fe:	1bf2      	subs	r2, r6, r7
 8007a00:	4593      	cmp	fp, r2
 8007a02:	ddb4      	ble.n	800796e <_dtoa_r+0x9fe>
 8007a04:	9901      	ldr	r1, [sp, #4]
 8007a06:	2300      	movs	r3, #0
 8007a08:	220a      	movs	r2, #10
 8007a0a:	4648      	mov	r0, r9
 8007a0c:	f000 f968 	bl	8007ce0 <__multadd>
 8007a10:	9001      	str	r0, [sp, #4]
 8007a12:	e7ec      	b.n	80079ee <_dtoa_r+0xa7e>
 8007a14:	08008b9d 	.word	0x08008b9d
 8007a18:	08008b21 	.word	0x08008b21

08007a1c <_free_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	4605      	mov	r5, r0
 8007a20:	2900      	cmp	r1, #0
 8007a22:	d041      	beq.n	8007aa8 <_free_r+0x8c>
 8007a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a28:	1f0c      	subs	r4, r1, #4
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	bfb8      	it	lt
 8007a2e:	18e4      	addlt	r4, r4, r3
 8007a30:	f000 f8e8 	bl	8007c04 <__malloc_lock>
 8007a34:	4a1d      	ldr	r2, [pc, #116]	@ (8007aac <_free_r+0x90>)
 8007a36:	6813      	ldr	r3, [r2, #0]
 8007a38:	b933      	cbnz	r3, 8007a48 <_free_r+0x2c>
 8007a3a:	6063      	str	r3, [r4, #4]
 8007a3c:	6014      	str	r4, [r2, #0]
 8007a3e:	4628      	mov	r0, r5
 8007a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a44:	f000 b8e4 	b.w	8007c10 <__malloc_unlock>
 8007a48:	42a3      	cmp	r3, r4
 8007a4a:	d908      	bls.n	8007a5e <_free_r+0x42>
 8007a4c:	6820      	ldr	r0, [r4, #0]
 8007a4e:	1821      	adds	r1, r4, r0
 8007a50:	428b      	cmp	r3, r1
 8007a52:	bf01      	itttt	eq
 8007a54:	6819      	ldreq	r1, [r3, #0]
 8007a56:	685b      	ldreq	r3, [r3, #4]
 8007a58:	1809      	addeq	r1, r1, r0
 8007a5a:	6021      	streq	r1, [r4, #0]
 8007a5c:	e7ed      	b.n	8007a3a <_free_r+0x1e>
 8007a5e:	461a      	mov	r2, r3
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	b10b      	cbz	r3, 8007a68 <_free_r+0x4c>
 8007a64:	42a3      	cmp	r3, r4
 8007a66:	d9fa      	bls.n	8007a5e <_free_r+0x42>
 8007a68:	6811      	ldr	r1, [r2, #0]
 8007a6a:	1850      	adds	r0, r2, r1
 8007a6c:	42a0      	cmp	r0, r4
 8007a6e:	d10b      	bne.n	8007a88 <_free_r+0x6c>
 8007a70:	6820      	ldr	r0, [r4, #0]
 8007a72:	4401      	add	r1, r0
 8007a74:	1850      	adds	r0, r2, r1
 8007a76:	4283      	cmp	r3, r0
 8007a78:	6011      	str	r1, [r2, #0]
 8007a7a:	d1e0      	bne.n	8007a3e <_free_r+0x22>
 8007a7c:	6818      	ldr	r0, [r3, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	6053      	str	r3, [r2, #4]
 8007a82:	4408      	add	r0, r1
 8007a84:	6010      	str	r0, [r2, #0]
 8007a86:	e7da      	b.n	8007a3e <_free_r+0x22>
 8007a88:	d902      	bls.n	8007a90 <_free_r+0x74>
 8007a8a:	230c      	movs	r3, #12
 8007a8c:	602b      	str	r3, [r5, #0]
 8007a8e:	e7d6      	b.n	8007a3e <_free_r+0x22>
 8007a90:	6820      	ldr	r0, [r4, #0]
 8007a92:	1821      	adds	r1, r4, r0
 8007a94:	428b      	cmp	r3, r1
 8007a96:	bf04      	itt	eq
 8007a98:	6819      	ldreq	r1, [r3, #0]
 8007a9a:	685b      	ldreq	r3, [r3, #4]
 8007a9c:	6063      	str	r3, [r4, #4]
 8007a9e:	bf04      	itt	eq
 8007aa0:	1809      	addeq	r1, r1, r0
 8007aa2:	6021      	streq	r1, [r4, #0]
 8007aa4:	6054      	str	r4, [r2, #4]
 8007aa6:	e7ca      	b.n	8007a3e <_free_r+0x22>
 8007aa8:	bd38      	pop	{r3, r4, r5, pc}
 8007aaa:	bf00      	nop
 8007aac:	20000678 	.word	0x20000678

08007ab0 <malloc>:
 8007ab0:	4b02      	ldr	r3, [pc, #8]	@ (8007abc <malloc+0xc>)
 8007ab2:	4601      	mov	r1, r0
 8007ab4:	6818      	ldr	r0, [r3, #0]
 8007ab6:	f000 b825 	b.w	8007b04 <_malloc_r>
 8007aba:	bf00      	nop
 8007abc:	2000001c 	.word	0x2000001c

08007ac0 <sbrk_aligned>:
 8007ac0:	b570      	push	{r4, r5, r6, lr}
 8007ac2:	4e0f      	ldr	r6, [pc, #60]	@ (8007b00 <sbrk_aligned+0x40>)
 8007ac4:	460c      	mov	r4, r1
 8007ac6:	6831      	ldr	r1, [r6, #0]
 8007ac8:	4605      	mov	r5, r0
 8007aca:	b911      	cbnz	r1, 8007ad2 <sbrk_aligned+0x12>
 8007acc:	f000 feac 	bl	8008828 <_sbrk_r>
 8007ad0:	6030      	str	r0, [r6, #0]
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	f000 fea7 	bl	8008828 <_sbrk_r>
 8007ada:	1c43      	adds	r3, r0, #1
 8007adc:	d103      	bne.n	8007ae6 <sbrk_aligned+0x26>
 8007ade:	f04f 34ff 	mov.w	r4, #4294967295
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	bd70      	pop	{r4, r5, r6, pc}
 8007ae6:	1cc4      	adds	r4, r0, #3
 8007ae8:	f024 0403 	bic.w	r4, r4, #3
 8007aec:	42a0      	cmp	r0, r4
 8007aee:	d0f8      	beq.n	8007ae2 <sbrk_aligned+0x22>
 8007af0:	1a21      	subs	r1, r4, r0
 8007af2:	4628      	mov	r0, r5
 8007af4:	f000 fe98 	bl	8008828 <_sbrk_r>
 8007af8:	3001      	adds	r0, #1
 8007afa:	d1f2      	bne.n	8007ae2 <sbrk_aligned+0x22>
 8007afc:	e7ef      	b.n	8007ade <sbrk_aligned+0x1e>
 8007afe:	bf00      	nop
 8007b00:	20000674 	.word	0x20000674

08007b04 <_malloc_r>:
 8007b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b08:	1ccd      	adds	r5, r1, #3
 8007b0a:	f025 0503 	bic.w	r5, r5, #3
 8007b0e:	3508      	adds	r5, #8
 8007b10:	2d0c      	cmp	r5, #12
 8007b12:	bf38      	it	cc
 8007b14:	250c      	movcc	r5, #12
 8007b16:	2d00      	cmp	r5, #0
 8007b18:	4606      	mov	r6, r0
 8007b1a:	db01      	blt.n	8007b20 <_malloc_r+0x1c>
 8007b1c:	42a9      	cmp	r1, r5
 8007b1e:	d904      	bls.n	8007b2a <_malloc_r+0x26>
 8007b20:	230c      	movs	r3, #12
 8007b22:	6033      	str	r3, [r6, #0]
 8007b24:	2000      	movs	r0, #0
 8007b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c00 <_malloc_r+0xfc>
 8007b2e:	f000 f869 	bl	8007c04 <__malloc_lock>
 8007b32:	f8d8 3000 	ldr.w	r3, [r8]
 8007b36:	461c      	mov	r4, r3
 8007b38:	bb44      	cbnz	r4, 8007b8c <_malloc_r+0x88>
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	f7ff ffbf 	bl	8007ac0 <sbrk_aligned>
 8007b42:	1c43      	adds	r3, r0, #1
 8007b44:	4604      	mov	r4, r0
 8007b46:	d158      	bne.n	8007bfa <_malloc_r+0xf6>
 8007b48:	f8d8 4000 	ldr.w	r4, [r8]
 8007b4c:	4627      	mov	r7, r4
 8007b4e:	2f00      	cmp	r7, #0
 8007b50:	d143      	bne.n	8007bda <_malloc_r+0xd6>
 8007b52:	2c00      	cmp	r4, #0
 8007b54:	d04b      	beq.n	8007bee <_malloc_r+0xea>
 8007b56:	6823      	ldr	r3, [r4, #0]
 8007b58:	4639      	mov	r1, r7
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	eb04 0903 	add.w	r9, r4, r3
 8007b60:	f000 fe62 	bl	8008828 <_sbrk_r>
 8007b64:	4581      	cmp	r9, r0
 8007b66:	d142      	bne.n	8007bee <_malloc_r+0xea>
 8007b68:	6821      	ldr	r1, [r4, #0]
 8007b6a:	1a6d      	subs	r5, r5, r1
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	4630      	mov	r0, r6
 8007b70:	f7ff ffa6 	bl	8007ac0 <sbrk_aligned>
 8007b74:	3001      	adds	r0, #1
 8007b76:	d03a      	beq.n	8007bee <_malloc_r+0xea>
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	442b      	add	r3, r5
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	bb62      	cbnz	r2, 8007be0 <_malloc_r+0xdc>
 8007b86:	f8c8 7000 	str.w	r7, [r8]
 8007b8a:	e00f      	b.n	8007bac <_malloc_r+0xa8>
 8007b8c:	6822      	ldr	r2, [r4, #0]
 8007b8e:	1b52      	subs	r2, r2, r5
 8007b90:	d420      	bmi.n	8007bd4 <_malloc_r+0xd0>
 8007b92:	2a0b      	cmp	r2, #11
 8007b94:	d917      	bls.n	8007bc6 <_malloc_r+0xc2>
 8007b96:	1961      	adds	r1, r4, r5
 8007b98:	42a3      	cmp	r3, r4
 8007b9a:	6025      	str	r5, [r4, #0]
 8007b9c:	bf18      	it	ne
 8007b9e:	6059      	strne	r1, [r3, #4]
 8007ba0:	6863      	ldr	r3, [r4, #4]
 8007ba2:	bf08      	it	eq
 8007ba4:	f8c8 1000 	streq.w	r1, [r8]
 8007ba8:	5162      	str	r2, [r4, r5]
 8007baa:	604b      	str	r3, [r1, #4]
 8007bac:	4630      	mov	r0, r6
 8007bae:	f000 f82f 	bl	8007c10 <__malloc_unlock>
 8007bb2:	f104 000b 	add.w	r0, r4, #11
 8007bb6:	1d23      	adds	r3, r4, #4
 8007bb8:	f020 0007 	bic.w	r0, r0, #7
 8007bbc:	1ac2      	subs	r2, r0, r3
 8007bbe:	bf1c      	itt	ne
 8007bc0:	1a1b      	subne	r3, r3, r0
 8007bc2:	50a3      	strne	r3, [r4, r2]
 8007bc4:	e7af      	b.n	8007b26 <_malloc_r+0x22>
 8007bc6:	6862      	ldr	r2, [r4, #4]
 8007bc8:	42a3      	cmp	r3, r4
 8007bca:	bf0c      	ite	eq
 8007bcc:	f8c8 2000 	streq.w	r2, [r8]
 8007bd0:	605a      	strne	r2, [r3, #4]
 8007bd2:	e7eb      	b.n	8007bac <_malloc_r+0xa8>
 8007bd4:	4623      	mov	r3, r4
 8007bd6:	6864      	ldr	r4, [r4, #4]
 8007bd8:	e7ae      	b.n	8007b38 <_malloc_r+0x34>
 8007bda:	463c      	mov	r4, r7
 8007bdc:	687f      	ldr	r7, [r7, #4]
 8007bde:	e7b6      	b.n	8007b4e <_malloc_r+0x4a>
 8007be0:	461a      	mov	r2, r3
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	42a3      	cmp	r3, r4
 8007be6:	d1fb      	bne.n	8007be0 <_malloc_r+0xdc>
 8007be8:	2300      	movs	r3, #0
 8007bea:	6053      	str	r3, [r2, #4]
 8007bec:	e7de      	b.n	8007bac <_malloc_r+0xa8>
 8007bee:	230c      	movs	r3, #12
 8007bf0:	6033      	str	r3, [r6, #0]
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f000 f80c 	bl	8007c10 <__malloc_unlock>
 8007bf8:	e794      	b.n	8007b24 <_malloc_r+0x20>
 8007bfa:	6005      	str	r5, [r0, #0]
 8007bfc:	e7d6      	b.n	8007bac <_malloc_r+0xa8>
 8007bfe:	bf00      	nop
 8007c00:	20000678 	.word	0x20000678

08007c04 <__malloc_lock>:
 8007c04:	4801      	ldr	r0, [pc, #4]	@ (8007c0c <__malloc_lock+0x8>)
 8007c06:	f7ff b8fa 	b.w	8006dfe <__retarget_lock_acquire_recursive>
 8007c0a:	bf00      	nop
 8007c0c:	20000670 	.word	0x20000670

08007c10 <__malloc_unlock>:
 8007c10:	4801      	ldr	r0, [pc, #4]	@ (8007c18 <__malloc_unlock+0x8>)
 8007c12:	f7ff b8f5 	b.w	8006e00 <__retarget_lock_release_recursive>
 8007c16:	bf00      	nop
 8007c18:	20000670 	.word	0x20000670

08007c1c <_Balloc>:
 8007c1c:	b570      	push	{r4, r5, r6, lr}
 8007c1e:	69c6      	ldr	r6, [r0, #28]
 8007c20:	4604      	mov	r4, r0
 8007c22:	460d      	mov	r5, r1
 8007c24:	b976      	cbnz	r6, 8007c44 <_Balloc+0x28>
 8007c26:	2010      	movs	r0, #16
 8007c28:	f7ff ff42 	bl	8007ab0 <malloc>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	61e0      	str	r0, [r4, #28]
 8007c30:	b920      	cbnz	r0, 8007c3c <_Balloc+0x20>
 8007c32:	4b18      	ldr	r3, [pc, #96]	@ (8007c94 <_Balloc+0x78>)
 8007c34:	4818      	ldr	r0, [pc, #96]	@ (8007c98 <_Balloc+0x7c>)
 8007c36:	216b      	movs	r1, #107	@ 0x6b
 8007c38:	f7ff f8f2 	bl	8006e20 <__assert_func>
 8007c3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c40:	6006      	str	r6, [r0, #0]
 8007c42:	60c6      	str	r6, [r0, #12]
 8007c44:	69e6      	ldr	r6, [r4, #28]
 8007c46:	68f3      	ldr	r3, [r6, #12]
 8007c48:	b183      	cbz	r3, 8007c6c <_Balloc+0x50>
 8007c4a:	69e3      	ldr	r3, [r4, #28]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c52:	b9b8      	cbnz	r0, 8007c84 <_Balloc+0x68>
 8007c54:	2101      	movs	r1, #1
 8007c56:	fa01 f605 	lsl.w	r6, r1, r5
 8007c5a:	1d72      	adds	r2, r6, #5
 8007c5c:	0092      	lsls	r2, r2, #2
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f000 fdf9 	bl	8008856 <_calloc_r>
 8007c64:	b160      	cbz	r0, 8007c80 <_Balloc+0x64>
 8007c66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c6a:	e00e      	b.n	8007c8a <_Balloc+0x6e>
 8007c6c:	2221      	movs	r2, #33	@ 0x21
 8007c6e:	2104      	movs	r1, #4
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 fdf0 	bl	8008856 <_calloc_r>
 8007c76:	69e3      	ldr	r3, [r4, #28]
 8007c78:	60f0      	str	r0, [r6, #12]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e4      	bne.n	8007c4a <_Balloc+0x2e>
 8007c80:	2000      	movs	r0, #0
 8007c82:	bd70      	pop	{r4, r5, r6, pc}
 8007c84:	6802      	ldr	r2, [r0, #0]
 8007c86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c90:	e7f7      	b.n	8007c82 <_Balloc+0x66>
 8007c92:	bf00      	nop
 8007c94:	08008b2e 	.word	0x08008b2e
 8007c98:	08008bae 	.word	0x08008bae

08007c9c <_Bfree>:
 8007c9c:	b570      	push	{r4, r5, r6, lr}
 8007c9e:	69c6      	ldr	r6, [r0, #28]
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	b976      	cbnz	r6, 8007cc4 <_Bfree+0x28>
 8007ca6:	2010      	movs	r0, #16
 8007ca8:	f7ff ff02 	bl	8007ab0 <malloc>
 8007cac:	4602      	mov	r2, r0
 8007cae:	61e8      	str	r0, [r5, #28]
 8007cb0:	b920      	cbnz	r0, 8007cbc <_Bfree+0x20>
 8007cb2:	4b09      	ldr	r3, [pc, #36]	@ (8007cd8 <_Bfree+0x3c>)
 8007cb4:	4809      	ldr	r0, [pc, #36]	@ (8007cdc <_Bfree+0x40>)
 8007cb6:	218f      	movs	r1, #143	@ 0x8f
 8007cb8:	f7ff f8b2 	bl	8006e20 <__assert_func>
 8007cbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cc0:	6006      	str	r6, [r0, #0]
 8007cc2:	60c6      	str	r6, [r0, #12]
 8007cc4:	b13c      	cbz	r4, 8007cd6 <_Bfree+0x3a>
 8007cc6:	69eb      	ldr	r3, [r5, #28]
 8007cc8:	6862      	ldr	r2, [r4, #4]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cd0:	6021      	str	r1, [r4, #0]
 8007cd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cd6:	bd70      	pop	{r4, r5, r6, pc}
 8007cd8:	08008b2e 	.word	0x08008b2e
 8007cdc:	08008bae 	.word	0x08008bae

08007ce0 <__multadd>:
 8007ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce4:	690d      	ldr	r5, [r1, #16]
 8007ce6:	4607      	mov	r7, r0
 8007ce8:	460c      	mov	r4, r1
 8007cea:	461e      	mov	r6, r3
 8007cec:	f101 0c14 	add.w	ip, r1, #20
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	f8dc 3000 	ldr.w	r3, [ip]
 8007cf6:	b299      	uxth	r1, r3
 8007cf8:	fb02 6101 	mla	r1, r2, r1, r6
 8007cfc:	0c1e      	lsrs	r6, r3, #16
 8007cfe:	0c0b      	lsrs	r3, r1, #16
 8007d00:	fb02 3306 	mla	r3, r2, r6, r3
 8007d04:	b289      	uxth	r1, r1
 8007d06:	3001      	adds	r0, #1
 8007d08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d0c:	4285      	cmp	r5, r0
 8007d0e:	f84c 1b04 	str.w	r1, [ip], #4
 8007d12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d16:	dcec      	bgt.n	8007cf2 <__multadd+0x12>
 8007d18:	b30e      	cbz	r6, 8007d5e <__multadd+0x7e>
 8007d1a:	68a3      	ldr	r3, [r4, #8]
 8007d1c:	42ab      	cmp	r3, r5
 8007d1e:	dc19      	bgt.n	8007d54 <__multadd+0x74>
 8007d20:	6861      	ldr	r1, [r4, #4]
 8007d22:	4638      	mov	r0, r7
 8007d24:	3101      	adds	r1, #1
 8007d26:	f7ff ff79 	bl	8007c1c <_Balloc>
 8007d2a:	4680      	mov	r8, r0
 8007d2c:	b928      	cbnz	r0, 8007d3a <__multadd+0x5a>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	4b0c      	ldr	r3, [pc, #48]	@ (8007d64 <__multadd+0x84>)
 8007d32:	480d      	ldr	r0, [pc, #52]	@ (8007d68 <__multadd+0x88>)
 8007d34:	21ba      	movs	r1, #186	@ 0xba
 8007d36:	f7ff f873 	bl	8006e20 <__assert_func>
 8007d3a:	6922      	ldr	r2, [r4, #16]
 8007d3c:	3202      	adds	r2, #2
 8007d3e:	f104 010c 	add.w	r1, r4, #12
 8007d42:	0092      	lsls	r2, r2, #2
 8007d44:	300c      	adds	r0, #12
 8007d46:	f7ff f85c 	bl	8006e02 <memcpy>
 8007d4a:	4621      	mov	r1, r4
 8007d4c:	4638      	mov	r0, r7
 8007d4e:	f7ff ffa5 	bl	8007c9c <_Bfree>
 8007d52:	4644      	mov	r4, r8
 8007d54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d58:	3501      	adds	r5, #1
 8007d5a:	615e      	str	r6, [r3, #20]
 8007d5c:	6125      	str	r5, [r4, #16]
 8007d5e:	4620      	mov	r0, r4
 8007d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d64:	08008b9d 	.word	0x08008b9d
 8007d68:	08008bae 	.word	0x08008bae

08007d6c <__hi0bits>:
 8007d6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d70:	4603      	mov	r3, r0
 8007d72:	bf36      	itet	cc
 8007d74:	0403      	lslcc	r3, r0, #16
 8007d76:	2000      	movcs	r0, #0
 8007d78:	2010      	movcc	r0, #16
 8007d7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d7e:	bf3c      	itt	cc
 8007d80:	021b      	lslcc	r3, r3, #8
 8007d82:	3008      	addcc	r0, #8
 8007d84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d88:	bf3c      	itt	cc
 8007d8a:	011b      	lslcc	r3, r3, #4
 8007d8c:	3004      	addcc	r0, #4
 8007d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d92:	bf3c      	itt	cc
 8007d94:	009b      	lslcc	r3, r3, #2
 8007d96:	3002      	addcc	r0, #2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	db05      	blt.n	8007da8 <__hi0bits+0x3c>
 8007d9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007da0:	f100 0001 	add.w	r0, r0, #1
 8007da4:	bf08      	it	eq
 8007da6:	2020      	moveq	r0, #32
 8007da8:	4770      	bx	lr

08007daa <__lo0bits>:
 8007daa:	6803      	ldr	r3, [r0, #0]
 8007dac:	4602      	mov	r2, r0
 8007dae:	f013 0007 	ands.w	r0, r3, #7
 8007db2:	d00b      	beq.n	8007dcc <__lo0bits+0x22>
 8007db4:	07d9      	lsls	r1, r3, #31
 8007db6:	d421      	bmi.n	8007dfc <__lo0bits+0x52>
 8007db8:	0798      	lsls	r0, r3, #30
 8007dba:	bf49      	itett	mi
 8007dbc:	085b      	lsrmi	r3, r3, #1
 8007dbe:	089b      	lsrpl	r3, r3, #2
 8007dc0:	2001      	movmi	r0, #1
 8007dc2:	6013      	strmi	r3, [r2, #0]
 8007dc4:	bf5c      	itt	pl
 8007dc6:	6013      	strpl	r3, [r2, #0]
 8007dc8:	2002      	movpl	r0, #2
 8007dca:	4770      	bx	lr
 8007dcc:	b299      	uxth	r1, r3
 8007dce:	b909      	cbnz	r1, 8007dd4 <__lo0bits+0x2a>
 8007dd0:	0c1b      	lsrs	r3, r3, #16
 8007dd2:	2010      	movs	r0, #16
 8007dd4:	b2d9      	uxtb	r1, r3
 8007dd6:	b909      	cbnz	r1, 8007ddc <__lo0bits+0x32>
 8007dd8:	3008      	adds	r0, #8
 8007dda:	0a1b      	lsrs	r3, r3, #8
 8007ddc:	0719      	lsls	r1, r3, #28
 8007dde:	bf04      	itt	eq
 8007de0:	091b      	lsreq	r3, r3, #4
 8007de2:	3004      	addeq	r0, #4
 8007de4:	0799      	lsls	r1, r3, #30
 8007de6:	bf04      	itt	eq
 8007de8:	089b      	lsreq	r3, r3, #2
 8007dea:	3002      	addeq	r0, #2
 8007dec:	07d9      	lsls	r1, r3, #31
 8007dee:	d403      	bmi.n	8007df8 <__lo0bits+0x4e>
 8007df0:	085b      	lsrs	r3, r3, #1
 8007df2:	f100 0001 	add.w	r0, r0, #1
 8007df6:	d003      	beq.n	8007e00 <__lo0bits+0x56>
 8007df8:	6013      	str	r3, [r2, #0]
 8007dfa:	4770      	bx	lr
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	4770      	bx	lr
 8007e00:	2020      	movs	r0, #32
 8007e02:	4770      	bx	lr

08007e04 <__i2b>:
 8007e04:	b510      	push	{r4, lr}
 8007e06:	460c      	mov	r4, r1
 8007e08:	2101      	movs	r1, #1
 8007e0a:	f7ff ff07 	bl	8007c1c <_Balloc>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	b928      	cbnz	r0, 8007e1e <__i2b+0x1a>
 8007e12:	4b05      	ldr	r3, [pc, #20]	@ (8007e28 <__i2b+0x24>)
 8007e14:	4805      	ldr	r0, [pc, #20]	@ (8007e2c <__i2b+0x28>)
 8007e16:	f240 1145 	movw	r1, #325	@ 0x145
 8007e1a:	f7ff f801 	bl	8006e20 <__assert_func>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	6144      	str	r4, [r0, #20]
 8007e22:	6103      	str	r3, [r0, #16]
 8007e24:	bd10      	pop	{r4, pc}
 8007e26:	bf00      	nop
 8007e28:	08008b9d 	.word	0x08008b9d
 8007e2c:	08008bae 	.word	0x08008bae

08007e30 <__multiply>:
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	4614      	mov	r4, r2
 8007e36:	690a      	ldr	r2, [r1, #16]
 8007e38:	6923      	ldr	r3, [r4, #16]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	bfa8      	it	ge
 8007e3e:	4623      	movge	r3, r4
 8007e40:	460f      	mov	r7, r1
 8007e42:	bfa4      	itt	ge
 8007e44:	460c      	movge	r4, r1
 8007e46:	461f      	movge	r7, r3
 8007e48:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007e4c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007e50:	68a3      	ldr	r3, [r4, #8]
 8007e52:	6861      	ldr	r1, [r4, #4]
 8007e54:	eb0a 0609 	add.w	r6, sl, r9
 8007e58:	42b3      	cmp	r3, r6
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	bfb8      	it	lt
 8007e5e:	3101      	addlt	r1, #1
 8007e60:	f7ff fedc 	bl	8007c1c <_Balloc>
 8007e64:	b930      	cbnz	r0, 8007e74 <__multiply+0x44>
 8007e66:	4602      	mov	r2, r0
 8007e68:	4b44      	ldr	r3, [pc, #272]	@ (8007f7c <__multiply+0x14c>)
 8007e6a:	4845      	ldr	r0, [pc, #276]	@ (8007f80 <__multiply+0x150>)
 8007e6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007e70:	f7fe ffd6 	bl	8006e20 <__assert_func>
 8007e74:	f100 0514 	add.w	r5, r0, #20
 8007e78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e7c:	462b      	mov	r3, r5
 8007e7e:	2200      	movs	r2, #0
 8007e80:	4543      	cmp	r3, r8
 8007e82:	d321      	bcc.n	8007ec8 <__multiply+0x98>
 8007e84:	f107 0114 	add.w	r1, r7, #20
 8007e88:	f104 0214 	add.w	r2, r4, #20
 8007e8c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007e90:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007e94:	9302      	str	r3, [sp, #8]
 8007e96:	1b13      	subs	r3, r2, r4
 8007e98:	3b15      	subs	r3, #21
 8007e9a:	f023 0303 	bic.w	r3, r3, #3
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	f104 0715 	add.w	r7, r4, #21
 8007ea4:	42ba      	cmp	r2, r7
 8007ea6:	bf38      	it	cc
 8007ea8:	2304      	movcc	r3, #4
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	9b02      	ldr	r3, [sp, #8]
 8007eae:	9103      	str	r1, [sp, #12]
 8007eb0:	428b      	cmp	r3, r1
 8007eb2:	d80c      	bhi.n	8007ece <__multiply+0x9e>
 8007eb4:	2e00      	cmp	r6, #0
 8007eb6:	dd03      	ble.n	8007ec0 <__multiply+0x90>
 8007eb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d05b      	beq.n	8007f78 <__multiply+0x148>
 8007ec0:	6106      	str	r6, [r0, #16]
 8007ec2:	b005      	add	sp, #20
 8007ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec8:	f843 2b04 	str.w	r2, [r3], #4
 8007ecc:	e7d8      	b.n	8007e80 <__multiply+0x50>
 8007ece:	f8b1 a000 	ldrh.w	sl, [r1]
 8007ed2:	f1ba 0f00 	cmp.w	sl, #0
 8007ed6:	d024      	beq.n	8007f22 <__multiply+0xf2>
 8007ed8:	f104 0e14 	add.w	lr, r4, #20
 8007edc:	46a9      	mov	r9, r5
 8007ede:	f04f 0c00 	mov.w	ip, #0
 8007ee2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ee6:	f8d9 3000 	ldr.w	r3, [r9]
 8007eea:	fa1f fb87 	uxth.w	fp, r7
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ef4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007ef8:	f8d9 7000 	ldr.w	r7, [r9]
 8007efc:	4463      	add	r3, ip
 8007efe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f02:	fb0a c70b 	mla	r7, sl, fp, ip
 8007f06:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f10:	4572      	cmp	r2, lr
 8007f12:	f849 3b04 	str.w	r3, [r9], #4
 8007f16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f1a:	d8e2      	bhi.n	8007ee2 <__multiply+0xb2>
 8007f1c:	9b01      	ldr	r3, [sp, #4]
 8007f1e:	f845 c003 	str.w	ip, [r5, r3]
 8007f22:	9b03      	ldr	r3, [sp, #12]
 8007f24:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f28:	3104      	adds	r1, #4
 8007f2a:	f1b9 0f00 	cmp.w	r9, #0
 8007f2e:	d021      	beq.n	8007f74 <__multiply+0x144>
 8007f30:	682b      	ldr	r3, [r5, #0]
 8007f32:	f104 0c14 	add.w	ip, r4, #20
 8007f36:	46ae      	mov	lr, r5
 8007f38:	f04f 0a00 	mov.w	sl, #0
 8007f3c:	f8bc b000 	ldrh.w	fp, [ip]
 8007f40:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007f44:	fb09 770b 	mla	r7, r9, fp, r7
 8007f48:	4457      	add	r7, sl
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f50:	f84e 3b04 	str.w	r3, [lr], #4
 8007f54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f5c:	f8be 3000 	ldrh.w	r3, [lr]
 8007f60:	fb09 330a 	mla	r3, r9, sl, r3
 8007f64:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007f68:	4562      	cmp	r2, ip
 8007f6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f6e:	d8e5      	bhi.n	8007f3c <__multiply+0x10c>
 8007f70:	9f01      	ldr	r7, [sp, #4]
 8007f72:	51eb      	str	r3, [r5, r7]
 8007f74:	3504      	adds	r5, #4
 8007f76:	e799      	b.n	8007eac <__multiply+0x7c>
 8007f78:	3e01      	subs	r6, #1
 8007f7a:	e79b      	b.n	8007eb4 <__multiply+0x84>
 8007f7c:	08008b9d 	.word	0x08008b9d
 8007f80:	08008bae 	.word	0x08008bae

08007f84 <__pow5mult>:
 8007f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f88:	4615      	mov	r5, r2
 8007f8a:	f012 0203 	ands.w	r2, r2, #3
 8007f8e:	4607      	mov	r7, r0
 8007f90:	460e      	mov	r6, r1
 8007f92:	d007      	beq.n	8007fa4 <__pow5mult+0x20>
 8007f94:	4c25      	ldr	r4, [pc, #148]	@ (800802c <__pow5mult+0xa8>)
 8007f96:	3a01      	subs	r2, #1
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f9e:	f7ff fe9f 	bl	8007ce0 <__multadd>
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	10ad      	asrs	r5, r5, #2
 8007fa6:	d03d      	beq.n	8008024 <__pow5mult+0xa0>
 8007fa8:	69fc      	ldr	r4, [r7, #28]
 8007faa:	b97c      	cbnz	r4, 8007fcc <__pow5mult+0x48>
 8007fac:	2010      	movs	r0, #16
 8007fae:	f7ff fd7f 	bl	8007ab0 <malloc>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	61f8      	str	r0, [r7, #28]
 8007fb6:	b928      	cbnz	r0, 8007fc4 <__pow5mult+0x40>
 8007fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8008030 <__pow5mult+0xac>)
 8007fba:	481e      	ldr	r0, [pc, #120]	@ (8008034 <__pow5mult+0xb0>)
 8007fbc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007fc0:	f7fe ff2e 	bl	8006e20 <__assert_func>
 8007fc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fc8:	6004      	str	r4, [r0, #0]
 8007fca:	60c4      	str	r4, [r0, #12]
 8007fcc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007fd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fd4:	b94c      	cbnz	r4, 8007fea <__pow5mult+0x66>
 8007fd6:	f240 2171 	movw	r1, #625	@ 0x271
 8007fda:	4638      	mov	r0, r7
 8007fdc:	f7ff ff12 	bl	8007e04 <__i2b>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	6003      	str	r3, [r0, #0]
 8007fea:	f04f 0900 	mov.w	r9, #0
 8007fee:	07eb      	lsls	r3, r5, #31
 8007ff0:	d50a      	bpl.n	8008008 <__pow5mult+0x84>
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4622      	mov	r2, r4
 8007ff6:	4638      	mov	r0, r7
 8007ff8:	f7ff ff1a 	bl	8007e30 <__multiply>
 8007ffc:	4631      	mov	r1, r6
 8007ffe:	4680      	mov	r8, r0
 8008000:	4638      	mov	r0, r7
 8008002:	f7ff fe4b 	bl	8007c9c <_Bfree>
 8008006:	4646      	mov	r6, r8
 8008008:	106d      	asrs	r5, r5, #1
 800800a:	d00b      	beq.n	8008024 <__pow5mult+0xa0>
 800800c:	6820      	ldr	r0, [r4, #0]
 800800e:	b938      	cbnz	r0, 8008020 <__pow5mult+0x9c>
 8008010:	4622      	mov	r2, r4
 8008012:	4621      	mov	r1, r4
 8008014:	4638      	mov	r0, r7
 8008016:	f7ff ff0b 	bl	8007e30 <__multiply>
 800801a:	6020      	str	r0, [r4, #0]
 800801c:	f8c0 9000 	str.w	r9, [r0]
 8008020:	4604      	mov	r4, r0
 8008022:	e7e4      	b.n	8007fee <__pow5mult+0x6a>
 8008024:	4630      	mov	r0, r6
 8008026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800802a:	bf00      	nop
 800802c:	08008c08 	.word	0x08008c08
 8008030:	08008b2e 	.word	0x08008b2e
 8008034:	08008bae 	.word	0x08008bae

08008038 <__lshift>:
 8008038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800803c:	460c      	mov	r4, r1
 800803e:	6849      	ldr	r1, [r1, #4]
 8008040:	6923      	ldr	r3, [r4, #16]
 8008042:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008046:	68a3      	ldr	r3, [r4, #8]
 8008048:	4607      	mov	r7, r0
 800804a:	4691      	mov	r9, r2
 800804c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008050:	f108 0601 	add.w	r6, r8, #1
 8008054:	42b3      	cmp	r3, r6
 8008056:	db0b      	blt.n	8008070 <__lshift+0x38>
 8008058:	4638      	mov	r0, r7
 800805a:	f7ff fddf 	bl	8007c1c <_Balloc>
 800805e:	4605      	mov	r5, r0
 8008060:	b948      	cbnz	r0, 8008076 <__lshift+0x3e>
 8008062:	4602      	mov	r2, r0
 8008064:	4b28      	ldr	r3, [pc, #160]	@ (8008108 <__lshift+0xd0>)
 8008066:	4829      	ldr	r0, [pc, #164]	@ (800810c <__lshift+0xd4>)
 8008068:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800806c:	f7fe fed8 	bl	8006e20 <__assert_func>
 8008070:	3101      	adds	r1, #1
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	e7ee      	b.n	8008054 <__lshift+0x1c>
 8008076:	2300      	movs	r3, #0
 8008078:	f100 0114 	add.w	r1, r0, #20
 800807c:	f100 0210 	add.w	r2, r0, #16
 8008080:	4618      	mov	r0, r3
 8008082:	4553      	cmp	r3, sl
 8008084:	db33      	blt.n	80080ee <__lshift+0xb6>
 8008086:	6920      	ldr	r0, [r4, #16]
 8008088:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800808c:	f104 0314 	add.w	r3, r4, #20
 8008090:	f019 091f 	ands.w	r9, r9, #31
 8008094:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008098:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800809c:	d02b      	beq.n	80080f6 <__lshift+0xbe>
 800809e:	f1c9 0e20 	rsb	lr, r9, #32
 80080a2:	468a      	mov	sl, r1
 80080a4:	2200      	movs	r2, #0
 80080a6:	6818      	ldr	r0, [r3, #0]
 80080a8:	fa00 f009 	lsl.w	r0, r0, r9
 80080ac:	4310      	orrs	r0, r2
 80080ae:	f84a 0b04 	str.w	r0, [sl], #4
 80080b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080b6:	459c      	cmp	ip, r3
 80080b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80080bc:	d8f3      	bhi.n	80080a6 <__lshift+0x6e>
 80080be:	ebac 0304 	sub.w	r3, ip, r4
 80080c2:	3b15      	subs	r3, #21
 80080c4:	f023 0303 	bic.w	r3, r3, #3
 80080c8:	3304      	adds	r3, #4
 80080ca:	f104 0015 	add.w	r0, r4, #21
 80080ce:	4584      	cmp	ip, r0
 80080d0:	bf38      	it	cc
 80080d2:	2304      	movcc	r3, #4
 80080d4:	50ca      	str	r2, [r1, r3]
 80080d6:	b10a      	cbz	r2, 80080dc <__lshift+0xa4>
 80080d8:	f108 0602 	add.w	r6, r8, #2
 80080dc:	3e01      	subs	r6, #1
 80080de:	4638      	mov	r0, r7
 80080e0:	612e      	str	r6, [r5, #16]
 80080e2:	4621      	mov	r1, r4
 80080e4:	f7ff fdda 	bl	8007c9c <_Bfree>
 80080e8:	4628      	mov	r0, r5
 80080ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80080f2:	3301      	adds	r3, #1
 80080f4:	e7c5      	b.n	8008082 <__lshift+0x4a>
 80080f6:	3904      	subs	r1, #4
 80080f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008100:	459c      	cmp	ip, r3
 8008102:	d8f9      	bhi.n	80080f8 <__lshift+0xc0>
 8008104:	e7ea      	b.n	80080dc <__lshift+0xa4>
 8008106:	bf00      	nop
 8008108:	08008b9d 	.word	0x08008b9d
 800810c:	08008bae 	.word	0x08008bae

08008110 <__mcmp>:
 8008110:	690a      	ldr	r2, [r1, #16]
 8008112:	4603      	mov	r3, r0
 8008114:	6900      	ldr	r0, [r0, #16]
 8008116:	1a80      	subs	r0, r0, r2
 8008118:	b530      	push	{r4, r5, lr}
 800811a:	d10e      	bne.n	800813a <__mcmp+0x2a>
 800811c:	3314      	adds	r3, #20
 800811e:	3114      	adds	r1, #20
 8008120:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008124:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008128:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800812c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008130:	4295      	cmp	r5, r2
 8008132:	d003      	beq.n	800813c <__mcmp+0x2c>
 8008134:	d205      	bcs.n	8008142 <__mcmp+0x32>
 8008136:	f04f 30ff 	mov.w	r0, #4294967295
 800813a:	bd30      	pop	{r4, r5, pc}
 800813c:	42a3      	cmp	r3, r4
 800813e:	d3f3      	bcc.n	8008128 <__mcmp+0x18>
 8008140:	e7fb      	b.n	800813a <__mcmp+0x2a>
 8008142:	2001      	movs	r0, #1
 8008144:	e7f9      	b.n	800813a <__mcmp+0x2a>
	...

08008148 <__mdiff>:
 8008148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814c:	4689      	mov	r9, r1
 800814e:	4606      	mov	r6, r0
 8008150:	4611      	mov	r1, r2
 8008152:	4648      	mov	r0, r9
 8008154:	4614      	mov	r4, r2
 8008156:	f7ff ffdb 	bl	8008110 <__mcmp>
 800815a:	1e05      	subs	r5, r0, #0
 800815c:	d112      	bne.n	8008184 <__mdiff+0x3c>
 800815e:	4629      	mov	r1, r5
 8008160:	4630      	mov	r0, r6
 8008162:	f7ff fd5b 	bl	8007c1c <_Balloc>
 8008166:	4602      	mov	r2, r0
 8008168:	b928      	cbnz	r0, 8008176 <__mdiff+0x2e>
 800816a:	4b3f      	ldr	r3, [pc, #252]	@ (8008268 <__mdiff+0x120>)
 800816c:	f240 2137 	movw	r1, #567	@ 0x237
 8008170:	483e      	ldr	r0, [pc, #248]	@ (800826c <__mdiff+0x124>)
 8008172:	f7fe fe55 	bl	8006e20 <__assert_func>
 8008176:	2301      	movs	r3, #1
 8008178:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800817c:	4610      	mov	r0, r2
 800817e:	b003      	add	sp, #12
 8008180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008184:	bfbc      	itt	lt
 8008186:	464b      	movlt	r3, r9
 8008188:	46a1      	movlt	r9, r4
 800818a:	4630      	mov	r0, r6
 800818c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008190:	bfba      	itte	lt
 8008192:	461c      	movlt	r4, r3
 8008194:	2501      	movlt	r5, #1
 8008196:	2500      	movge	r5, #0
 8008198:	f7ff fd40 	bl	8007c1c <_Balloc>
 800819c:	4602      	mov	r2, r0
 800819e:	b918      	cbnz	r0, 80081a8 <__mdiff+0x60>
 80081a0:	4b31      	ldr	r3, [pc, #196]	@ (8008268 <__mdiff+0x120>)
 80081a2:	f240 2145 	movw	r1, #581	@ 0x245
 80081a6:	e7e3      	b.n	8008170 <__mdiff+0x28>
 80081a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80081ac:	6926      	ldr	r6, [r4, #16]
 80081ae:	60c5      	str	r5, [r0, #12]
 80081b0:	f109 0310 	add.w	r3, r9, #16
 80081b4:	f109 0514 	add.w	r5, r9, #20
 80081b8:	f104 0e14 	add.w	lr, r4, #20
 80081bc:	f100 0b14 	add.w	fp, r0, #20
 80081c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80081c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80081c8:	9301      	str	r3, [sp, #4]
 80081ca:	46d9      	mov	r9, fp
 80081cc:	f04f 0c00 	mov.w	ip, #0
 80081d0:	9b01      	ldr	r3, [sp, #4]
 80081d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80081d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80081da:	9301      	str	r3, [sp, #4]
 80081dc:	fa1f f38a 	uxth.w	r3, sl
 80081e0:	4619      	mov	r1, r3
 80081e2:	b283      	uxth	r3, r0
 80081e4:	1acb      	subs	r3, r1, r3
 80081e6:	0c00      	lsrs	r0, r0, #16
 80081e8:	4463      	add	r3, ip
 80081ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80081ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80081f8:	4576      	cmp	r6, lr
 80081fa:	f849 3b04 	str.w	r3, [r9], #4
 80081fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008202:	d8e5      	bhi.n	80081d0 <__mdiff+0x88>
 8008204:	1b33      	subs	r3, r6, r4
 8008206:	3b15      	subs	r3, #21
 8008208:	f023 0303 	bic.w	r3, r3, #3
 800820c:	3415      	adds	r4, #21
 800820e:	3304      	adds	r3, #4
 8008210:	42a6      	cmp	r6, r4
 8008212:	bf38      	it	cc
 8008214:	2304      	movcc	r3, #4
 8008216:	441d      	add	r5, r3
 8008218:	445b      	add	r3, fp
 800821a:	461e      	mov	r6, r3
 800821c:	462c      	mov	r4, r5
 800821e:	4544      	cmp	r4, r8
 8008220:	d30e      	bcc.n	8008240 <__mdiff+0xf8>
 8008222:	f108 0103 	add.w	r1, r8, #3
 8008226:	1b49      	subs	r1, r1, r5
 8008228:	f021 0103 	bic.w	r1, r1, #3
 800822c:	3d03      	subs	r5, #3
 800822e:	45a8      	cmp	r8, r5
 8008230:	bf38      	it	cc
 8008232:	2100      	movcc	r1, #0
 8008234:	440b      	add	r3, r1
 8008236:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800823a:	b191      	cbz	r1, 8008262 <__mdiff+0x11a>
 800823c:	6117      	str	r7, [r2, #16]
 800823e:	e79d      	b.n	800817c <__mdiff+0x34>
 8008240:	f854 1b04 	ldr.w	r1, [r4], #4
 8008244:	46e6      	mov	lr, ip
 8008246:	0c08      	lsrs	r0, r1, #16
 8008248:	fa1c fc81 	uxtah	ip, ip, r1
 800824c:	4471      	add	r1, lr
 800824e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008252:	b289      	uxth	r1, r1
 8008254:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008258:	f846 1b04 	str.w	r1, [r6], #4
 800825c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008260:	e7dd      	b.n	800821e <__mdiff+0xd6>
 8008262:	3f01      	subs	r7, #1
 8008264:	e7e7      	b.n	8008236 <__mdiff+0xee>
 8008266:	bf00      	nop
 8008268:	08008b9d 	.word	0x08008b9d
 800826c:	08008bae 	.word	0x08008bae

08008270 <__d2b>:
 8008270:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008274:	460f      	mov	r7, r1
 8008276:	2101      	movs	r1, #1
 8008278:	ec59 8b10 	vmov	r8, r9, d0
 800827c:	4616      	mov	r6, r2
 800827e:	f7ff fccd 	bl	8007c1c <_Balloc>
 8008282:	4604      	mov	r4, r0
 8008284:	b930      	cbnz	r0, 8008294 <__d2b+0x24>
 8008286:	4602      	mov	r2, r0
 8008288:	4b23      	ldr	r3, [pc, #140]	@ (8008318 <__d2b+0xa8>)
 800828a:	4824      	ldr	r0, [pc, #144]	@ (800831c <__d2b+0xac>)
 800828c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008290:	f7fe fdc6 	bl	8006e20 <__assert_func>
 8008294:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008298:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800829c:	b10d      	cbz	r5, 80082a2 <__d2b+0x32>
 800829e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082a2:	9301      	str	r3, [sp, #4]
 80082a4:	f1b8 0300 	subs.w	r3, r8, #0
 80082a8:	d023      	beq.n	80082f2 <__d2b+0x82>
 80082aa:	4668      	mov	r0, sp
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	f7ff fd7c 	bl	8007daa <__lo0bits>
 80082b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80082b6:	b1d0      	cbz	r0, 80082ee <__d2b+0x7e>
 80082b8:	f1c0 0320 	rsb	r3, r0, #32
 80082bc:	fa02 f303 	lsl.w	r3, r2, r3
 80082c0:	430b      	orrs	r3, r1
 80082c2:	40c2      	lsrs	r2, r0
 80082c4:	6163      	str	r3, [r4, #20]
 80082c6:	9201      	str	r2, [sp, #4]
 80082c8:	9b01      	ldr	r3, [sp, #4]
 80082ca:	61a3      	str	r3, [r4, #24]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	bf0c      	ite	eq
 80082d0:	2201      	moveq	r2, #1
 80082d2:	2202      	movne	r2, #2
 80082d4:	6122      	str	r2, [r4, #16]
 80082d6:	b1a5      	cbz	r5, 8008302 <__d2b+0x92>
 80082d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80082dc:	4405      	add	r5, r0
 80082de:	603d      	str	r5, [r7, #0]
 80082e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80082e4:	6030      	str	r0, [r6, #0]
 80082e6:	4620      	mov	r0, r4
 80082e8:	b003      	add	sp, #12
 80082ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082ee:	6161      	str	r1, [r4, #20]
 80082f0:	e7ea      	b.n	80082c8 <__d2b+0x58>
 80082f2:	a801      	add	r0, sp, #4
 80082f4:	f7ff fd59 	bl	8007daa <__lo0bits>
 80082f8:	9b01      	ldr	r3, [sp, #4]
 80082fa:	6163      	str	r3, [r4, #20]
 80082fc:	3020      	adds	r0, #32
 80082fe:	2201      	movs	r2, #1
 8008300:	e7e8      	b.n	80082d4 <__d2b+0x64>
 8008302:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008306:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800830a:	6038      	str	r0, [r7, #0]
 800830c:	6918      	ldr	r0, [r3, #16]
 800830e:	f7ff fd2d 	bl	8007d6c <__hi0bits>
 8008312:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008316:	e7e5      	b.n	80082e4 <__d2b+0x74>
 8008318:	08008b9d 	.word	0x08008b9d
 800831c:	08008bae 	.word	0x08008bae

08008320 <__sfputc_r>:
 8008320:	6893      	ldr	r3, [r2, #8]
 8008322:	3b01      	subs	r3, #1
 8008324:	2b00      	cmp	r3, #0
 8008326:	b410      	push	{r4}
 8008328:	6093      	str	r3, [r2, #8]
 800832a:	da08      	bge.n	800833e <__sfputc_r+0x1e>
 800832c:	6994      	ldr	r4, [r2, #24]
 800832e:	42a3      	cmp	r3, r4
 8008330:	db01      	blt.n	8008336 <__sfputc_r+0x16>
 8008332:	290a      	cmp	r1, #10
 8008334:	d103      	bne.n	800833e <__sfputc_r+0x1e>
 8008336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800833a:	f7fe bc54 	b.w	8006be6 <__swbuf_r>
 800833e:	6813      	ldr	r3, [r2, #0]
 8008340:	1c58      	adds	r0, r3, #1
 8008342:	6010      	str	r0, [r2, #0]
 8008344:	7019      	strb	r1, [r3, #0]
 8008346:	4608      	mov	r0, r1
 8008348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800834c:	4770      	bx	lr

0800834e <__sfputs_r>:
 800834e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008350:	4606      	mov	r6, r0
 8008352:	460f      	mov	r7, r1
 8008354:	4614      	mov	r4, r2
 8008356:	18d5      	adds	r5, r2, r3
 8008358:	42ac      	cmp	r4, r5
 800835a:	d101      	bne.n	8008360 <__sfputs_r+0x12>
 800835c:	2000      	movs	r0, #0
 800835e:	e007      	b.n	8008370 <__sfputs_r+0x22>
 8008360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008364:	463a      	mov	r2, r7
 8008366:	4630      	mov	r0, r6
 8008368:	f7ff ffda 	bl	8008320 <__sfputc_r>
 800836c:	1c43      	adds	r3, r0, #1
 800836e:	d1f3      	bne.n	8008358 <__sfputs_r+0xa>
 8008370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008374 <_vfiprintf_r>:
 8008374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008378:	460d      	mov	r5, r1
 800837a:	b09d      	sub	sp, #116	@ 0x74
 800837c:	4614      	mov	r4, r2
 800837e:	4698      	mov	r8, r3
 8008380:	4606      	mov	r6, r0
 8008382:	b118      	cbz	r0, 800838c <_vfiprintf_r+0x18>
 8008384:	6a03      	ldr	r3, [r0, #32]
 8008386:	b90b      	cbnz	r3, 800838c <_vfiprintf_r+0x18>
 8008388:	f7fe fa9a 	bl	80068c0 <__sinit>
 800838c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800838e:	07d9      	lsls	r1, r3, #31
 8008390:	d405      	bmi.n	800839e <_vfiprintf_r+0x2a>
 8008392:	89ab      	ldrh	r3, [r5, #12]
 8008394:	059a      	lsls	r2, r3, #22
 8008396:	d402      	bmi.n	800839e <_vfiprintf_r+0x2a>
 8008398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800839a:	f7fe fd30 	bl	8006dfe <__retarget_lock_acquire_recursive>
 800839e:	89ab      	ldrh	r3, [r5, #12]
 80083a0:	071b      	lsls	r3, r3, #28
 80083a2:	d501      	bpl.n	80083a8 <_vfiprintf_r+0x34>
 80083a4:	692b      	ldr	r3, [r5, #16]
 80083a6:	b99b      	cbnz	r3, 80083d0 <_vfiprintf_r+0x5c>
 80083a8:	4629      	mov	r1, r5
 80083aa:	4630      	mov	r0, r6
 80083ac:	f7fe fc5a 	bl	8006c64 <__swsetup_r>
 80083b0:	b170      	cbz	r0, 80083d0 <_vfiprintf_r+0x5c>
 80083b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083b4:	07dc      	lsls	r4, r3, #31
 80083b6:	d504      	bpl.n	80083c2 <_vfiprintf_r+0x4e>
 80083b8:	f04f 30ff 	mov.w	r0, #4294967295
 80083bc:	b01d      	add	sp, #116	@ 0x74
 80083be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c2:	89ab      	ldrh	r3, [r5, #12]
 80083c4:	0598      	lsls	r0, r3, #22
 80083c6:	d4f7      	bmi.n	80083b8 <_vfiprintf_r+0x44>
 80083c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ca:	f7fe fd19 	bl	8006e00 <__retarget_lock_release_recursive>
 80083ce:	e7f3      	b.n	80083b8 <_vfiprintf_r+0x44>
 80083d0:	2300      	movs	r3, #0
 80083d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80083d4:	2320      	movs	r3, #32
 80083d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083da:	f8cd 800c 	str.w	r8, [sp, #12]
 80083de:	2330      	movs	r3, #48	@ 0x30
 80083e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008590 <_vfiprintf_r+0x21c>
 80083e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083e8:	f04f 0901 	mov.w	r9, #1
 80083ec:	4623      	mov	r3, r4
 80083ee:	469a      	mov	sl, r3
 80083f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083f4:	b10a      	cbz	r2, 80083fa <_vfiprintf_r+0x86>
 80083f6:	2a25      	cmp	r2, #37	@ 0x25
 80083f8:	d1f9      	bne.n	80083ee <_vfiprintf_r+0x7a>
 80083fa:	ebba 0b04 	subs.w	fp, sl, r4
 80083fe:	d00b      	beq.n	8008418 <_vfiprintf_r+0xa4>
 8008400:	465b      	mov	r3, fp
 8008402:	4622      	mov	r2, r4
 8008404:	4629      	mov	r1, r5
 8008406:	4630      	mov	r0, r6
 8008408:	f7ff ffa1 	bl	800834e <__sfputs_r>
 800840c:	3001      	adds	r0, #1
 800840e:	f000 80a7 	beq.w	8008560 <_vfiprintf_r+0x1ec>
 8008412:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008414:	445a      	add	r2, fp
 8008416:	9209      	str	r2, [sp, #36]	@ 0x24
 8008418:	f89a 3000 	ldrb.w	r3, [sl]
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 809f 	beq.w	8008560 <_vfiprintf_r+0x1ec>
 8008422:	2300      	movs	r3, #0
 8008424:	f04f 32ff 	mov.w	r2, #4294967295
 8008428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800842c:	f10a 0a01 	add.w	sl, sl, #1
 8008430:	9304      	str	r3, [sp, #16]
 8008432:	9307      	str	r3, [sp, #28]
 8008434:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008438:	931a      	str	r3, [sp, #104]	@ 0x68
 800843a:	4654      	mov	r4, sl
 800843c:	2205      	movs	r2, #5
 800843e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008442:	4853      	ldr	r0, [pc, #332]	@ (8008590 <_vfiprintf_r+0x21c>)
 8008444:	f7f7 fefc 	bl	8000240 <memchr>
 8008448:	9a04      	ldr	r2, [sp, #16]
 800844a:	b9d8      	cbnz	r0, 8008484 <_vfiprintf_r+0x110>
 800844c:	06d1      	lsls	r1, r2, #27
 800844e:	bf44      	itt	mi
 8008450:	2320      	movmi	r3, #32
 8008452:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008456:	0713      	lsls	r3, r2, #28
 8008458:	bf44      	itt	mi
 800845a:	232b      	movmi	r3, #43	@ 0x2b
 800845c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008460:	f89a 3000 	ldrb.w	r3, [sl]
 8008464:	2b2a      	cmp	r3, #42	@ 0x2a
 8008466:	d015      	beq.n	8008494 <_vfiprintf_r+0x120>
 8008468:	9a07      	ldr	r2, [sp, #28]
 800846a:	4654      	mov	r4, sl
 800846c:	2000      	movs	r0, #0
 800846e:	f04f 0c0a 	mov.w	ip, #10
 8008472:	4621      	mov	r1, r4
 8008474:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008478:	3b30      	subs	r3, #48	@ 0x30
 800847a:	2b09      	cmp	r3, #9
 800847c:	d94b      	bls.n	8008516 <_vfiprintf_r+0x1a2>
 800847e:	b1b0      	cbz	r0, 80084ae <_vfiprintf_r+0x13a>
 8008480:	9207      	str	r2, [sp, #28]
 8008482:	e014      	b.n	80084ae <_vfiprintf_r+0x13a>
 8008484:	eba0 0308 	sub.w	r3, r0, r8
 8008488:	fa09 f303 	lsl.w	r3, r9, r3
 800848c:	4313      	orrs	r3, r2
 800848e:	9304      	str	r3, [sp, #16]
 8008490:	46a2      	mov	sl, r4
 8008492:	e7d2      	b.n	800843a <_vfiprintf_r+0xc6>
 8008494:	9b03      	ldr	r3, [sp, #12]
 8008496:	1d19      	adds	r1, r3, #4
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	9103      	str	r1, [sp, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	bfbb      	ittet	lt
 80084a0:	425b      	neglt	r3, r3
 80084a2:	f042 0202 	orrlt.w	r2, r2, #2
 80084a6:	9307      	strge	r3, [sp, #28]
 80084a8:	9307      	strlt	r3, [sp, #28]
 80084aa:	bfb8      	it	lt
 80084ac:	9204      	strlt	r2, [sp, #16]
 80084ae:	7823      	ldrb	r3, [r4, #0]
 80084b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80084b2:	d10a      	bne.n	80084ca <_vfiprintf_r+0x156>
 80084b4:	7863      	ldrb	r3, [r4, #1]
 80084b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80084b8:	d132      	bne.n	8008520 <_vfiprintf_r+0x1ac>
 80084ba:	9b03      	ldr	r3, [sp, #12]
 80084bc:	1d1a      	adds	r2, r3, #4
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	9203      	str	r2, [sp, #12]
 80084c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084c6:	3402      	adds	r4, #2
 80084c8:	9305      	str	r3, [sp, #20]
 80084ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80085a0 <_vfiprintf_r+0x22c>
 80084ce:	7821      	ldrb	r1, [r4, #0]
 80084d0:	2203      	movs	r2, #3
 80084d2:	4650      	mov	r0, sl
 80084d4:	f7f7 feb4 	bl	8000240 <memchr>
 80084d8:	b138      	cbz	r0, 80084ea <_vfiprintf_r+0x176>
 80084da:	9b04      	ldr	r3, [sp, #16]
 80084dc:	eba0 000a 	sub.w	r0, r0, sl
 80084e0:	2240      	movs	r2, #64	@ 0x40
 80084e2:	4082      	lsls	r2, r0
 80084e4:	4313      	orrs	r3, r2
 80084e6:	3401      	adds	r4, #1
 80084e8:	9304      	str	r3, [sp, #16]
 80084ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ee:	4829      	ldr	r0, [pc, #164]	@ (8008594 <_vfiprintf_r+0x220>)
 80084f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084f4:	2206      	movs	r2, #6
 80084f6:	f7f7 fea3 	bl	8000240 <memchr>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	d03f      	beq.n	800857e <_vfiprintf_r+0x20a>
 80084fe:	4b26      	ldr	r3, [pc, #152]	@ (8008598 <_vfiprintf_r+0x224>)
 8008500:	bb1b      	cbnz	r3, 800854a <_vfiprintf_r+0x1d6>
 8008502:	9b03      	ldr	r3, [sp, #12]
 8008504:	3307      	adds	r3, #7
 8008506:	f023 0307 	bic.w	r3, r3, #7
 800850a:	3308      	adds	r3, #8
 800850c:	9303      	str	r3, [sp, #12]
 800850e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008510:	443b      	add	r3, r7
 8008512:	9309      	str	r3, [sp, #36]	@ 0x24
 8008514:	e76a      	b.n	80083ec <_vfiprintf_r+0x78>
 8008516:	fb0c 3202 	mla	r2, ip, r2, r3
 800851a:	460c      	mov	r4, r1
 800851c:	2001      	movs	r0, #1
 800851e:	e7a8      	b.n	8008472 <_vfiprintf_r+0xfe>
 8008520:	2300      	movs	r3, #0
 8008522:	3401      	adds	r4, #1
 8008524:	9305      	str	r3, [sp, #20]
 8008526:	4619      	mov	r1, r3
 8008528:	f04f 0c0a 	mov.w	ip, #10
 800852c:	4620      	mov	r0, r4
 800852e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008532:	3a30      	subs	r2, #48	@ 0x30
 8008534:	2a09      	cmp	r2, #9
 8008536:	d903      	bls.n	8008540 <_vfiprintf_r+0x1cc>
 8008538:	2b00      	cmp	r3, #0
 800853a:	d0c6      	beq.n	80084ca <_vfiprintf_r+0x156>
 800853c:	9105      	str	r1, [sp, #20]
 800853e:	e7c4      	b.n	80084ca <_vfiprintf_r+0x156>
 8008540:	fb0c 2101 	mla	r1, ip, r1, r2
 8008544:	4604      	mov	r4, r0
 8008546:	2301      	movs	r3, #1
 8008548:	e7f0      	b.n	800852c <_vfiprintf_r+0x1b8>
 800854a:	ab03      	add	r3, sp, #12
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	462a      	mov	r2, r5
 8008550:	4b12      	ldr	r3, [pc, #72]	@ (800859c <_vfiprintf_r+0x228>)
 8008552:	a904      	add	r1, sp, #16
 8008554:	4630      	mov	r0, r6
 8008556:	f7fd fd7f 	bl	8006058 <_printf_float>
 800855a:	4607      	mov	r7, r0
 800855c:	1c78      	adds	r0, r7, #1
 800855e:	d1d6      	bne.n	800850e <_vfiprintf_r+0x19a>
 8008560:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008562:	07d9      	lsls	r1, r3, #31
 8008564:	d405      	bmi.n	8008572 <_vfiprintf_r+0x1fe>
 8008566:	89ab      	ldrh	r3, [r5, #12]
 8008568:	059a      	lsls	r2, r3, #22
 800856a:	d402      	bmi.n	8008572 <_vfiprintf_r+0x1fe>
 800856c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800856e:	f7fe fc47 	bl	8006e00 <__retarget_lock_release_recursive>
 8008572:	89ab      	ldrh	r3, [r5, #12]
 8008574:	065b      	lsls	r3, r3, #25
 8008576:	f53f af1f 	bmi.w	80083b8 <_vfiprintf_r+0x44>
 800857a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800857c:	e71e      	b.n	80083bc <_vfiprintf_r+0x48>
 800857e:	ab03      	add	r3, sp, #12
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	462a      	mov	r2, r5
 8008584:	4b05      	ldr	r3, [pc, #20]	@ (800859c <_vfiprintf_r+0x228>)
 8008586:	a904      	add	r1, sp, #16
 8008588:	4630      	mov	r0, r6
 800858a:	f7fd ffed 	bl	8006568 <_printf_i>
 800858e:	e7e4      	b.n	800855a <_vfiprintf_r+0x1e6>
 8008590:	08008d08 	.word	0x08008d08
 8008594:	08008d12 	.word	0x08008d12
 8008598:	08006059 	.word	0x08006059
 800859c:	0800834f 	.word	0x0800834f
 80085a0:	08008d0e 	.word	0x08008d0e

080085a4 <__sflush_r>:
 80085a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ac:	0716      	lsls	r6, r2, #28
 80085ae:	4605      	mov	r5, r0
 80085b0:	460c      	mov	r4, r1
 80085b2:	d454      	bmi.n	800865e <__sflush_r+0xba>
 80085b4:	684b      	ldr	r3, [r1, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	dc02      	bgt.n	80085c0 <__sflush_r+0x1c>
 80085ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80085bc:	2b00      	cmp	r3, #0
 80085be:	dd48      	ble.n	8008652 <__sflush_r+0xae>
 80085c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085c2:	2e00      	cmp	r6, #0
 80085c4:	d045      	beq.n	8008652 <__sflush_r+0xae>
 80085c6:	2300      	movs	r3, #0
 80085c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085cc:	682f      	ldr	r7, [r5, #0]
 80085ce:	6a21      	ldr	r1, [r4, #32]
 80085d0:	602b      	str	r3, [r5, #0]
 80085d2:	d030      	beq.n	8008636 <__sflush_r+0x92>
 80085d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	0759      	lsls	r1, r3, #29
 80085da:	d505      	bpl.n	80085e8 <__sflush_r+0x44>
 80085dc:	6863      	ldr	r3, [r4, #4]
 80085de:	1ad2      	subs	r2, r2, r3
 80085e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085e2:	b10b      	cbz	r3, 80085e8 <__sflush_r+0x44>
 80085e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80085e6:	1ad2      	subs	r2, r2, r3
 80085e8:	2300      	movs	r3, #0
 80085ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085ec:	6a21      	ldr	r1, [r4, #32]
 80085ee:	4628      	mov	r0, r5
 80085f0:	47b0      	blx	r6
 80085f2:	1c43      	adds	r3, r0, #1
 80085f4:	89a3      	ldrh	r3, [r4, #12]
 80085f6:	d106      	bne.n	8008606 <__sflush_r+0x62>
 80085f8:	6829      	ldr	r1, [r5, #0]
 80085fa:	291d      	cmp	r1, #29
 80085fc:	d82b      	bhi.n	8008656 <__sflush_r+0xb2>
 80085fe:	4a2a      	ldr	r2, [pc, #168]	@ (80086a8 <__sflush_r+0x104>)
 8008600:	410a      	asrs	r2, r1
 8008602:	07d6      	lsls	r6, r2, #31
 8008604:	d427      	bmi.n	8008656 <__sflush_r+0xb2>
 8008606:	2200      	movs	r2, #0
 8008608:	6062      	str	r2, [r4, #4]
 800860a:	04d9      	lsls	r1, r3, #19
 800860c:	6922      	ldr	r2, [r4, #16]
 800860e:	6022      	str	r2, [r4, #0]
 8008610:	d504      	bpl.n	800861c <__sflush_r+0x78>
 8008612:	1c42      	adds	r2, r0, #1
 8008614:	d101      	bne.n	800861a <__sflush_r+0x76>
 8008616:	682b      	ldr	r3, [r5, #0]
 8008618:	b903      	cbnz	r3, 800861c <__sflush_r+0x78>
 800861a:	6560      	str	r0, [r4, #84]	@ 0x54
 800861c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800861e:	602f      	str	r7, [r5, #0]
 8008620:	b1b9      	cbz	r1, 8008652 <__sflush_r+0xae>
 8008622:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008626:	4299      	cmp	r1, r3
 8008628:	d002      	beq.n	8008630 <__sflush_r+0x8c>
 800862a:	4628      	mov	r0, r5
 800862c:	f7ff f9f6 	bl	8007a1c <_free_r>
 8008630:	2300      	movs	r3, #0
 8008632:	6363      	str	r3, [r4, #52]	@ 0x34
 8008634:	e00d      	b.n	8008652 <__sflush_r+0xae>
 8008636:	2301      	movs	r3, #1
 8008638:	4628      	mov	r0, r5
 800863a:	47b0      	blx	r6
 800863c:	4602      	mov	r2, r0
 800863e:	1c50      	adds	r0, r2, #1
 8008640:	d1c9      	bne.n	80085d6 <__sflush_r+0x32>
 8008642:	682b      	ldr	r3, [r5, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d0c6      	beq.n	80085d6 <__sflush_r+0x32>
 8008648:	2b1d      	cmp	r3, #29
 800864a:	d001      	beq.n	8008650 <__sflush_r+0xac>
 800864c:	2b16      	cmp	r3, #22
 800864e:	d11e      	bne.n	800868e <__sflush_r+0xea>
 8008650:	602f      	str	r7, [r5, #0]
 8008652:	2000      	movs	r0, #0
 8008654:	e022      	b.n	800869c <__sflush_r+0xf8>
 8008656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800865a:	b21b      	sxth	r3, r3
 800865c:	e01b      	b.n	8008696 <__sflush_r+0xf2>
 800865e:	690f      	ldr	r7, [r1, #16]
 8008660:	2f00      	cmp	r7, #0
 8008662:	d0f6      	beq.n	8008652 <__sflush_r+0xae>
 8008664:	0793      	lsls	r3, r2, #30
 8008666:	680e      	ldr	r6, [r1, #0]
 8008668:	bf08      	it	eq
 800866a:	694b      	ldreq	r3, [r1, #20]
 800866c:	600f      	str	r7, [r1, #0]
 800866e:	bf18      	it	ne
 8008670:	2300      	movne	r3, #0
 8008672:	eba6 0807 	sub.w	r8, r6, r7
 8008676:	608b      	str	r3, [r1, #8]
 8008678:	f1b8 0f00 	cmp.w	r8, #0
 800867c:	dde9      	ble.n	8008652 <__sflush_r+0xae>
 800867e:	6a21      	ldr	r1, [r4, #32]
 8008680:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008682:	4643      	mov	r3, r8
 8008684:	463a      	mov	r2, r7
 8008686:	4628      	mov	r0, r5
 8008688:	47b0      	blx	r6
 800868a:	2800      	cmp	r0, #0
 800868c:	dc08      	bgt.n	80086a0 <__sflush_r+0xfc>
 800868e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008696:	81a3      	strh	r3, [r4, #12]
 8008698:	f04f 30ff 	mov.w	r0, #4294967295
 800869c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a0:	4407      	add	r7, r0
 80086a2:	eba8 0800 	sub.w	r8, r8, r0
 80086a6:	e7e7      	b.n	8008678 <__sflush_r+0xd4>
 80086a8:	dfbffffe 	.word	0xdfbffffe

080086ac <_fflush_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	690b      	ldr	r3, [r1, #16]
 80086b0:	4605      	mov	r5, r0
 80086b2:	460c      	mov	r4, r1
 80086b4:	b913      	cbnz	r3, 80086bc <_fflush_r+0x10>
 80086b6:	2500      	movs	r5, #0
 80086b8:	4628      	mov	r0, r5
 80086ba:	bd38      	pop	{r3, r4, r5, pc}
 80086bc:	b118      	cbz	r0, 80086c6 <_fflush_r+0x1a>
 80086be:	6a03      	ldr	r3, [r0, #32]
 80086c0:	b90b      	cbnz	r3, 80086c6 <_fflush_r+0x1a>
 80086c2:	f7fe f8fd 	bl	80068c0 <__sinit>
 80086c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0f3      	beq.n	80086b6 <_fflush_r+0xa>
 80086ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086d0:	07d0      	lsls	r0, r2, #31
 80086d2:	d404      	bmi.n	80086de <_fflush_r+0x32>
 80086d4:	0599      	lsls	r1, r3, #22
 80086d6:	d402      	bmi.n	80086de <_fflush_r+0x32>
 80086d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086da:	f7fe fb90 	bl	8006dfe <__retarget_lock_acquire_recursive>
 80086de:	4628      	mov	r0, r5
 80086e0:	4621      	mov	r1, r4
 80086e2:	f7ff ff5f 	bl	80085a4 <__sflush_r>
 80086e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086e8:	07da      	lsls	r2, r3, #31
 80086ea:	4605      	mov	r5, r0
 80086ec:	d4e4      	bmi.n	80086b8 <_fflush_r+0xc>
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	059b      	lsls	r3, r3, #22
 80086f2:	d4e1      	bmi.n	80086b8 <_fflush_r+0xc>
 80086f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086f6:	f7fe fb83 	bl	8006e00 <__retarget_lock_release_recursive>
 80086fa:	e7dd      	b.n	80086b8 <_fflush_r+0xc>

080086fc <fiprintf>:
 80086fc:	b40e      	push	{r1, r2, r3}
 80086fe:	b503      	push	{r0, r1, lr}
 8008700:	4601      	mov	r1, r0
 8008702:	ab03      	add	r3, sp, #12
 8008704:	4805      	ldr	r0, [pc, #20]	@ (800871c <fiprintf+0x20>)
 8008706:	f853 2b04 	ldr.w	r2, [r3], #4
 800870a:	6800      	ldr	r0, [r0, #0]
 800870c:	9301      	str	r3, [sp, #4]
 800870e:	f7ff fe31 	bl	8008374 <_vfiprintf_r>
 8008712:	b002      	add	sp, #8
 8008714:	f85d eb04 	ldr.w	lr, [sp], #4
 8008718:	b003      	add	sp, #12
 800871a:	4770      	bx	lr
 800871c:	2000001c 	.word	0x2000001c

08008720 <__swhatbuf_r>:
 8008720:	b570      	push	{r4, r5, r6, lr}
 8008722:	460c      	mov	r4, r1
 8008724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008728:	2900      	cmp	r1, #0
 800872a:	b096      	sub	sp, #88	@ 0x58
 800872c:	4615      	mov	r5, r2
 800872e:	461e      	mov	r6, r3
 8008730:	da0d      	bge.n	800874e <__swhatbuf_r+0x2e>
 8008732:	89a3      	ldrh	r3, [r4, #12]
 8008734:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008738:	f04f 0100 	mov.w	r1, #0
 800873c:	bf14      	ite	ne
 800873e:	2340      	movne	r3, #64	@ 0x40
 8008740:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008744:	2000      	movs	r0, #0
 8008746:	6031      	str	r1, [r6, #0]
 8008748:	602b      	str	r3, [r5, #0]
 800874a:	b016      	add	sp, #88	@ 0x58
 800874c:	bd70      	pop	{r4, r5, r6, pc}
 800874e:	466a      	mov	r2, sp
 8008750:	f000 f848 	bl	80087e4 <_fstat_r>
 8008754:	2800      	cmp	r0, #0
 8008756:	dbec      	blt.n	8008732 <__swhatbuf_r+0x12>
 8008758:	9901      	ldr	r1, [sp, #4]
 800875a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800875e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008762:	4259      	negs	r1, r3
 8008764:	4159      	adcs	r1, r3
 8008766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800876a:	e7eb      	b.n	8008744 <__swhatbuf_r+0x24>

0800876c <__smakebuf_r>:
 800876c:	898b      	ldrh	r3, [r1, #12]
 800876e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008770:	079d      	lsls	r5, r3, #30
 8008772:	4606      	mov	r6, r0
 8008774:	460c      	mov	r4, r1
 8008776:	d507      	bpl.n	8008788 <__smakebuf_r+0x1c>
 8008778:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800877c:	6023      	str	r3, [r4, #0]
 800877e:	6123      	str	r3, [r4, #16]
 8008780:	2301      	movs	r3, #1
 8008782:	6163      	str	r3, [r4, #20]
 8008784:	b003      	add	sp, #12
 8008786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008788:	ab01      	add	r3, sp, #4
 800878a:	466a      	mov	r2, sp
 800878c:	f7ff ffc8 	bl	8008720 <__swhatbuf_r>
 8008790:	9f00      	ldr	r7, [sp, #0]
 8008792:	4605      	mov	r5, r0
 8008794:	4639      	mov	r1, r7
 8008796:	4630      	mov	r0, r6
 8008798:	f7ff f9b4 	bl	8007b04 <_malloc_r>
 800879c:	b948      	cbnz	r0, 80087b2 <__smakebuf_r+0x46>
 800879e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087a2:	059a      	lsls	r2, r3, #22
 80087a4:	d4ee      	bmi.n	8008784 <__smakebuf_r+0x18>
 80087a6:	f023 0303 	bic.w	r3, r3, #3
 80087aa:	f043 0302 	orr.w	r3, r3, #2
 80087ae:	81a3      	strh	r3, [r4, #12]
 80087b0:	e7e2      	b.n	8008778 <__smakebuf_r+0xc>
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	6020      	str	r0, [r4, #0]
 80087b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087ba:	81a3      	strh	r3, [r4, #12]
 80087bc:	9b01      	ldr	r3, [sp, #4]
 80087be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80087c2:	b15b      	cbz	r3, 80087dc <__smakebuf_r+0x70>
 80087c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087c8:	4630      	mov	r0, r6
 80087ca:	f000 f81d 	bl	8008808 <_isatty_r>
 80087ce:	b128      	cbz	r0, 80087dc <__smakebuf_r+0x70>
 80087d0:	89a3      	ldrh	r3, [r4, #12]
 80087d2:	f023 0303 	bic.w	r3, r3, #3
 80087d6:	f043 0301 	orr.w	r3, r3, #1
 80087da:	81a3      	strh	r3, [r4, #12]
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	431d      	orrs	r5, r3
 80087e0:	81a5      	strh	r5, [r4, #12]
 80087e2:	e7cf      	b.n	8008784 <__smakebuf_r+0x18>

080087e4 <_fstat_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	4d07      	ldr	r5, [pc, #28]	@ (8008804 <_fstat_r+0x20>)
 80087e8:	2300      	movs	r3, #0
 80087ea:	4604      	mov	r4, r0
 80087ec:	4608      	mov	r0, r1
 80087ee:	4611      	mov	r1, r2
 80087f0:	602b      	str	r3, [r5, #0]
 80087f2:	f7f8 fc67 	bl	80010c4 <_fstat>
 80087f6:	1c43      	adds	r3, r0, #1
 80087f8:	d102      	bne.n	8008800 <_fstat_r+0x1c>
 80087fa:	682b      	ldr	r3, [r5, #0]
 80087fc:	b103      	cbz	r3, 8008800 <_fstat_r+0x1c>
 80087fe:	6023      	str	r3, [r4, #0]
 8008800:	bd38      	pop	{r3, r4, r5, pc}
 8008802:	bf00      	nop
 8008804:	20000530 	.word	0x20000530

08008808 <_isatty_r>:
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	4d06      	ldr	r5, [pc, #24]	@ (8008824 <_isatty_r+0x1c>)
 800880c:	2300      	movs	r3, #0
 800880e:	4604      	mov	r4, r0
 8008810:	4608      	mov	r0, r1
 8008812:	602b      	str	r3, [r5, #0]
 8008814:	f7f8 fc66 	bl	80010e4 <_isatty>
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	d102      	bne.n	8008822 <_isatty_r+0x1a>
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	b103      	cbz	r3, 8008822 <_isatty_r+0x1a>
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	bd38      	pop	{r3, r4, r5, pc}
 8008824:	20000530 	.word	0x20000530

08008828 <_sbrk_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	4d06      	ldr	r5, [pc, #24]	@ (8008844 <_sbrk_r+0x1c>)
 800882c:	2300      	movs	r3, #0
 800882e:	4604      	mov	r4, r0
 8008830:	4608      	mov	r0, r1
 8008832:	602b      	str	r3, [r5, #0]
 8008834:	f7f8 fc6e 	bl	8001114 <_sbrk>
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	d102      	bne.n	8008842 <_sbrk_r+0x1a>
 800883c:	682b      	ldr	r3, [r5, #0]
 800883e:	b103      	cbz	r3, 8008842 <_sbrk_r+0x1a>
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	bd38      	pop	{r3, r4, r5, pc}
 8008844:	20000530 	.word	0x20000530

08008848 <abort>:
 8008848:	b508      	push	{r3, lr}
 800884a:	2006      	movs	r0, #6
 800884c:	f000 f85e 	bl	800890c <raise>
 8008850:	2001      	movs	r0, #1
 8008852:	f7f8 fbe7 	bl	8001024 <_exit>

08008856 <_calloc_r>:
 8008856:	b570      	push	{r4, r5, r6, lr}
 8008858:	fba1 5402 	umull	r5, r4, r1, r2
 800885c:	b93c      	cbnz	r4, 800886e <_calloc_r+0x18>
 800885e:	4629      	mov	r1, r5
 8008860:	f7ff f950 	bl	8007b04 <_malloc_r>
 8008864:	4606      	mov	r6, r0
 8008866:	b928      	cbnz	r0, 8008874 <_calloc_r+0x1e>
 8008868:	2600      	movs	r6, #0
 800886a:	4630      	mov	r0, r6
 800886c:	bd70      	pop	{r4, r5, r6, pc}
 800886e:	220c      	movs	r2, #12
 8008870:	6002      	str	r2, [r0, #0]
 8008872:	e7f9      	b.n	8008868 <_calloc_r+0x12>
 8008874:	462a      	mov	r2, r5
 8008876:	4621      	mov	r1, r4
 8008878:	f7fe fa4a 	bl	8006d10 <memset>
 800887c:	e7f5      	b.n	800886a <_calloc_r+0x14>

0800887e <__ascii_mbtowc>:
 800887e:	b082      	sub	sp, #8
 8008880:	b901      	cbnz	r1, 8008884 <__ascii_mbtowc+0x6>
 8008882:	a901      	add	r1, sp, #4
 8008884:	b142      	cbz	r2, 8008898 <__ascii_mbtowc+0x1a>
 8008886:	b14b      	cbz	r3, 800889c <__ascii_mbtowc+0x1e>
 8008888:	7813      	ldrb	r3, [r2, #0]
 800888a:	600b      	str	r3, [r1, #0]
 800888c:	7812      	ldrb	r2, [r2, #0]
 800888e:	1e10      	subs	r0, r2, #0
 8008890:	bf18      	it	ne
 8008892:	2001      	movne	r0, #1
 8008894:	b002      	add	sp, #8
 8008896:	4770      	bx	lr
 8008898:	4610      	mov	r0, r2
 800889a:	e7fb      	b.n	8008894 <__ascii_mbtowc+0x16>
 800889c:	f06f 0001 	mvn.w	r0, #1
 80088a0:	e7f8      	b.n	8008894 <__ascii_mbtowc+0x16>

080088a2 <__ascii_wctomb>:
 80088a2:	4603      	mov	r3, r0
 80088a4:	4608      	mov	r0, r1
 80088a6:	b141      	cbz	r1, 80088ba <__ascii_wctomb+0x18>
 80088a8:	2aff      	cmp	r2, #255	@ 0xff
 80088aa:	d904      	bls.n	80088b6 <__ascii_wctomb+0x14>
 80088ac:	228a      	movs	r2, #138	@ 0x8a
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	f04f 30ff 	mov.w	r0, #4294967295
 80088b4:	4770      	bx	lr
 80088b6:	700a      	strb	r2, [r1, #0]
 80088b8:	2001      	movs	r0, #1
 80088ba:	4770      	bx	lr

080088bc <_raise_r>:
 80088bc:	291f      	cmp	r1, #31
 80088be:	b538      	push	{r3, r4, r5, lr}
 80088c0:	4605      	mov	r5, r0
 80088c2:	460c      	mov	r4, r1
 80088c4:	d904      	bls.n	80088d0 <_raise_r+0x14>
 80088c6:	2316      	movs	r3, #22
 80088c8:	6003      	str	r3, [r0, #0]
 80088ca:	f04f 30ff 	mov.w	r0, #4294967295
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80088d2:	b112      	cbz	r2, 80088da <_raise_r+0x1e>
 80088d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088d8:	b94b      	cbnz	r3, 80088ee <_raise_r+0x32>
 80088da:	4628      	mov	r0, r5
 80088dc:	f000 f830 	bl	8008940 <_getpid_r>
 80088e0:	4622      	mov	r2, r4
 80088e2:	4601      	mov	r1, r0
 80088e4:	4628      	mov	r0, r5
 80088e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088ea:	f000 b817 	b.w	800891c <_kill_r>
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d00a      	beq.n	8008908 <_raise_r+0x4c>
 80088f2:	1c59      	adds	r1, r3, #1
 80088f4:	d103      	bne.n	80088fe <_raise_r+0x42>
 80088f6:	2316      	movs	r3, #22
 80088f8:	6003      	str	r3, [r0, #0]
 80088fa:	2001      	movs	r0, #1
 80088fc:	e7e7      	b.n	80088ce <_raise_r+0x12>
 80088fe:	2100      	movs	r1, #0
 8008900:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008904:	4620      	mov	r0, r4
 8008906:	4798      	blx	r3
 8008908:	2000      	movs	r0, #0
 800890a:	e7e0      	b.n	80088ce <_raise_r+0x12>

0800890c <raise>:
 800890c:	4b02      	ldr	r3, [pc, #8]	@ (8008918 <raise+0xc>)
 800890e:	4601      	mov	r1, r0
 8008910:	6818      	ldr	r0, [r3, #0]
 8008912:	f7ff bfd3 	b.w	80088bc <_raise_r>
 8008916:	bf00      	nop
 8008918:	2000001c 	.word	0x2000001c

0800891c <_kill_r>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	4d07      	ldr	r5, [pc, #28]	@ (800893c <_kill_r+0x20>)
 8008920:	2300      	movs	r3, #0
 8008922:	4604      	mov	r4, r0
 8008924:	4608      	mov	r0, r1
 8008926:	4611      	mov	r1, r2
 8008928:	602b      	str	r3, [r5, #0]
 800892a:	f7f8 fb69 	bl	8001000 <_kill>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	d102      	bne.n	8008938 <_kill_r+0x1c>
 8008932:	682b      	ldr	r3, [r5, #0]
 8008934:	b103      	cbz	r3, 8008938 <_kill_r+0x1c>
 8008936:	6023      	str	r3, [r4, #0]
 8008938:	bd38      	pop	{r3, r4, r5, pc}
 800893a:	bf00      	nop
 800893c:	20000530 	.word	0x20000530

08008940 <_getpid_r>:
 8008940:	f7f8 bb56 	b.w	8000ff0 <_getpid>

08008944 <_init>:
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008946:	bf00      	nop
 8008948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894a:	bc08      	pop	{r3}
 800894c:	469e      	mov	lr, r3
 800894e:	4770      	bx	lr

08008950 <_fini>:
 8008950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008952:	bf00      	nop
 8008954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008956:	bc08      	pop	{r3}
 8008958:	469e      	mov	lr, r3
 800895a:	4770      	bx	lr
